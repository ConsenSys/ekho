var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,0.812,1,2.012]],["body/modules/AppModule.html",[0,1.356,1,3.9,2,1.442,3,1.442,4,1.722,5,1.722,6,1.442,7,2.237,8,1.722,9,3.027,10,3.027,11,3.392,12,0.033,13,3.392,14,2.237,15,1.722,16,1.722,17,0.317,18,0.317,19,0.27,20,3.633,21,2.716,22,0.605,23,0.786,24,2.627,25,1.892,26,2.329,27,1.574,28,4.719,29,3.633,30,3.633,31,3.633,32,4.719,33,3.633,34,3.633,35,3.633,36,3.633,37,2.627,38,3.633,39,1.323,40,0.317,41,0.083,42,0.019,43,0.024,44,0.019]],["title/classes/CreateUserDto.html",[41,0.072,45,1.806]],["body/classes/CreateUserDto.html",[12,0.033,17,0.374,18,0.374,19,0.318,22,0.432,40,0.374,41,0.098,42,0.022,43,0.027,44,0.022,45,3.014,46,1.561,47,4.363,48,3.571,49,0.557,50,1.907,51,1.563,52,0.624,53,0.938,54,1.433,55,2.747,56,1.752,57,0.767,58,4.286,59,3.357,60,2.466,61,2.747,62,2.032]],["title/classes/CryptographyKeyPairDto.html",[41,0.072,63,2.012]],["body/classes/CryptographyKeyPairDto.html",[12,0.032,17,0.382,18,0.382,19,0.325,40,0.382,41,0.1,42,0.023,43,0.027,44,0.023,46,1.596,49,0.57,50,1.933,52,0.773,57,0.951,63,3.403,64,4.758,65,3.651,66,4.13,67,4.13,68,4.946,69,4.383,70,4.383]],["title/modules/CryptographyModule.html",[0,0.812,71,2.012]],["body/modules/CryptographyModule.html",[0,1.424,2,1.601,3,1.601,4,1.913,5,1.913,6,1.601,7,2.61,8,2.61,12,0.032,14,2.392,15,1.913,16,1.913,17,0.352,18,0.352,19,0.299,22,0.509,23,0.873,40,0.352,41,0.092,42,0.021,43,0.026,44,0.021,71,3.939,72,3.361,73,3.361,74,3.361,75,3.67,76,4.034,77,4.034]],["title/injectables/CryptographyService.html",[75,1.806,78,1.049]],["body/injectables/CryptographyService.html",[12,0.033,17,0.08,18,0.08,19,0.068,22,0.218,23,0.199,40,0.08,41,0.021,42,0.005,43,0.008,44,0.005,49,0.119,51,0.972,52,0.547,53,0.532,56,0.54,57,0.789,62,1.782,63,1.387,66,2.556,67,2.148,68,5.197,75,0.93,78,0.54,79,0.478,80,0.765,81,0.588,82,2.272,83,2.606,84,1.616,85,2.606,86,1.616,87,1.616,88,2.606,89,2.606,90,2.606,91,1.616,92,1.616,93,2.606,94,1.616,95,1.616,96,4.398,97,5.918,98,0.918,99,1.616,100,3.803,101,3.758,102,4.407,103,1.368,104,1.257,105,2.606,106,3.092,107,4.823,108,3.275,109,3.275,110,5.05,111,3.275,112,1.904,113,2.114,114,4.98,115,1.616,116,3.275,117,0.918,118,1.616,119,2.606,120,1.616,121,1.616,122,1.616,123,1.616,124,4.122,125,3.758,126,1.616,127,0.918,128,1.616,129,2.606,130,1.616,131,0.918,132,4.636,133,2.606,134,2.606,135,3.758,136,2.642,137,1.616,138,1.616,139,3.862,140,2.536,141,2.606,142,1.616,143,0.918,144,1.346,145,1.616,146,3.275,147,2.606,148,1.616,149,1.616,150,3.275,151,1.616,152,1.616,153,1.616,154,1.616,155,0.918,156,1.616,157,2.606,158,1.616,159,1.346,160,1.616,161,1.616,162,1.616,163,4.122,164,2.171,165,2.606,166,0.918,167,0.918,168,1.616,169,0.918,170,1.616,171,2.606,172,1.616,173,1.616,174,1.616,175,1.616,176,3.758,177,0.918,178,2.606,179,2.668,180,2.606,181,2.606,182,0.918,183,1.616,184,1.616,185,3.535,186,0.918,187,1.616,188,1.616,189,2.942,190,3.275,191,2.164,192,1.616,193,1.616,194,0.918,195,0.765,196,0.765,197,0.918,198,0.918,199,2.555,200,0.918,201,0.918,202,0.918,203,1.605,204,1.616,205,1.616,206,2.164,207,0.918,208,0.918,209,0.918,210,0.918,211,0.918,212,3.275,213,0.918,214,1.616,215,0.918,216,0.918,217,1.616,218,0.918,219,1.616,220,0.918,221,0.918,222,0.918,223,0.918,224,0.664,225,1.616,226,1.616,227,0.918,228,1.616,229,0.918,230,0.918,231,0.918,232,0.918]],["title/controllers/IpfsController.html",[233,1.245,234,2.012]],["body/controllers/IpfsController.html",[12,0.033,17,0.307,18,0.307,19,0.261,22,0.52,23,0.76,39,1.279,40,0.307,41,0.08,42,0.018,43,0.024,44,0.018,49,0.457,51,1.194,52,0.672,53,0.923,54,1.544,57,0.827,81,1.681,82,2.318,100,2.959,103,1.681,104,1.544,112,1.681,113,2.174,189,2.021,203,1.681,233,1.394,234,2.959,235,2.927,236,2.252,237,2.54,238,3.647,239,3.513,240,4.617,241,3.513,242,3.846,243,3.513,244,3.152,245,3.513,246,2.54,247,2.927,248,2.54,249,2.445,250,2.927,251,3.513,252,2.021,253,1.522,254,3.513,255,3.513,256,3.513,257,3.513]],["title/classes/IpfsMessageDto.html",[41,0.072,244,1.806]],["body/classes/IpfsMessageDto.html",[12,0.033,17,0.345,18,0.345,19,0.293,22,0.399,40,0.345,41,0.09,42,0.02,43,0.026,44,0.02,46,1.439,49,0.514,50,1.814,52,0.794,53,1.079,54,1.824,55,3.496,57,0.977,59,3.67,60,2.274,62,2.586,244,2.866,258,4.77,259,2.858,260,2.557,261,3.293,262,3.293,263,3.293]],["title/modules/IpfsModule.html",[0,0.812,264,1.806]],["body/modules/IpfsModule.html",[0,1.389,2,1.517,3,1.517,4,1.813,5,1.813,6,1.517,7,2.546,8,2.546,12,0.033,14,2.312,15,1.813,16,1.813,17,0.334,18,0.334,19,0.284,21,2.2,22,0.571,23,0.828,24,3.527,25,1.991,39,1.776,40,0.334,41,0.087,42,0.02,43,0.025,44,0.02,234,3.442,249,3.001,250,3.185,264,3.494,265,3.185,266,3.185,267,3.185,268,3.823,269,3.823]],["title/injectables/IpfsService.html",[78,1.049,249,1.488]],["body/injectables/IpfsService.html",[12,0.033,17,0.219,18,0.219,19,0.352,22,0.478,23,0.543,25,1.307,40,0.219,41,0.057,42,0.019,43,0.019,44,0.013,49,0.326,50,1.331,51,1.116,52,0.628,53,0.772,57,0.849,62,1.733,78,1.223,79,1.307,81,1.331,82,2.087,100,3.37,103,1.571,104,1.442,112,1.331,113,1.881,136,1.609,140,2.482,144,2.091,159,2.091,189,2.104,199,2.827,203,1.331,237,4.452,242,3.948,244,2.727,247,2.091,248,1.815,249,1.733,252,1.444,253,2.053,270,2.091,271,3.656,272,3.656,273,1.609,274,2.509,275,4.38,276,3.656,277,3.656,278,2.509,279,3.656,280,3.656,281,3.656,282,4.739,283,4.739,284,3.656,285,2.644,286,3.656,287,2.509,288,3.656,289,3.656,290,3.656,291,1.733,292,3.656,293,3.656,294,2.091,295,2.091,296,3.656,297,2.509,298,3.656,299,2.509,300,3.656,301,2.509,302,2.509,303,2.104,304,2.509,305,2.509,306,2.509,307,2.509,308,1.815,309,1.609,310,2.509,311,2.509,312,2.509,313,2.509,314,2.509,315,2.509,316,2.509,317,2.509,318,2.509]],["title/classes/Message.html",[41,0.072,291,1.488]],["body/classes/Message.html",[12,0.033,17,0.288,18,0.288,19,0.244,22,0.332,40,0.288,41,0.075,42,0.017,43,0.023,44,0.017,46,1.2,49,0.428,50,1.611,52,0.867,53,1.109,54,1.992,57,1.066,106,2.836,260,2.164,285,3.612,291,2.098,319,2.745,320,2.532,321,2.368,322,4.995,323,3.202,324,4.552,325,3.295,326,3.295,327,3.295,328,3.612,329,3.295,330,3.295,331,3.2,332,3.295,333,3.295,334,3.295,335,3.2,336,2.383,337,1.562,338,3.295]],["title/controllers/MessagesController.html",[233,1.245,339,2.012]],["body/controllers/MessagesController.html",[12,0.033,17,0.255,18,0.255,19,0.217,22,0.512,23,0.633,37,2.114,39,1.065,40,0.255,41,0.067,42,0.015,43,0.021,44,0.015,49,0.38,51,1.055,52,0.593,53,0.841,54,1.57,56,1.57,57,0.841,81,1.485,82,2.334,103,1.485,104,1.363,112,1.709,113,2.195,189,1.683,199,2.124,203,1.485,233,1.16,236,1.874,238,3.009,246,2.114,248,2.114,252,1.683,253,1.267,291,2.622,303,2.346,308,3.395,321,1.386,339,2.613,340,2.436,341,5.079,342,4.077,343,3.397,344,2.924,345,2.924,346,4.077,347,2.924,348,2.924,349,3.255,350,2.924,351,2.924,352,2.114,353,2.445,354,2.436,355,2.924,356,2.924,357,2.924,358,2.436,359,2.436,360,2.436,361,2.924,362,2.924,363,1.683,364,1.874,365,2.924,366,2.924,367,2.924,368,2.114,369,2.924,370,4.694,371,3.397,372,2.114,373,2.436,374,2.924,375,2.924,376,2.924]],["title/modules/MessagesModule.html",[0,0.812,11,1.806]],["body/modules/MessagesModule.html",[0,1.344,2,1.415,3,1.415,4,1.691,5,1.691,6,1.415,7,2.463,8,1.691,11,3.558,12,0.033,14,2.211,15,1.691,16,1.691,17,0.311,18,0.311,19,0.265,21,2.683,22,0.603,23,0.772,26,2.286,27,1.545,39,1.698,40,0.311,41,0.082,42,0.018,43,0.024,44,0.018,264,3.375,291,1.691,339,3.33,352,2.579,353,3.055,354,2.971,377,2.971,378,2.971,379,2.971,380,3.375,381,3.566,382,3.566,383,3.566,384,3.566,385,3.566]],["title/injectables/MessagesService.html",[78,1.049,353,1.634]],["body/injectables/MessagesService.html",[12,0.034,17,0.187,18,0.187,19,0.159,22,0.5,23,0.464,27,0.928,40,0.187,41,0.049,42,0.011,43,0.017,44,0.011,49,0.278,51,1.016,52,0.571,53,1.089,56,1.087,57,0.785,78,1.087,79,1.115,81,1.183,82,2.158,103,1.43,104,1.313,112,1.43,113,1.968,140,2.259,199,2.454,203,1.716,249,2.443,253,1.701,260,2.041,273,2.083,285,2.839,291,2.671,303,3.055,308,1.549,309,2.083,320,2.671,321,1.015,323,2.083,331,1.549,337,1.015,343,2.707,352,1.549,353,1.692,358,2.707,359,2.707,360,2.707,363,1.232,368,1.549,386,1.784,387,4.383,388,3.249,389,2.142,390,3.727,391,2.443,392,2.142,393,3.249,394,2.142,395,3.249,396,2.142,397,3.249,398,2.142,399,1.784,400,1.549,401,2.142,402,2.142,403,2.142,404,2.142,405,2.142,406,1.784,407,2.142,408,2.045,409,3.249,410,3.249,411,3.249,412,3.249,413,1.784,414,2.142,415,2.142,416,3.249,417,2.142,418,1.784,419,2.142,420,2.142,421,2.142,422,2.142,423,3.249,424,2.142,425,2.142,426,2.142,427,2.142,428,2.142,429,2.142,430,2.142,431,2.142,432,2.142,433,2.35,434,2.142,435,1.784,436,2.142,437,2.142,438,2.142,439,2.142,440,2.142,441,1.784,442,1.784,443,2.142]],["title/classes/SendMessageDto.html",[41,0.072,349,2.012]],["body/classes/SendMessageDto.html",[12,0.033,17,0.312,18,0.312,19,0.265,22,0.361,40,0.312,41,0.082,42,0.018,43,0.024,44,0.018,46,1.303,49,0.465,50,1.701,52,0.803,53,1.086,54,1.845,55,3.536,57,0.988,59,3.669,60,2.059,61,2.293,62,2.615,259,2.587,260,2.479,261,2.98,262,2.98,263,2.98,320,2.467,321,2.467,349,2.995,363,2.059,364,2.293,368,3.762,444,4.768,445,3.577,446,3.577,447,3.577,448,3.577,449,3.577,450,3.577]],["title/classes/User.html",[41,0.072,56,1.049]],["body/classes/User.html",[12,0.033,17,0.356,18,0.356,19,0.302,22,0.411,40,0.356,41,0.093,42,0.021,43,0.026,44,0.021,46,1.484,49,0.53,50,1.849,51,1.498,52,0.739,53,0.909,54,1.698,56,1.698,57,0.909,106,3.255,321,2.622,324,3.672,328,4,335,3.672,336,2.948,337,1.933,451,3.396,452,4.077,453,4.077,454,5.078,455,4.077,456,4.077,457,4.077]],["title/classes/UserDto.html",[41,0.072,458,1.806]],["body/classes/UserDto.html",[12,0.033,17,0.377,18,0.377,19,0.32,22,0.436,40,0.377,41,0.099,42,0.022,43,0.027,44,0.022,46,1.572,49,0.561,50,1.916,51,1.566,52,0.628,53,0.942,54,1.444,55,2.768,56,1.759,57,0.773,59,3.373,60,2.485,61,2.768,62,2.047,458,3.028,459,3.597,460,4.318]],["title/controllers/UsersController.html",[233,1.245,461,2.012]],["body/controllers/UsersController.html",[12,0.033,17,0.308,18,0.308,19,0.262,22,0.554,23,0.765,39,1.287,40,0.308,41,0.081,42,0.018,43,0.024,44,0.018,45,3.159,49,0.459,51,1.42,52,0.674,53,0.926,54,1.55,56,1.55,57,0.83,81,1.688,82,2.322,103,1.688,104,1.55,112,1.688,113,2.179,203,1.287,233,1.402,236,2.265,238,3.315,246,2.556,252,2.034,253,1.531,458,2.034,461,2.971,462,2.944,463,3.534,464,3.352,465,2.944,466,3.534,467,3.534,468,3.534,469,3.534,470,2.944,471,2.944,472,2.944,473,2.414,474,2.944,475,3.534,476,3.534,477,3.534,478,3.534,479,3.534,480,3.534]],["title/modules/UsersModule.html",[0,0.812,13,1.806]],["body/modules/UsersModule.html",[0,1.402,2,1.548,3,1.548,4,1.849,5,1.849,6,1.548,7,2.57,8,1.849,12,0.033,13,3.456,14,2.341,15,1.849,16,1.849,17,0.34,18,0.34,19,0.289,21,2.244,22,0.593,23,0.844,26,2.5,27,1.689,39,1.798,40,0.34,41,0.089,42,0.02,43,0.025,44,0.02,56,1.304,461,3.474,473,3.128,474,3.249,481,3.249,482,3.249,483,3.9,484,3.9,485,3.249,486,3.9]],["title/injectables/UsersService.html",[78,1.049,473,1.634]],["body/injectables/UsersService.html",[12,0.033,17,0.28,18,0.28,19,0.238,22,0.574,23,0.696,27,1.392,40,0.28,41,0.073,42,0.017,43,0.022,44,0.017,45,3.041,49,0.418,51,1.473,52,0.718,53,0.883,56,1.649,57,0.883,78,1.455,79,1.674,81,1.584,82,2.259,103,1.796,104,1.649,112,1.584,113,2.097,140,1.849,199,1.674,203,1.17,253,1.392,273,2.789,303,1.849,337,1.523,390,3.822,400,2.324,408,1.674,458,1.849,464,3.146,465,3.624,470,2.677,471,2.677,472,2.677,473,2.266,485,2.677,487,2.677,488,4.35,489,3.213,490,3.213,491,4.35,492,3.213,493,4.35,494,3.213,495,3.213,496,3.213,497,3.213,498,3.213,499,3.213,500,3.213,501,3.213,502,3.213,503,3.213]],["title/controllers/Web3Controller.html",[233,1.245,504,2.012]],["body/controllers/Web3Controller.html",[12,0.033,17,0.297,18,0.297,19,0.252,22,0.512,23,0.736,39,1.238,40,0.297,41,0.078,42,0.017,43,0.023,44,0.017,49,0.442,51,0.88,52,0.495,53,1.087,54,1.511,57,0.809,81,1.645,82,2.297,103,1.238,104,1.137,112,1.645,113,2.146,136,2.18,164,2.833,179,3.112,189,1.957,203,1.645,233,1.349,236,2.18,238,3.466,252,1.957,253,1.473,260,2.343,320,2.142,321,1.612,363,1.957,391,2.406,406,2.833,504,2.896,505,2.833,506,2.18,507,3.4,508,3.4,509,4.519,510,4.519,511,3.4,512,1.771,513,2.459,514,2.833,515,3.4,516,3.4,517,3.4,518,3.4,519,3.4,520,3.4,521,3.4]],["title/classes/Web3Factory.html",[41,0.072,522,1.806]],["body/classes/Web3Factory.html",[12,0.032,17,0.373,18,0.373,19,0.317,22,0.431,40,0.373,41,0.098,42,0.022,43,0.027,44,0.022,46,1.555,49,0.555,51,1.105,52,0.621,53,1.011,57,0.765,81,1.903,103,1.555,104,1.428,112,1.555,203,1.555,408,2.224,506,3.772,522,3.007,523,3.558,524,5.226,525,5.226,526,4.27,527,3.558,528,4.27,529,4.27]],["title/modules/Web3Module.html",[0,0.812,380,1.806]],["body/modules/Web3Module.html",[0,1.354,2,1.437,3,1.437,4,1.717,5,1.717,6,1.437,7,2.481,8,2.481,12,0.033,14,2.233,15,1.717,16,1.717,17,0.316,18,0.316,19,0.269,21,2.084,22,0.605,23,0.784,24,3.406,25,1.886,26,2.322,27,1.569,39,1.715,40,0.316,41,0.083,42,0.019,43,0.024,44,0.019,380,3.451,391,2.979,504,3.355,512,1.886,513,2.619,514,3.017,522,2.71,530,3.017,531,3.017,532,3.017,533,3.622,534,3.622,535,3.017,536,3.622]],["title/injectables/Web3Service.html",[78,1.049,391,1.488]],["body/injectables/Web3Service.html",[12,0.034,17,0.118,18,0.118,19,0.101,22,0.487,23,0.294,25,0.707,27,0.588,40,0.118,41,0.031,42,0.012,43,0.012,44,0.007,49,0.176,50,0.823,51,0.972,52,0.547,53,1.006,57,0.954,66,1.634,67,1.634,78,0.756,79,0.707,81,0.823,82,2.211,96,1.131,100,1.448,103,1.368,104,1.257,112,1.477,113,1.914,139,1.131,140,3.176,179,2.162,199,2.774,203,1.368,224,0.982,253,2.391,260,1.628,273,0.87,275,3.583,303,2.162,309,1.448,320,1.781,323,2.409,337,0.644,363,0.781,364,1.448,372,0.982,390,2.099,391,1.071,399,1.131,400,0.982,408,1.957,413,2.418,433,2.933,435,1.131,441,1.131,442,1.131,464,1.634,506,2.169,512,1.177,513,0.982,522,2.475,527,1.882,535,1.131,537,1.131,538,2.902,539,2.902,540,2.26,541,2.902,542,2.26,543,3.384,544,2.26,545,2.26,546,3.384,547,2.26,548,1.358,549,2.26,550,1.358,551,2.26,552,1.358,553,1.358,554,2.26,555,1.358,556,2.26,557,1.358,558,1.358,559,1.358,560,2.26,561,1.358,562,2.902,563,1.358,564,1.358,565,2.26,566,2.26,567,2.902,568,2.26,569,2.26,570,2.26,571,2.26,572,2.26,573,2.26,574,2.26,575,2.26,576,2.26,577,2.26,578,2.26,579,2.26,580,1.882,581,1.358,582,2.26,583,0.982,584,1.358,585,1.358,586,1.358,587,1.358,588,1.358,589,1.358,590,1.358,591,1.358,592,1.358,593,2.902,594,1.882,595,1.358,596,1.358,597,0.982,598,1.358,599,2.26,600,1.358,601,2.26,602,1.358,603,2.26,604,1.358,605,3.757,606,1.358,607,2.26,608,1.358,609,1.358,610,1.358,611,1.358,612,1.358,613,1.358,614,1.358,615,2.26,616,1.358,617,1.358,618,1.358,619,2.26,620,1.358,621,1.358,622,2.26,623,4.3,624,1.358,625,1.358,626,1.358,627,1.358,628,1.358,629,1.358,630,1.358,631,1.358,632,1.358,633,2.902,634,1.358,635,1.358,636,1.358,637,2.26,638,1.358,639,1.358,640,1.358,641,1.358,642,1.358,643,1.358,644,1.358,645,1.358,646,1.358,647,1.358,648,1.358,649,2.902,650,1.358,651,1.358,652,1.358,653,1.358,654,1.358,655,1.358,656,1.358,657,1.358,658,1.358,659,1.358,660,1.358,661,1.358,662,1.358,663,1.358,664,1.358,665,1.358,666,1.358,667,1.358,668,1.358,669,1.358,670,1.358,671,1.358,672,1.358,673,1.358,674,1.358,675,1.358,676,1.358,677,1.358,678,1.358,679,1.358,680,1.358,681,1.358,682,1.358,683,1.358,684,1.358,685,1.358,686,1.358,687,1.131,688,1.358,689,2.26,690,2.26,691,2.26,692,1.358,693,3.384,694,2.26,695,1.358,696,1.358,697,1.358]],["title/classes/Web3Transaction.html",[41,0.072,512,1.634]],["body/classes/Web3Transaction.html",[12,0.033,17,0.278,18,0.278,19,0.236,22,0.322,37,4.107,40,0.278,41,0.073,42,0.016,43,0.022,44,0.016,46,1.161,49,0.414,50,1.575,52,0.845,53,1.085,54,1.943,57,1.04,104,1.899,106,2.773,179,2.826,260,2.128,320,2.328,321,2.328,323,3.377,324,4.274,328,3.552,331,3.128,335,3.128,336,2.305,337,1.511,512,2.253,687,4.092,698,2.655,699,4.911,700,4.911,701,3.187,702,3.187,703,4.911,704,3.187,705,3.187,706,3.187,707,3.187,708,3.187,709,3.187,710,4.911]],["title/coverage.html",[711,3.096]],["body/coverage.html",[6,1.272,12,0.033,19,0.238,41,0.137,42,0.016,43,0.022,44,0.016,45,1.844,47,2.67,48,2.67,52,0.466,56,1.072,63,2.054,64,2.67,65,2.67,75,1.844,78,1.845,80,2.67,224,4.572,233,2.095,234,2.054,235,2.67,244,1.844,249,1.519,258,2.67,259,3.14,270,2.67,291,1.519,319,2.67,339,2.054,340,2.67,349,2.054,353,1.669,386,2.67,391,1.519,408,1.669,444,2.67,451,2.67,458,1.844,459,2.67,461,2.054,462,2.67,473,1.669,487,2.67,504,2.054,505,2.67,512,1.669,522,1.844,523,2.67,537,2.67,583,2.317,597,2.317,698,2.67,711,2.317,712,2.67,713,3.205,714,3.205,715,3.205,716,3.205,717,5.518,718,4.925,719,3.205,720,3.205,721,2.67,722,4.342,723,4.342,724,3.205,725,4.925,726,2.67,727,3.205,728,3.205,729,2.67,730,3.205,731,3.205,732,3.205]],["title/dependencies.html",[3,1.498,733,2.622]],["body/dependencies.html",[3,1.607,12,0.033,23,0.876,25,2.109,27,1.754,42,0.021,43,0.026,44,0.021,60,2.33,195,3.373,196,3.373,237,2.928,294,3.373,295,3.373,337,1.919,433,2.928,506,2.595,594,3.373,734,5.514,735,4.048,736,4.048,737,4.048,738,5.056,739,4.048,740,4.048,741,4.048,742,4.048,743,4.048,744,4.048,745,4.048,746,4.048,747,4.048,748,4.048,749,4.048,750,4.048,751,4.048,752,4.048,753,4.048,754,4.048,755,4.048,756,4.048,757,4.048]],["title/miscellaneous/functions.html",[758,1.68,759,3.144]],["body/miscellaneous/functions.html",[6,2.371,12,0.029,42,0.025,43,0.029,44,0.025,49,0.634,721,4.062,758,3.126,759,4.062,760,4.876]],["title/index.html",[49,0.341,418,2.184,761,2.622]],["body/index.html",[0,0.592,12,0.033,42,0.012,43,0.018,44,0.012,62,1.085,136,3.108,309,1.467,364,1.467,371,3.405,372,2.955,373,1.906,408,2.361,711,1.655,712,1.906,762,2.288,763,3.416,764,3.416,765,2.288,766,2.288,767,2.288,768,5.27,769,2.288,770,2.288,771,2.288,772,2.288,773,2.288,774,2.288,775,2.288,776,5.27,777,4.087,778,6.208,779,2.288,780,3.416,781,4.532,782,2.288,783,4.532,784,2.288,785,6.163,786,2.288,787,2.288,788,2.288,789,2.288,790,3.416,791,2.288,792,2.288,793,2.288,794,2.288,795,4.849,796,2.288,797,2.288,798,2.288,799,5.417,800,2.288,801,2.288,802,5.27,803,2.288,804,2.288,805,2.288,806,2.288,807,2.288,808,3.416,809,4.087,810,3.416,811,3.416,812,5.27,813,4.532,814,4.087,815,2.288,816,3.416,817,5.417,818,5.417,819,3.416,820,3.416,821,3.416,822,3.416,823,3.416,824,3.416,825,3.416,826,3.416,827,5.27,828,2.288,829,2.288,830,2.288,831,2.288,832,2.288,833,2.288,834,3.416,835,2.288,836,2.288,837,2.288,838,2.288,839,2.288,840,2.288,841,2.288,842,2.288,843,2.288,844,2.288,845,2.288,846,4.087,847,2.288,848,3.416,849,2.288,850,2.288,851,2.288]],["title/modules.html",[2,1.699]],["body/modules.html",[1,2.852,2,1.766,11,2.56,12,0.028,13,2.56,42,0.023,43,0.028,44,0.023,71,2.852,264,2.56,380,2.56,852,6.202,853,6.202,854,6.202,855,6.202]],["title/overview.html",[856,3.566]],["body/overview.html",[0,0.88,1,3.71,2,1.349,3,1.349,4,1.612,5,1.612,6,1.349,7,1.612,8,1.612,9,2.833,10,2.833,11,3.494,12,0.032,13,3.239,14,2.142,15,1.612,16,1.612,39,1.238,42,0.017,43,0.023,44,0.017,46,1.238,71,3.608,72,2.833,73,2.833,74,2.833,75,3.398,79,1.771,249,2.8,264,3.33,265,2.833,266,2.833,267,2.833,353,2.643,377,2.833,378,2.833,379,2.833,380,3.33,391,2.8,473,2.643,481,2.833,482,2.833,530,2.833,531,2.833,532,2.833,729,2.833,856,2.833,857,3.4,858,3.4,859,3.4]],["title/miscellaneous/variables.html",[758,1.68,860,3.144]],["body/miscellaneous/variables.html",[12,0.034,42,0.018,43,0.024,44,0.018,49,0.458,51,1.563,52,0.89,53,1.12,61,2.259,179,2.662,260,2.004,320,2.193,580,2.935,583,2.548,597,3.345,726,2.935,758,2.259,860,2.935,861,3.523,862,3.523,863,3.523,864,3.523,865,3.523,866,5.845,867,4.626,868,5.165,869,5.845,870,3.523,871,3.523,872,3.523,873,3.523,874,3.523,875,3.523,876,3.523]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"classes/CryptographyKeyPairDto.html":{},"modules/CryptographyModule.html":{},"injectables/CryptographyService.html":{},"controllers/IpfsController.html":{},"classes/IpfsMessageDto.html":{},"modules/IpfsModule.html":{},"injectables/IpfsService.html":{},"classes/Message.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/SendMessageDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/Web3Controller.html":{},"classes/Web3Factory.html":{},"modules/Web3Module.html":{},"injectables/Web3Service.html":{},"classes/Web3Transaction.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":224,"title":{},"body":{"injectables/CryptographyService.html":{},"injectables/Web3Service.html":{},"coverage.html":{}}}],["0.0.9",{"_index":735,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":747,"title":{},"body":{"dependencies.html":{}}}],["0.2.22",{"_index":756,"title":{},"body":{"dependencies.html":{}}}],["0.4.22",{"_index":579,"title":{},"body":{"injectables/Web3Service.html":{}}}],["0/1",{"_index":722,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":725,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":717,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":718,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":723,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":728,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":724,"title":{},"body":{"coverage.html":{}}}],["0x",{"_index":683,"title":{},"body":{"injectables/Web3Service.html":{}}}],["0x5b821362887db76980399bf4206ba747bef7ad95",{"_index":576,"title":{},"body":{"injectables/Web3Service.html":{}}}],["1",{"_index":371,"title":{},"body":{"controllers/MessagesController.html":{},"index.html":{}}}],["1.2.4",{"_index":757,"title":{},"body":{"dependencies.html":{}}}],["1.22.0",{"_index":787,"title":{},"body":{"index.html":{}}}],["1/16",{"_index":730,"title":{},"body":{"coverage.html":{}}}],["12/13",{"_index":716,"title":{},"body":{"coverage.html":{}}}],["19.03.5",{"_index":782,"title":{},"body":{"index.html":{}}}],["2",{"_index":372,"title":{},"body":{"controllers/MessagesController.html":{},"injectables/Web3Service.html":{},"index.html":{}}}],["2.1.2",{"_index":741,"title":{},"body":{"dependencies.html":{}}}],["2.4.6",{"_index":752,"title":{},"body":{"dependencies.html":{}}}],["2/5",{"_index":720,"title":{},"body":{"coverage.html":{}}}],["2020/01/15",{"_index":791,"title":{},"body":{"index.html":{}}}],["256",{"_index":174,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["3",{"_index":373,"title":{},"body":{"controllers/MessagesController.html":{},"index.html":{}}}],["3.0.0",{"_index":749,"title":{},"body":{"dependencies.html":{}}}],["32",{"_index":124,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["4",{"_index":857,"title":{},"body":{"overview.html":{}}}],["4.1.2",{"_index":755,"title":{},"body":{"dependencies.html":{}}}],["4.1.7",{"_index":739,"title":{},"body":{"dependencies.html":{}}}],["40",{"_index":719,"title":{},"body":{"coverage.html":{}}}],["40.2.1",{"_index":742,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":858,"title":{},"body":{"overview.html":{}}}],["500",{"_index":454,"title":{},"body":{"classes/User.html":{}}}],["6",{"_index":729,"title":{},"body":{"coverage.html":{},"overview.html":{}}}],["6.2.0",{"_index":740,"title":{},"body":{"dependencies.html":{}}}],["6.5.3",{"_index":751,"title":{},"body":{"dependencies.html":{}}}],["6.7.2",{"_index":734,"title":{},"body":{"dependencies.html":{}}}],["633a0ea838",{"_index":784,"title":{},"body":{"index.html":{}}}],["7.17.1",{"_index":744,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":144,"title":{},"body":{"injectables/CryptographyService.html":{},"injectables/IpfsService.html":{}}}],["9",{"_index":859,"title":{},"body":{"overview.html":{}}}],["92",{"_index":715,"title":{},"body":{"coverage.html":{}}}],["abi",{"_index":864,"title":{},"body":{"miscellaneous/variables.html":{}}}],["accessible",{"_index":809,"title":{},"body":{"index.html":{}}}],["account",{"_index":558,"title":{},"body":{"injectables/Web3Service.html":{}}}],["add",{"_index":288,"title":{},"body":{"injectables/IpfsService.html":{}}}],["added",{"_index":292,"title":{},"body":{"injectables/IpfsService.html":{}}}],["address",{"_index":538,"title":{},"body":{"injectables/Web3Service.html":{}}}],["addressed",{"_index":280,"title":{},"body":{"injectables/IpfsService.html":{}}}],["alice",{"_index":419,"title":{},"body":{"injectables/MessagesService.html":{}}}],["already",{"_index":422,"title":{},"body":{"injectables/MessagesService.html":{}}}],["anonymous",{"_index":865,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apiproperty",{"_index":59,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/IpfsMessageDto.html":{},"classes/SendMessageDto.html":{},"classes/UserDto.html":{}}}],["apiproperty({description",{"_index":55,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/IpfsMessageDto.html":{},"classes/SendMessageDto.html":{},"classes/UserDto.html":{}}}],["app",{"_index":774,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["async",{"_index":82,"title":{},"body":{"injectables/CryptographyService.html":{},"controllers/IpfsController.html":{},"injectables/IpfsService.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/Web3Controller.html":{},"injectables/Web3Service.html":{}}}],["await",{"_index":303,"title":{},"body":{"injectables/IpfsService.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"injectables/UsersService.html":{},"injectables/Web3Service.html":{}}}],["badly",{"_index":306,"title":{},"body":{"injectables/IpfsService.html":{}}}],["best",{"_index":571,"title":{},"body":{"injectables/Web3Service.html":{}}}],["bit",{"_index":147,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["bob",{"_index":370,"title":{},"body":{"controllers/MessagesController.html":{}}}],["body",{"_index":246,"title":{},"body":{"controllers/IpfsController.html":{},"controllers/MessagesController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":191,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/AppModule.html":{},"modules/CryptographyModule.html":{},"modules/IpfsModule.html":{},"modules/MessagesModule.html":{},"modules/UsersModule.html":{},"modules/Web3Module.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["break",{"_index":376,"title":{},"body":{"controllers/MessagesController.html":{}}}],["brings",{"_index":813,"title":{},"body":{"index.html":{}}}],["broadcastnotification",{"_index":542,"title":{},"body":{"injectables/Web3Service.html":{}}}],["broadcastnotification(channelid",{"_index":551,"title":{},"body":{"injectables/Web3Service.html":{}}}],["browse",{"_index":855,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":852,"title":{},"body":{"modules.html":{}}}],["buffer",{"_index":68,"title":{},"body":{"classes/CryptographyKeyPairDto.html":{},"injectables/CryptographyService.html":{}}}],["buffer.alloc(32",{"_index":231,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["buffer.from(context",{"_index":220,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["buffer.from(stringdata",{"_index":315,"title":{},"body":{"injectables/IpfsService.html":{}}}],["buffer.from(this.privatekey",{"_index":653,"title":{},"body":{"injectables/Web3Service.html":{}}}],["buffereddata",{"_index":314,"title":{},"body":{"injectables/IpfsService.html":{}}}],["bufferedprivatekey",{"_index":652,"title":{},"body":{"injectables/Web3Service.html":{}}}],["buffers",{"_index":165,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["buffertohex",{"_index":595,"title":{},"body":{"injectables/Web3Service.html":{}}}],["buffertohex(tx.getsenderaddress",{"_index":670,"title":{},"body":{"injectables/Web3Service.html":{}}}],["build",{"_index":783,"title":{},"body":{"index.html":{}}}],["byte",{"_index":125,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["c25519",{"_index":158,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["calculate",{"_index":420,"title":{},"body":{"injectables/MessagesService.html":{}}}],["calculated",{"_index":448,"title":{},"body":{"classes/SendMessageDto.html":{}}}],["chacha20",{"_index":153,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["chain",{"_index":539,"title":{},"body":{"injectables/Web3Service.html":{}}}],["channel",{"_index":368,"title":{},"body":{"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"classes/SendMessageDto.html":{}}}],["channelid",{"_index":320,"title":{},"body":{"classes/Message.html":{},"injectables/MessagesService.html":{},"classes/SendMessageDto.html":{},"controllers/Web3Controller.html":{},"injectables/Web3Service.html":{},"classes/Web3Transaction.html":{},"miscellaneous/variables.html":{}}}],["channelid='${channelid",{"_index":634,"title":{},"body":{"injectables/Web3Service.html":{}}}],["check",{"_index":309,"title":{},"body":{"injectables/IpfsService.html":{},"injectables/MessagesService.html":{},"injectables/Web3Service.html":{},"index.html":{}}}],["class",{"_index":41,"title":{"classes/CreateUserDto.html":{},"classes/CryptographyKeyPairDto.html":{},"classes/IpfsMessageDto.html":{},"classes/Message.html":{},"classes/SendMessageDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"classes/Web3Factory.html":{},"classes/Web3Transaction.html":{}},"body":{"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"classes/CryptographyKeyPairDto.html":{},"modules/CryptographyModule.html":{},"injectables/CryptographyService.html":{},"controllers/IpfsController.html":{},"classes/IpfsMessageDto.html":{},"modules/IpfsModule.html":{},"injectables/IpfsService.html":{},"classes/Message.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/SendMessageDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/Web3Controller.html":{},"classes/Web3Factory.html":{},"modules/Web3Module.html":{},"injectables/Web3Service.html":{},"classes/Web3Transaction.html":{},"coverage.html":{}}}],["classes",{"_index":46,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CryptographyKeyPairDto.html":{},"classes/IpfsMessageDto.html":{},"classes/Message.html":{},"classes/SendMessageDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"classes/Web3Factory.html":{},"classes/Web3Transaction.html":{},"overview.html":{}}}],["client",{"_index":295,"title":{},"body":{"injectables/IpfsService.html":{},"dependencies.html":{}}}],["cluster_appmodule",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_cryptographymodule",{"_index":72,"title":{},"body":{"modules/CryptographyModule.html":{},"overview.html":{}}}],["cluster_cryptographymodule_exports",{"_index":73,"title":{},"body":{"modules/CryptographyModule.html":{},"overview.html":{}}}],["cluster_cryptographymodule_providers",{"_index":74,"title":{},"body":{"modules/CryptographyModule.html":{},"overview.html":{}}}],["cluster_ipfsmodule",{"_index":265,"title":{},"body":{"modules/IpfsModule.html":{},"overview.html":{}}}],["cluster_ipfsmodule_exports",{"_index":266,"title":{},"body":{"modules/IpfsModule.html":{},"overview.html":{}}}],["cluster_ipfsmodule_providers",{"_index":267,"title":{},"body":{"modules/IpfsModule.html":{},"overview.html":{}}}],["cluster_messagesmodule",{"_index":377,"title":{},"body":{"modules/MessagesModule.html":{},"overview.html":{}}}],["cluster_messagesmodule_imports",{"_index":378,"title":{},"body":{"modules/MessagesModule.html":{},"overview.html":{}}}],["cluster_messagesmodule_providers",{"_index":379,"title":{},"body":{"modules/MessagesModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":481,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":482,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_web3module",{"_index":530,"title":{},"body":{"modules/Web3Module.html":{},"overview.html":{}}}],["cluster_web3module_exports",{"_index":531,"title":{},"body":{"modules/Web3Module.html":{},"overview.html":{}}}],["cluster_web3module_providers",{"_index":532,"title":{},"body":{"modules/Web3Module.html":{},"overview.html":{}}}],["code",{"_index":822,"title":{},"body":{"index.html":{}}}],["column",{"_index":324,"title":{},"body":{"classes/Message.html":{},"classes/User.html":{},"classes/Web3Transaction.html":{}}}],["column({length",{"_index":453,"title":{},"body":{"classes/User.html":{}}}],["column({nullable",{"_index":700,"title":{},"body":{"classes/Web3Transaction.html":{}}}],["communication",{"_index":765,"title":{},"body":{"index.html":{}}}],["compose",{"_index":785,"title":{},"body":{"index.html":{}}}],["configmodule",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/IpfsModule.html":{},"modules/Web3Module.html":{}}}],["configmodule.forroot",{"_index":35,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":275,"title":{},"body":{"injectables/IpfsService.html":{},"injectables/Web3Service.html":{}}}],["confirmed",{"_index":641,"title":{},"body":{"injectables/Web3Service.html":{}}}],["const",{"_index":199,"title":{},"body":{"injectables/CryptographyService.html":{},"injectables/IpfsService.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"injectables/UsersService.html":{},"injectables/Web3Service.html":{}}}],["constant",{"_index":871,"title":{},"body":{"miscellaneous/variables.html":{}}}],["constructor",{"_index":273,"title":{},"body":{"injectables/IpfsService.html":{},"injectables/MessagesService.html":{},"injectables/UsersService.html":{},"injectables/Web3Service.html":{}}}],["constructor(configservice",{"_index":274,"title":{},"body":{"injectables/IpfsService.html":{}}}],["constructor(messagerepository",{"_index":389,"title":{},"body":{"injectables/MessagesService.html":{}}}],["constructor(private",{"_index":252,"title":{},"body":{"controllers/IpfsController.html":{},"injectables/IpfsService.html":{},"controllers/MessagesController.html":{},"controllers/UsersController.html":{},"controllers/Web3Controller.html":{}}}],["constructor(transactionsrepository",{"_index":548,"title":{},"body":{"injectables/Web3Service.html":{}}}],["constructor(userrepository",{"_index":489,"title":{},"body":{"injectables/UsersService.html":{}}}],["contain",{"_index":427,"title":{},"body":{"injectables/MessagesService.html":{}}}],["containers",{"_index":821,"title":{},"body":{"index.html":{}}}],["containing",{"_index":114,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["content",{"_index":260,"title":{},"body":{"classes/IpfsMessageDto.html":{},"classes/Message.html":{},"injectables/MessagesService.html":{},"classes/SendMessageDto.html":{},"controllers/Web3Controller.html":{},"injectables/Web3Service.html":{},"classes/Web3Transaction.html":{},"miscellaneous/variables.html":{}}}],["content='${content",{"_index":635,"title":{},"body":{"injectables/Web3Service.html":{}}}],["contents",{"_index":771,"title":{},"body":{"index.html":{}}}],["context",{"_index":116,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["contract",{"_index":567,"title":{},"body":{"injectables/Web3Service.html":{}}}],["contract.methods",{"_index":656,"title":{},"body":{"injectables/Web3Service.html":{}}}],["contractaddress",{"_index":540,"title":{},"body":{"injectables/Web3Service.html":{}}}],["controller",{"_index":233,"title":{"controllers/IpfsController.html":{},"controllers/MessagesController.html":{},"controllers/UsersController.html":{},"controllers/Web3Controller.html":{}},"body":{"controllers/IpfsController.html":{},"controllers/MessagesController.html":{},"controllers/UsersController.html":{},"controllers/Web3Controller.html":{},"coverage.html":{}}}],["controller('ipfs",{"_index":251,"title":{},"body":{"controllers/IpfsController.html":{}}}],["controller('messages",{"_index":355,"title":{},"body":{"controllers/MessagesController.html":{}}}],["controller('users",{"_index":475,"title":{},"body":{"controllers/UsersController.html":{}}}],["controller('web3",{"_index":515,"title":{},"body":{"controllers/Web3Controller.html":{}}}],["controllers",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"controllers/IpfsController.html":{},"modules/IpfsModule.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"controllers/Web3Controller.html":{},"modules/Web3Module.html":{},"overview.html":{}}}],["core/blob/master/spec/files.md#add",{"_index":290,"title":{},"body":{"injectables/IpfsService.html":{}}}],["core/blob/master/spec/files.md#get",{"_index":284,"title":{},"body":{"injectables/IpfsService.html":{}}}],["correct",{"_index":789,"title":{},"body":{"index.html":{}}}],["counter",{"_index":149,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["coverage",{"_index":711,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":464,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/Web3Service.html":{}}}],["create(@body",{"_index":477,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(user",{"_index":465,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createdatecolumn",{"_index":703,"title":{},"body":{"classes/Web3Transaction.html":{}}}],["createddate",{"_index":699,"title":{},"body":{"classes/Web3Transaction.html":{}}}],["createuserdto",{"_index":45,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["cryptography.service",{"_index":77,"title":{},"body":{"modules/CryptographyModule.html":{}}}],["cryptographykeypairdto",{"_index":63,"title":{"classes/CryptographyKeyPairDto.html":{}},"body":{"classes/CryptographyKeyPairDto.html":{},"injectables/CryptographyService.html":{},"coverage.html":{}}}],["cryptographymodule",{"_index":71,"title":{"modules/CryptographyModule.html":{}},"body":{"modules/CryptographyModule.html":{},"modules.html":{},"overview.html":{}}}],["cryptographyservice",{"_index":75,"title":{"injectables/CryptographyService.html":{}},"body":{"modules/CryptographyModule.html":{},"injectables/CryptographyService.html":{},"coverage.html":{},"overview.html":{}}}],["data",{"_index":100,"title":{},"body":{"injectables/CryptographyService.html":{},"controllers/IpfsController.html":{},"injectables/IpfsService.html":{},"injectables/Web3Service.html":{}}}],["databse",{"_index":798,"title":{},"body":{"index.html":{}}}],["date",{"_index":331,"title":{},"body":{"classes/Message.html":{},"injectables/MessagesService.html":{},"classes/Web3Transaction.html":{}}}],["db",{"_index":815,"title":{},"body":{"index.html":{}}}],["db1",{"_index":828,"title":{},"body":{"index.html":{}}}],["db2",{"_index":831,"title":{},"body":{"index.html":{}}}],["deal",{"_index":573,"title":{},"body":{"injectables/Web3Service.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"modules/CryptographyModule.html":{},"modules/IpfsModule.html":{},"modules/MessagesModule.html":{},"modules/UsersModule.html":{},"modules/Web3Module.html":{},"overview.html":{}}}],["decoded",{"_index":627,"title":{},"body":{"injectables/Web3Service.html":{}}}],["decorators",{"_index":54,"title":{},"body":{"classes/CreateUserDto.html":{},"controllers/IpfsController.html":{},"classes/IpfsMessageDto.html":{},"classes/Message.html":{},"controllers/MessagesController.html":{},"classes/SendMessageDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"controllers/Web3Controller.html":{},"classes/Web3Transaction.html":{}}}],["decrypt",{"_index":83,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["decrypt(data",{"_index":95,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["decrypted",{"_index":105,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["decrypteddata",{"_index":228,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["decrypts",{"_index":99,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["default",{"_index":61,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SendMessageDto.html":{},"classes/UserDto.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":57,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CryptographyKeyPairDto.html":{},"injectables/CryptographyService.html":{},"controllers/IpfsController.html":{},"classes/IpfsMessageDto.html":{},"injectables/IpfsService.html":{},"classes/Message.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"classes/SendMessageDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/Web3Controller.html":{},"classes/Web3Factory.html":{},"injectables/Web3Service.html":{},"classes/Web3Transaction.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/CryptographyModule.html":{},"modules/IpfsModule.html":{},"modules/MessagesModule.html":{},"modules/UsersModule.html":{},"modules/Web3Module.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":566,"title":{},"body":{"injectables/Web3Service.html":{}}}],["deployed",{"_index":574,"title":{},"body":{"injectables/Web3Service.html":{}}}],["derivation",{"_index":120,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["derived",{"_index":123,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["derives",{"_index":118,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["derivesymmetrickeyfromsecret",{"_index":84,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["derivesymmetrickeyfromsecret(secret",{"_index":115,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["describing",{"_index":121,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["description",{"_index":62,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/CryptographyService.html":{},"classes/IpfsMessageDto.html":{},"injectables/IpfsService.html":{},"classes/SendMessageDto.html":{},"classes/UserDto.html":{},"index.html":{}}}],["detached",{"_index":188,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["detailed",{"_index":766,"title":{},"body":{"index.html":{}}}],["development",{"_index":801,"title":{},"body":{"index.html":{}}}],["different",{"_index":836,"title":{},"body":{"index.html":{}}}],["diffie",{"_index":160,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["dig",{"_index":671,"title":{},"body":{"injectables/Web3Service.html":{}}}],["digital",{"_index":178,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["docker",{"_index":778,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":712,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["down",{"_index":825,"title":{},"body":{"index.html":{}}}],["dto",{"_index":164,"title":{},"body":{"injectables/CryptographyService.html":{},"controllers/Web3Controller.html":{}}}],["dto/create",{"_index":470,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/cryptography",{"_index":197,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["dto/ipfs",{"_index":247,"title":{},"body":{"controllers/IpfsController.html":{},"injectables/IpfsService.html":{}}}],["dto/send",{"_index":351,"title":{},"body":{"controllers/MessagesController.html":{}}}],["dto/user.dto",{"_index":472,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dual",{"_index":827,"title":{},"body":{"index.html":{}}}],["e2e",{"_index":849,"title":{},"body":{"index.html":{}}}],["ecdh",{"_index":133,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["ed25519",{"_index":183,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["ekho",{"_index":763,"title":{},"body":{"index.html":{}}}],["ekho1",{"_index":829,"title":{},"body":{"index.html":{}}}],["ekho2",{"_index":832,"title":{},"body":{"index.html":{}}}],["emit",{"_index":586,"title":{},"body":{"injectables/Web3Service.html":{}}}],["encodeabi",{"_index":660,"title":{},"body":{"injectables/Web3Service.html":{}}}],["encrypt",{"_index":85,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["encrypt(data",{"_index":126,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["encrypted",{"_index":129,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["encrypteddata",{"_index":225,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["encryption/decryption",{"_index":154,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["encrypts",{"_index":128,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["endpoint",{"_index":808,"title":{},"body":{"index.html":{}}}],["endpoints",{"_index":838,"title":{},"body":{"index.html":{}}}],["entity",{"_index":335,"title":{},"body":{"classes/Message.html":{},"classes/User.html":{},"classes/Web3Transaction.html":{}}}],["env",{"_index":770,"title":{},"body":{"index.html":{}}}],["err",{"_index":693,"title":{},"body":{"injectables/Web3Service.html":{}}}],["error",{"_index":619,"title":{},"body":{"injectables/Web3Service.html":{}}}],["error('invalid",{"_index":678,"title":{},"body":{"injectables/Web3Service.html":{}}}],["ethereumjs",{"_index":594,"title":{},"body":{"injectables/Web3Service.html":{},"dependencies.html":{}}}],["event",{"_index":580,"title":{},"body":{"injectables/Web3Service.html":{},"miscellaneous/variables.html":{}}}],["example",{"_index":369,"title":{},"body":{"controllers/MessagesController.html":{}}}],["exchanges",{"_index":162,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["executed",{"_index":674,"title":{},"body":{"injectables/Web3Service.html":{}}}],["existing",{"_index":820,"title":{},"body":{"index.html":{}}}],["export",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"classes/CryptographyKeyPairDto.html":{},"modules/CryptographyModule.html":{},"injectables/CryptographyService.html":{},"controllers/IpfsController.html":{},"classes/IpfsMessageDto.html":{},"modules/IpfsModule.html":{},"injectables/IpfsService.html":{},"classes/Message.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/SendMessageDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/Web3Controller.html":{},"classes/Web3Factory.html":{},"modules/Web3Module.html":{},"injectables/Web3Service.html":{},"classes/Web3Transaction.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"modules/CryptographyModule.html":{},"modules/IpfsModule.html":{},"modules/MessagesModule.html":{},"modules/UsersModule.html":{},"modules/Web3Module.html":{},"overview.html":{}}}],["exposed",{"_index":111,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["exposing",{"_index":446,"title":{},"body":{"classes/SendMessageDto.html":{}}}],["express",{"_index":738,"title":{},"body":{"dependencies.html":{}}}],["extract",{"_index":431,"title":{},"body":{"injectables/MessagesService.html":{}}}],["f",{"_index":817,"title":{},"body":{"index.html":{}}}],["f46880fe",{"_index":788,"title":{},"body":{"index.html":{}}}],["fails",{"_index":672,"title":{},"body":{"injectables/Web3Service.html":{}}}],["false",{"_index":866,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fetch",{"_index":279,"title":{},"body":{"injectables/IpfsService.html":{}}}],["file",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"classes/CryptographyKeyPairDto.html":{},"modules/CryptographyModule.html":{},"injectables/CryptographyService.html":{},"controllers/IpfsController.html":{},"classes/IpfsMessageDto.html":{},"modules/IpfsModule.html":{},"injectables/IpfsService.html":{},"classes/Message.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/SendMessageDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/Web3Controller.html":{},"classes/Web3Factory.html":{},"modules/Web3Module.html":{},"injectables/Web3Service.html":{},"classes/Web3Transaction.html":{},"coverage.html":{}}}],["files",{"_index":289,"title":{},"body":{"injectables/IpfsService.html":{}}}],["findall",{"_index":387,"title":{},"body":{"injectables/MessagesService.html":{}}}],["findbyname",{"_index":488,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyname(name",{"_index":493,"title":{},"body":{"injectables/UsersService.html":{}}}],["findforuser",{"_index":388,"title":{},"body":{"injectables/MessagesService.html":{}}}],["findforuser(user",{"_index":395,"title":{},"body":{"injectables/MessagesService.html":{}}}],["fromblock",{"_index":616,"title":{},"body":{"injectables/Web3Service.html":{}}}],["function",{"_index":583,"title":{},"body":{"injectables/Web3Service.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["functions",{"_index":759,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["future",{"_index":450,"title":{},"body":{"classes/SendMessageDto.html":{}}}],["gaslimit",{"_index":663,"title":{},"body":{"injectables/Web3Service.html":{}}}],["gasprice",{"_index":665,"title":{},"body":{"injectables/Web3Service.html":{}}}],["generate",{"_index":156,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["generateecdhsharedsecret",{"_index":86,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["generateecdhsharedsecret(publickey",{"_index":130,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["generatenoncebuffer",{"_index":87,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["generatenoncebuffer(nonce",{"_index":142,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["generateoneusekeypair",{"_index":88,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["generaterandombytes",{"_index":89,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["generaterandomnumber",{"_index":90,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["generates",{"_index":132,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["generatesha256hash",{"_index":91,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["generatesha256hash(data",{"_index":168,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["generatesignature",{"_index":92,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["generatesignature(data",{"_index":175,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["generatesigningkeypair",{"_index":93,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["generation",{"_index":122,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["get('/:user",{"_index":346,"title":{},"body":{"controllers/MessagesController.html":{}}}],["get(':path",{"_index":240,"title":{},"body":{"controllers/IpfsController.html":{}}}],["get(@param('path",{"_index":254,"title":{},"body":{"controllers/IpfsController.html":{}}}],["get(@query('name",{"_index":479,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(name",{"_index":467,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(path",{"_index":239,"title":{},"body":{"controllers/IpfsController.html":{}}}],["getall",{"_index":543,"title":{},"body":{"injectables/Web3Service.html":{}}}],["getallmessages",{"_index":341,"title":{},"body":{"controllers/MessagesController.html":{}}}],["getmessages",{"_index":342,"title":{},"body":{"controllers/MessagesController.html":{}}}],["getmessages(@param('user",{"_index":362,"title":{},"body":{"controllers/MessagesController.html":{}}}],["getmessages(user",{"_index":345,"title":{},"body":{"controllers/MessagesController.html":{}}}],["gets",{"_index":673,"title":{},"body":{"injectables/Web3Service.html":{}}}],["getting",{"_index":418,"title":{"index.html":{}},"body":{"injectables/MessagesService.html":{}}}],["gettransactionbychannelid",{"_index":544,"title":{},"body":{"injectables/Web3Service.html":{}}}],["gettransactionbychannelid(channelid",{"_index":554,"title":{},"body":{"injectables/Web3Service.html":{}}}],["gettransactioncount",{"_index":545,"title":{},"body":{"injectables/Web3Service.html":{}}}],["gettransactioncount(account",{"_index":556,"title":{},"body":{"injectables/Web3Service.html":{}}}],["getweb3",{"_index":524,"title":{},"body":{"classes/Web3Factory.html":{}}}],["getweb3(rpcurl",{"_index":525,"title":{},"body":{"classes/Web3Factory.html":{}}}],["given",{"_index":424,"title":{},"body":{"injectables/MessagesService.html":{}}}],["gurus",{"_index":569,"title":{},"body":{"injectables/Web3Service.html":{}}}],["gwei",{"_index":667,"title":{},"body":{"injectables/Web3Service.html":{}}}],["hardfork",{"_index":541,"title":{},"body":{"injectables/Web3Service.html":{}}}],["hash",{"_index":171,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["hashed",{"_index":172,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["hellman",{"_index":161,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["hex",{"_index":654,"title":{},"body":{"injectables/Web3Service.html":{}}}],["host",{"_index":296,"title":{},"body":{"injectables/IpfsService.html":{}}}],["http",{"_index":294,"title":{},"body":{"injectables/IpfsService.html":{},"dependencies.html":{}}}],["http://localhost:3000/api",{"_index":810,"title":{},"body":{"index.html":{}}}],["http://localhost:3100/api",{"_index":839,"title":{},"body":{"index.html":{}}}],["http://localhost:3200/api",{"_index":840,"title":{},"body":{"index.html":{}}}],["https",{"_index":301,"title":{},"body":{"injectables/IpfsService.html":{}}}],["https://github.com/ipfs/interface",{"_index":282,"title":{},"body":{"injectables/IpfsService.html":{}}}],["huge",{"_index":307,"title":{},"body":{"injectables/IpfsService.html":{}}}],["id",{"_index":321,"title":{},"body":{"classes/Message.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"classes/SendMessageDto.html":{},"classes/User.html":{},"controllers/Web3Controller.html":{},"classes/Web3Transaction.html":{}}}],["id/:content/:signature",{"_index":510,"title":{},"body":{"controllers/Web3Controller.html":{}}}],["identifier",{"_index":713,"title":{},"body":{"coverage.html":{}}}],["images",{"_index":824,"title":{},"body":{"index.html":{}}}],["import",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"modules/CryptographyModule.html":{},"injectables/CryptographyService.html":{},"controllers/IpfsController.html":{},"classes/IpfsMessageDto.html":{},"modules/IpfsModule.html":{},"injectables/IpfsService.html":{},"classes/Message.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/SendMessageDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/Web3Controller.html":{},"classes/Web3Factory.html":{},"modules/Web3Module.html":{},"injectables/Web3Service.html":{},"classes/Web3Transaction.html":{}}}],["imports",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"modules/IpfsModule.html":{},"modules/MessagesModule.html":{},"modules/UsersModule.html":{},"modules/Web3Module.html":{}}}],["index",{"_index":49,"title":{"index.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/CryptographyKeyPairDto.html":{},"injectables/CryptographyService.html":{},"controllers/IpfsController.html":{},"classes/IpfsMessageDto.html":{},"injectables/IpfsService.html":{},"classes/Message.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"classes/SendMessageDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/Web3Controller.html":{},"classes/Web3Factory.html":{},"injectables/Web3Service.html":{},"classes/Web3Transaction.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indexed",{"_index":868,"title":{},"body":{"miscellaneous/variables.html":{}}}],["info",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"classes/CryptographyKeyPairDto.html":{},"modules/CryptographyModule.html":{},"injectables/CryptographyService.html":{},"controllers/IpfsController.html":{},"classes/IpfsMessageDto.html":{},"modules/IpfsModule.html":{},"injectables/IpfsService.html":{},"classes/Message.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/SendMessageDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/Web3Controller.html":{},"classes/Web3Factory.html":{},"modules/Web3Module.html":{},"injectables/Web3Service.html":{},"classes/Web3Transaction.html":{}}}],["injectable",{"_index":78,"title":{"injectables/CryptographyService.html":{},"injectables/IpfsService.html":{},"injectables/MessagesService.html":{},"injectables/UsersService.html":{},"injectables/Web3Service.html":{}},"body":{"injectables/CryptographyService.html":{},"injectables/IpfsService.html":{},"injectables/MessagesService.html":{},"injectables/UsersService.html":{},"injectables/Web3Service.html":{},"coverage.html":{}}}],["injectables",{"_index":79,"title":{},"body":{"injectables/CryptographyService.html":{},"injectables/IpfsService.html":{},"injectables/MessagesService.html":{},"injectables/UsersService.html":{},"injectables/Web3Service.html":{},"overview.html":{}}}],["injectrepository",{"_index":400,"title":{},"body":{"injectables/MessagesService.html":{},"injectables/UsersService.html":{},"injectables/Web3Service.html":{}}}],["injectrepository(message",{"_index":403,"title":{},"body":{"injectables/MessagesService.html":{}}}],["injectrepository(user",{"_index":495,"title":{},"body":{"injectables/UsersService.html":{}}}],["input",{"_index":119,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["inputs",{"_index":867,"title":{},"body":{"miscellaneous/variables.html":{}}}],["installation",{"_index":767,"title":{},"body":{"index.html":{}}}],["installconfiguration",{"_index":769,"title":{},"body":{"index.html":{}}}],["instance",{"_index":816,"title":{},"body":{"index.html":{}}}],["instances",{"_index":844,"title":{},"body":{"index.html":{}}}],["integer",{"_index":148,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["internally",{"_index":449,"title":{},"body":{"classes/SendMessageDto.html":{}}}],["internaltype",{"_index":869,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ipfs",{"_index":237,"title":{},"body":{"controllers/IpfsController.html":{},"injectables/IpfsService.html":{},"dependencies.html":{}}}],["ipfs.controller",{"_index":269,"title":{},"body":{"modules/IpfsModule.html":{}}}],["ipfs.service",{"_index":250,"title":{},"body":{"controllers/IpfsController.html":{},"modules/IpfsModule.html":{}}}],["ipfs/ipfs.configuration",{"_index":29,"title":{},"body":{"modules/AppModule.html":{}}}],["ipfs/ipfs.module",{"_index":382,"title":{},"body":{"modules/MessagesModule.html":{}}}],["ipfs/ipfs.service",{"_index":401,"title":{},"body":{"injectables/MessagesService.html":{}}}],["ipfs_host=ipfs.infura.io",{"_index":772,"title":{},"body":{"index.html":{}}}],["ipfs_port=5001running",{"_index":773,"title":{},"body":{"index.html":{}}}],["ipfsclient",{"_index":293,"title":{},"body":{"injectables/IpfsService.html":{}}}],["ipfsconfiguration",{"_index":28,"title":{},"body":{"modules/AppModule.html":{}}}],["ipfscontroller",{"_index":234,"title":{"controllers/IpfsController.html":{}},"body":{"controllers/IpfsController.html":{},"modules/IpfsModule.html":{},"coverage.html":{}}}],["ipfsmessagedto",{"_index":244,"title":{"classes/IpfsMessageDto.html":{}},"body":{"controllers/IpfsController.html":{},"classes/IpfsMessageDto.html":{},"injectables/IpfsService.html":{},"coverage.html":{}}}],["ipfsmodule",{"_index":264,"title":{"modules/IpfsModule.html":{}},"body":{"modules/IpfsModule.html":{},"modules/MessagesModule.html":{},"modules.html":{},"overview.html":{}}}],["ipfspath",{"_index":285,"title":{},"body":{"injectables/IpfsService.html":{},"classes/Message.html":{},"injectables/MessagesService.html":{}}}],["ipfsservice",{"_index":249,"title":{"injectables/IpfsService.html":{}},"body":{"controllers/IpfsController.html":{},"modules/IpfsModule.html":{},"injectables/IpfsService.html":{},"injectables/MessagesService.html":{},"coverage.html":{},"overview.html":{}}}],["isglobal",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["isolated",{"_index":835,"title":{},"body":{"index.html":{}}}],["js",{"_index":283,"title":{},"body":{"injectables/IpfsService.html":{}}}],["json.parse(file.content.tostring('utf8",{"_index":305,"title":{},"body":{"injectables/IpfsService.html":{}}}],["json.stringify(data",{"_index":313,"title":{},"body":{"injectables/IpfsService.html":{}}}],["json.stringify(log",{"_index":626,"title":{},"body":{"injectables/Web3Service.html":{}}}],["key",{"_index":97,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["keycontext",{"_index":219,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["keypair",{"_index":190,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["keypair.dto",{"_index":198,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["keypair.dto.ts",{"_index":65,"title":{},"body":{"classes/CryptographyKeyPairDto.html":{},"coverage.html":{}}}],["keypair.dto.ts:2",{"_index":70,"title":{},"body":{"classes/CryptographyKeyPairDto.html":{}}}],["keypair.dto.ts:3",{"_index":69,"title":{},"body":{"classes/CryptographyKeyPairDto.html":{}}}],["keys",{"_index":137,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["later",{"_index":310,"title":{},"body":{"injectables/IpfsService.html":{}}}],["lazy",{"_index":517,"title":{},"body":{"controllers/Web3Controller.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"modules/CryptographyModule.html":{},"modules/IpfsModule.html":{},"modules/MessagesModule.html":{},"modules/UsersModule.html":{},"modules/Web3Module.html":{},"overview.html":{}}}],["length",{"_index":457,"title":{},"body":{"classes/User.html":{}}}],["load",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["locally",{"_index":845,"title":{},"body":{"index.html":{}}}],["log",{"_index":622,"title":{},"body":{"injectables/Web3Service.html":{}}}],["log.data",{"_index":629,"title":{},"body":{"injectables/Web3Service.html":{}}}],["log.transactionhash",{"_index":624,"title":{},"body":{"injectables/Web3Service.html":{}}}],["logger",{"_index":399,"title":{},"body":{"injectables/MessagesService.html":{},"injectables/Web3Service.html":{}}}],["logger.debug(`parsed",{"_index":633,"title":{},"body":{"injectables/Web3Service.html":{}}}],["logger.debug(`received",{"_index":625,"title":{},"body":{"injectables/Web3Service.html":{}}}],["logger.debug(`subcribed",{"_index":645,"title":{},"body":{"injectables/Web3Service.html":{}}}],["logger.debug(`transactioncount",{"_index":651,"title":{},"body":{"injectables/Web3Service.html":{}}}],["logger.debug(ipfspath",{"_index":405,"title":{},"body":{"injectables/MessagesService.html":{}}}],["logger.debug(log",{"_index":644,"title":{},"body":{"injectables/Web3Service.html":{}}}],["logger.debug(tx",{"_index":680,"title":{},"body":{"injectables/Web3Service.html":{}}}],["logger.debug(txhash",{"_index":407,"title":{},"body":{"injectables/MessagesService.html":{}}}],["logger.error(result",{"_index":620,"title":{},"body":{"injectables/Web3Service.html":{}}}],["logs",{"_index":646,"title":{},"body":{"injectables/Web3Service.html":{}}}],["make",{"_index":796,"title":{},"body":{"index.html":{}}}],["matching",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"classes/CryptographyKeyPairDto.html":{},"modules/CryptographyModule.html":{},"injectables/CryptographyService.html":{},"controllers/IpfsController.html":{},"classes/IpfsMessageDto.html":{},"modules/IpfsModule.html":{},"injectables/IpfsService.html":{},"classes/Message.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/SendMessageDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/Web3Controller.html":{},"classes/Web3Factory.html":{},"modules/Web3Module.html":{},"injectables/Web3Service.html":{},"classes/Web3Transaction.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["memory",{"_index":585,"title":{},"body":{"injectables/Web3Service.html":{}}}],["message",{"_index":291,"title":{"classes/Message.html":{}},"body":{"injectables/IpfsService.html":{},"classes/Message.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"coverage.html":{}}}],["message.channelid",{"_index":359,"title":{},"body":{"controllers/MessagesController.html":{},"injectables/MessagesService.html":{}}}],["message.content",{"_index":360,"title":{},"body":{"controllers/MessagesController.html":{},"injectables/MessagesService.html":{}}}],["message.dto",{"_index":248,"title":{},"body":{"controllers/IpfsController.html":{},"injectables/IpfsService.html":{},"controllers/MessagesController.html":{}}}],["message.dto.ts",{"_index":259,"title":{},"body":{"classes/IpfsMessageDto.html":{},"classes/SendMessageDto.html":{},"coverage.html":{}}}],["message.dto.ts:11",{"_index":261,"title":{},"body":{"classes/IpfsMessageDto.html":{},"classes/SendMessageDto.html":{}}}],["message.dto.ts:15",{"_index":445,"title":{},"body":{"classes/SendMessageDto.html":{}}}],["message.dto.ts:5",{"_index":262,"title":{},"body":{"classes/IpfsMessageDto.html":{},"classes/SendMessageDto.html":{}}}],["message.dto.ts:8",{"_index":263,"title":{},"body":{"classes/IpfsMessageDto.html":{},"classes/SendMessageDto.html":{}}}],["message.from",{"_index":410,"title":{},"body":{"injectables/MessagesService.html":{}}}],["message.ipfspath",{"_index":411,"title":{},"body":{"injectables/MessagesService.html":{}}}],["message.timestamp",{"_index":409,"title":{},"body":{"injectables/MessagesService.html":{}}}],["message.to",{"_index":358,"title":{},"body":{"controllers/MessagesController.html":{},"injectables/MessagesService.html":{}}}],["message.txhash",{"_index":412,"title":{},"body":{"injectables/MessagesService.html":{}}}],["messagerepository",{"_index":393,"title":{},"body":{"injectables/MessagesService.html":{}}}],["messages",{"_index":308,"title":{},"body":{"injectables/IpfsService.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{}}}],["messages.controller",{"_index":384,"title":{},"body":{"modules/MessagesModule.html":{}}}],["messages.entity",{"_index":352,"title":{},"body":{"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{}}}],["messages.push(message",{"_index":375,"title":{},"body":{"controllers/MessagesController.html":{}}}],["messages.service",{"_index":354,"title":{},"body":{"controllers/MessagesController.html":{},"modules/MessagesModule.html":{}}}],["messages/messages.module",{"_index":30,"title":{},"body":{"modules/AppModule.html":{}}}],["messagescontroller",{"_index":339,"title":{"controllers/MessagesController.html":{}},"body":{"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"coverage.html":{}}}],["messagesmodule",{"_index":11,"title":{"modules/MessagesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MessagesModule.html":{},"modules.html":{},"overview.html":{}}}],["messagesservice",{"_index":353,"title":{"injectables/MessagesService.html":{}},"body":{"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"coverage.html":{},"overview.html":{}}}],["messageuid",{"_index":582,"title":{},"body":{"injectables/Web3Service.html":{}}}],["metadata",{"_index":746,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":568,"title":{},"body":{"injectables/Web3Service.html":{}}}],["methods",{"_index":81,"title":{},"body":{"injectables/CryptographyService.html":{},"controllers/IpfsController.html":{},"injectables/IpfsService.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/Web3Controller.html":{},"classes/Web3Factory.html":{},"injectables/Web3Service.html":{}}}],["mined",{"_index":675,"title":{},"body":{"injectables/Web3Service.html":{}}}],["miscellaneous",{"_index":758,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":795,"title":{},"body":{"index.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/CryptographyModule.html":{},"modules/IpfsModule.html":{},"modules/MessagesModule.html":{},"modules/UsersModule.html":{},"modules/Web3Module.html":{}},"body":{"modules/AppModule.html":{},"modules/CryptographyModule.html":{},"modules/IpfsModule.html":{},"modules/MessagesModule.html":{},"modules/UsersModule.html":{},"modules/Web3Module.html":{},"index.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/CryptographyModule.html":{},"modules/IpfsModule.html":{},"modules/MessagesModule.html":{},"modules/UsersModule.html":{},"modules/Web3Module.html":{},"modules.html":{},"overview.html":{}}}],["name",{"_index":51,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/CryptographyService.html":{},"controllers/IpfsController.html":{},"injectables/IpfsService.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/Web3Controller.html":{},"classes/Web3Factory.html":{},"injectables/Web3Service.html":{},"miscellaneous/variables.html":{}}}],["native",{"_index":196,"title":{},"body":{"injectables/CryptographyService.html":{},"dependencies.html":{}}}],["need",{"_index":413,"title":{},"body":{"injectables/MessagesService.html":{},"injectables/Web3Service.html":{}}}],["nestjs/common",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/CryptographyModule.html":{},"injectables/CryptographyService.html":{},"controllers/IpfsController.html":{},"modules/IpfsModule.html":{},"injectables/IpfsService.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/Web3Controller.html":{},"modules/Web3Module.html":{},"injectables/Web3Service.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/IpfsModule.html":{},"injectables/IpfsService.html":{},"modules/Web3Module.html":{},"injectables/Web3Service.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":736,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":737,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":60,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/IpfsMessageDto.html":{},"classes/SendMessageDto.html":{},"classes/UserDto.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/Web3Module.html":{},"injectables/Web3Service.html":{},"dependencies.html":{}}}],["network1",{"_index":830,"title":{},"body":{"index.html":{}}}],["network2",{"_index":833,"title":{},"body":{"index.html":{}}}],["networks",{"_index":837,"title":{},"body":{"index.html":{}}}],["new",{"_index":408,"title":{},"body":{"injectables/MessagesService.html":{},"injectables/UsersService.html":{},"classes/Web3Factory.html":{},"injectables/Web3Service.html":{},"coverage.html":{},"index.html":{}}}],["newuser",{"_index":496,"title":{},"body":{"injectables/UsersService.html":{}}}],["newuser.name",{"_index":497,"title":{},"body":{"injectables/UsersService.html":{}}}],["newuser.privatekey",{"_index":499,"title":{},"body":{"injectables/UsersService.html":{}}}],["next",{"_index":421,"title":{},"body":{"injectables/MessagesService.html":{}}}],["node",{"_index":776,"title":{},"body":{"index.html":{}}}],["node.yml",{"_index":818,"title":{},"body":{"index.html":{}}}],["nonce",{"_index":96,"title":{},"body":{"injectables/CryptographyService.html":{},"injectables/Web3Service.html":{}}}],["noncebuffer",{"_index":150,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["noncebuffer.writeuint32be(nonce",{"_index":223,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["nonpayable",{"_index":876,"title":{},"body":{"miscellaneous/variables.html":{}}}],["note",{"_index":834,"title":{},"body":{"index.html":{}}}],["nothing",{"_index":429,"title":{},"body":{"injectables/MessagesService.html":{}}}],["notify",{"_index":872,"title":{},"body":{"miscellaneous/variables.html":{}}}],["notify(string",{"_index":584,"title":{},"body":{"injectables/Web3Service.html":{}}}],["notify(web3.utils.fromascii(channelid",{"_index":657,"title":{},"body":{"injectables/Web3Service.html":{}}}],["notifynewmessage",{"_index":870,"title":{},"body":{"miscellaneous/variables.html":{}}}],["notifynewmessage(messageuid",{"_index":587,"title":{},"body":{"injectables/Web3Service.html":{}}}],["notifynewmessage(string",{"_index":581,"title":{},"body":{"injectables/Web3Service.html":{}}}],["now",{"_index":364,"title":{},"body":{"controllers/MessagesController.html":{},"classes/SendMessageDto.html":{},"injectables/Web3Service.html":{},"index.html":{}}}],["npm",{"_index":768,"title":{},"body":{"index.html":{}}}],["null",{"_index":435,"title":{},"body":{"injectables/MessagesService.html":{},"injectables/Web3Service.html":{}}}],["nullable",{"_index":710,"title":{},"body":{"classes/Web3Transaction.html":{}}}],["number",{"_index":106,"title":{},"body":{"injectables/CryptographyService.html":{},"classes/Message.html":{},"classes/User.html":{},"classes/Web3Transaction.html":{}}}],["nvm",{"_index":790,"title":{},"body":{"index.html":{}}}],["object",{"_index":862,"title":{},"body":{"miscellaneous/variables.html":{}}}],["on('changed",{"_index":643,"title":{},"body":{"injectables/Web3Service.html":{}}}],["on('data",{"_index":621,"title":{},"body":{"injectables/Web3Service.html":{}}}],["once",{"_index":108,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["one",{"_index":135,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["onmoduleinit",{"_index":546,"title":{},"body":{"injectables/Web3Service.html":{}}}],["optional",{"_index":104,"title":{},"body":{"injectables/CryptographyService.html":{},"controllers/IpfsController.html":{},"injectables/IpfsService.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/Web3Controller.html":{},"classes/Web3Factory.html":{},"injectables/Web3Service.html":{},"classes/Web3Transaction.html":{}}}],["options",{"_index":615,"title":{},"body":{"injectables/Web3Service.html":{}}}],["out",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"modules/CryptographyModule.html":{},"modules/IpfsModule.html":{},"modules/MessagesModule.html":{},"modules/UsersModule.html":{},"modules/Web3Module.html":{},"overview.html":{}}}],["outputhash",{"_index":214,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["outputs",{"_index":873,"title":{},"body":{"miscellaneous/variables.html":{}}}],["outputsymmetrickey",{"_index":217,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["overview",{"_index":856,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":733,"title":{"dependencies.html":{}},"body":{}}],["padded",{"_index":151,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["pair",{"_index":157,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["param",{"_index":189,"title":{},"body":{"injectables/CryptographyService.html":{},"controllers/IpfsController.html":{},"injectables/IpfsService.html":{},"controllers/MessagesController.html":{},"controllers/Web3Controller.html":{}}}],["param('channel",{"_index":519,"title":{},"body":{"controllers/Web3Controller.html":{}}}],["param('content",{"_index":520,"title":{},"body":{"controllers/Web3Controller.html":{}}}],["param('signature",{"_index":521,"title":{},"body":{"controllers/Web3Controller.html":{}}}],["parameters",{"_index":103,"title":{},"body":{"injectables/CryptographyService.html":{},"controllers/IpfsController.html":{},"injectables/IpfsService.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/Web3Controller.html":{},"classes/Web3Factory.html":{},"injectables/Web3Service.html":{}}}],["part",{"_index":415,"title":{},"body":{"injectables/MessagesService.html":{}}}],["party",{"_index":138,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["passed",{"_index":145,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["path",{"_index":242,"title":{},"body":{"controllers/IpfsController.html":{},"injectables/IpfsService.html":{}}}],["payable",{"_index":874,"title":{},"body":{"miscellaneous/variables.html":{}}}],["peer",{"_index":764,"title":{},"body":{"index.html":{}}}],["pending",{"_index":688,"title":{},"body":{"injectables/Web3Service.html":{}}}],["perform",{"_index":159,"title":{},"body":{"injectables/CryptographyService.html":{},"injectables/IpfsService.html":{}}}],["pg",{"_index":743,"title":{},"body":{"dependencies.html":{}}}],["points",{"_index":793,"title":{},"body":{"index.html":{}}}],["port",{"_index":298,"title":{},"body":{"injectables/IpfsService.html":{}}}],["post",{"_index":238,"title":{},"body":{"controllers/IpfsController.html":{},"controllers/MessagesController.html":{},"controllers/UsersController.html":{},"controllers/Web3Controller.html":{}}}],["post(':channel",{"_index":509,"title":{},"body":{"controllers/Web3Controller.html":{}}}],["post(@body",{"_index":256,"title":{},"body":{"controllers/IpfsController.html":{}}}],["post(channelid",{"_index":508,"title":{},"body":{"controllers/Web3Controller.html":{}}}],["post(data",{"_index":243,"title":{},"body":{"controllers/IpfsController.html":{}}}],["postgres",{"_index":814,"title":{},"body":{"index.html":{}}}],["pragma",{"_index":577,"title":{},"body":{"injectables/Web3Service.html":{}}}],["prefix",{"_index":236,"title":{},"body":{"controllers/IpfsController.html":{},"controllers/MessagesController.html":{},"controllers/UsersController.html":{},"controllers/Web3Controller.html":{}}}],["primarygeneratedcolumn",{"_index":328,"title":{},"body":{"classes/Message.html":{},"classes/User.html":{},"classes/Web3Transaction.html":{}}}],["private",{"_index":140,"title":{},"body":{"injectables/CryptographyService.html":{},"injectables/IpfsService.html":{},"injectables/MessagesService.html":{},"injectables/UsersService.html":{},"injectables/Web3Service.html":{}}}],["privatekey",{"_index":66,"title":{},"body":{"classes/CryptographyKeyPairDto.html":{},"injectables/CryptographyService.html":{},"injectables/Web3Service.html":{}}}],["privateoneusekey",{"_index":206,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["privatesigningkey",{"_index":176,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["probably",{"_index":565,"title":{},"body":{"injectables/Web3Service.html":{}}}],["prod",{"_index":811,"title":{},"body":{"index.html":{}}}],["producing",{"_index":842,"title":{},"body":{"index.html":{}}}],["production",{"_index":806,"title":{},"body":{"index.html":{}}}],["project",{"_index":762,"title":{},"body":{"index.html":{}}}],["promise",{"_index":113,"title":{},"body":{"injectables/CryptographyService.html":{},"controllers/IpfsController.html":{},"injectables/IpfsService.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/Web3Controller.html":{},"injectables/Web3Service.html":{}}}],["promise(async",{"_index":689,"title":{},"body":{"injectables/Web3Service.html":{}}}],["proper",{"_index":518,"title":{},"body":{"controllers/Web3Controller.html":{}}}],["properties",{"_index":50,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CryptographyKeyPairDto.html":{},"classes/IpfsMessageDto.html":{},"injectables/IpfsService.html":{},"classes/Message.html":{},"classes/SendMessageDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"injectables/Web3Service.html":{},"classes/Web3Transaction.html":{}}}],["protocol",{"_index":300,"title":{},"body":{"injectables/IpfsService.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"modules/CryptographyModule.html":{},"modules/IpfsModule.html":{},"modules/MessagesModule.html":{},"modules/UsersModule.html":{},"modules/Web3Module.html":{},"overview.html":{}}}],["public",{"_index":139,"title":{},"body":{"injectables/CryptographyService.html":{},"injectables/Web3Service.html":{}}}],["publickey",{"_index":67,"title":{},"body":{"classes/CryptographyKeyPairDto.html":{},"injectables/CryptographyService.html":{},"injectables/Web3Service.html":{}}}],["publiconeusekey",{"_index":204,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["publicsigningkey",{"_index":185,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["query",{"_index":469,"title":{},"body":{"controllers/UsersController.html":{}}}],["random",{"_index":146,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["raw",{"_index":562,"title":{},"body":{"injectables/Web3Service.html":{}}}],["readonly",{"_index":253,"title":{},"body":{"controllers/IpfsController.html":{},"injectables/IpfsService.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/Web3Controller.html":{},"injectables/Web3Service.html":{}}}],["rebuild",{"_index":823,"title":{},"body":{"index.html":{}}}],["received",{"_index":425,"title":{},"body":{"injectables/MessagesService.html":{}}}],["reflect",{"_index":745,"title":{},"body":{"dependencies.html":{}}}],["reject",{"_index":691,"title":{},"body":{"injectables/Web3Service.html":{}}}],["reject(`${err",{"_index":694,"title":{},"body":{"injectables/Web3Service.html":{}}}],["repository",{"_index":390,"title":{},"body":{"injectables/MessagesService.html":{},"injectables/UsersService.html":{},"injectables/Web3Service.html":{}}}],["requirements",{"_index":775,"title":{},"body":{"index.html":{}}}],["reset",{"_index":15,"title":{},"body":{"modules/AppModule.html":{},"modules/CryptographyModule.html":{},"modules/IpfsModule.html":{},"modules/MessagesModule.html":{},"modules/UsersModule.html":{},"modules/Web3Module.html":{},"overview.html":{}}}],["resolve",{"_index":690,"title":{},"body":{"injectables/Web3Service.html":{}}}],["resolve(txcount",{"_index":695,"title":{},"body":{"injectables/Web3Service.html":{}}}],["resolve(txhash",{"_index":697,"title":{},"body":{"injectables/Web3Service.html":{}}}],["result",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"classes/CryptographyKeyPairDto.html":{},"modules/CryptographyModule.html":{},"injectables/CryptographyService.html":{},"controllers/IpfsController.html":{},"classes/IpfsMessageDto.html":{},"modules/IpfsModule.html":{},"injectables/IpfsService.html":{},"classes/Message.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/SendMessageDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/Web3Controller.html":{},"classes/Web3Factory.html":{},"modules/Web3Module.html":{},"injectables/Web3Service.html":{},"classes/Web3Transaction.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["result.path",{"_index":318,"title":{},"body":{"injectables/IpfsService.html":{}}}],["results",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"classes/CryptographyKeyPairDto.html":{},"modules/CryptographyModule.html":{},"injectables/CryptographyService.html":{},"controllers/IpfsController.html":{},"classes/IpfsMessageDto.html":{},"modules/IpfsModule.html":{},"injectables/IpfsService.html":{},"classes/Message.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/SendMessageDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/Web3Controller.html":{},"classes/Web3Factory.html":{},"modules/Web3Module.html":{},"injectables/Web3Service.html":{},"classes/Web3Transaction.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["rethink",{"_index":414,"title":{},"body":{"injectables/MessagesService.html":{}}}],["retrieve",{"_index":271,"title":{},"body":{"injectables/IpfsService.html":{}}}],["retrieve(ipfspath",{"_index":277,"title":{},"body":{"injectables/IpfsService.html":{}}}],["return",{"_index":203,"title":{},"body":{"injectables/CryptographyService.html":{},"controllers/IpfsController.html":{},"injectables/IpfsService.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/Web3Controller.html":{},"classes/Web3Factory.html":{},"injectables/Web3Service.html":{}}}],["returns",{"_index":112,"title":{},"body":{"injectables/CryptographyService.html":{},"controllers/IpfsController.html":{},"injectables/IpfsService.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/Web3Controller.html":{},"classes/Web3Factory.html":{},"injectables/Web3Service.html":{}}}],["retval",{"_index":212,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["reused",{"_index":109,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["rimraf",{"_index":748,"title":{},"body":{"dependencies.html":{}}}],["ropsen",{"_index":575,"title":{},"body":{"injectables/Web3Service.html":{}}}],["rpcurl",{"_index":527,"title":{},"body":{"classes/Web3Factory.html":{},"injectables/Web3Service.html":{}}}],["run",{"_index":802,"title":{},"body":{"index.html":{}}}],["running",{"_index":800,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":750,"title":{},"body":{"dependencies.html":{}}}],["save",{"_index":432,"title":{},"body":{"injectables/MessagesService.html":{}}}],["secret",{"_index":110,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["select",{"_index":503,"title":{},"body":{"injectables/UsersService.html":{}}}],["sendmessage",{"_index":343,"title":{},"body":{"controllers/MessagesController.html":{},"injectables/MessagesService.html":{}}}],["sendmessage(@body",{"_index":356,"title":{},"body":{"controllers/MessagesController.html":{}}}],["sendmessage(from",{"_index":397,"title":{},"body":{"injectables/MessagesService.html":{}}}],["sendmessage(message",{"_index":348,"title":{},"body":{"controllers/MessagesController.html":{}}}],["sendmessagedto",{"_index":349,"title":{"classes/SendMessageDto.html":{}},"body":{"controllers/MessagesController.html":{},"classes/SendMessageDto.html":{},"coverage.html":{}}}],["sendsignertransaction",{"_index":547,"title":{},"body":{"injectables/Web3Service.html":{}}}],["sendsignertransaction(raw",{"_index":560,"title":{},"body":{"injectables/Web3Service.html":{}}}],["separate",{"_index":843,"title":{},"body":{"index.html":{}}}],["sequence",{"_index":367,"title":{},"body":{"controllers/MessagesController.html":{}}}],["serializedtx",{"_index":681,"title":{},"body":{"injectables/Web3Service.html":{}}}],["serializedtx.tostring('hex",{"_index":684,"title":{},"body":{"injectables/Web3Service.html":{}}}],["sha",{"_index":173,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["sha256",{"_index":170,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["shared",{"_index":134,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["sharedsecret",{"_index":141,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["sign",{"_index":181,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["signature",{"_index":179,"title":{},"body":{"injectables/CryptographyService.html":{},"controllers/Web3Controller.html":{},"injectables/Web3Service.html":{},"classes/Web3Transaction.html":{},"miscellaneous/variables.html":{}}}],["signature='${signature",{"_index":636,"title":{},"body":{"injectables/Web3Service.html":{}}}],["signed",{"_index":180,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["signing",{"_index":163,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["simplicity",{"_index":447,"title":{},"body":{"classes/SendMessageDto.html":{}}}],["simply",{"_index":428,"title":{},"body":{"injectables/MessagesService.html":{}}}],["simulating",{"_index":366,"title":{},"body":{"controllers/MessagesController.html":{}}}],["simultaneosly",{"_index":841,"title":{},"body":{"index.html":{}}}],["single",{"_index":812,"title":{},"body":{"index.html":{}}}],["sodium",{"_index":195,"title":{},"body":{"injectables/CryptographyService.html":{},"dependencies.html":{}}}],["sodiumnative",{"_index":194,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["sodiumnative.crypto_hash_sha256(outputhash",{"_index":216,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["sodiumnative.crypto_kdf_derive_from_key(outputsymmetrickey",{"_index":221,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["sodiumnative.crypto_scalarmult(sharedsecret",{"_index":209,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["sodiumnative.crypto_scalarmult_base(publiconeusekey",{"_index":208,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["sodiumnative.crypto_sign_detached(signature",{"_index":211,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["sodiumnative.crypto_sign_keypair(publicsigningkey",{"_index":202,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["sodiumnative.crypto_sign_verify_detached(signature",{"_index":213,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["sodiumnative.crypto_stream_chacha20_xor(decrypteddata",{"_index":229,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["sodiumnative.crypto_stream_chacha20_xor(encrypteddata",{"_index":227,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["sodiumnative.randombytes_buf(retval",{"_index":232,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["sodiumnative.randombytes_random",{"_index":230,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["sodiumnative.sodium_malloc(data.length",{"_index":226,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["sodiumnative.sodium_malloc(sodiumnative.crypto_hash_sha256_bytes",{"_index":215,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["sodiumnative.sodium_malloc(sodiumnative.crypto_kdf_keybytes",{"_index":218,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["sodiumnative.sodium_malloc(sodiumnative.crypto_scalarmult_bytes",{"_index":205,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["sodiumnative.sodium_malloc(sodiumnative.crypto_scalarmult_scalarbytes",{"_index":207,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["sodiumnative.sodium_malloc(sodiumnative.crypto_sign_bytes",{"_index":210,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["sodiumnative.sodium_malloc(sodiumnative.crypto_sign_publickeybytes",{"_index":200,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["sodiumnative.sodium_malloc(sodiumnative.crypto_sign_secretkeybytes",{"_index":201,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["sodiumnative.sodium_malloc(sodiumnative.crypto_stream_chacha20_noncebytes",{"_index":222,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["solidity",{"_index":578,"title":{},"body":{"injectables/Web3Service.html":{}}}],["source",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"classes/CryptographyKeyPairDto.html":{},"modules/CryptographyModule.html":{},"injectables/CryptographyService.html":{},"controllers/IpfsController.html":{},"classes/IpfsMessageDto.html":{},"modules/IpfsModule.html":{},"injectables/IpfsService.html":{},"classes/Message.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/SendMessageDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/Web3Controller.html":{},"classes/Web3Factory.html":{},"modules/Web3Module.html":{},"injectables/Web3Service.html":{},"classes/Web3Transaction.html":{}}}],["src/.../main.ts",{"_index":760,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../web3.constants.ts",{"_index":861,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":20,"title":{},"body":{"modules/AppModule.html":{}}}],["src/cryptography/cryptography.module.ts",{"_index":76,"title":{},"body":{"modules/CryptographyModule.html":{}}}],["src/cryptography/cryptography.service.ts",{"_index":80,"title":{},"body":{"injectables/CryptographyService.html":{},"coverage.html":{}}}],["src/cryptography/cryptography.service.ts:106",{"_index":117,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["src/cryptography/cryptography.service.ts:11",{"_index":182,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["src/cryptography/cryptography.service.ts:120",{"_index":143,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["src/cryptography/cryptography.service.ts:135",{"_index":127,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["src/cryptography/cryptography.service.ts:150",{"_index":98,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["src/cryptography/cryptography.service.ts:161",{"_index":167,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["src/cryptography/cryptography.service.ts:170",{"_index":166,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["src/cryptography/cryptography.service.ts:31",{"_index":155,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["src/cryptography/cryptography.service.ts:51",{"_index":131,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["src/cryptography/cryptography.service.ts:65",{"_index":177,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["src/cryptography/cryptography.service.ts:80",{"_index":186,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["src/cryptography/cryptography.service.ts:91",{"_index":169,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["src/cryptography/dto/cryptography",{"_index":64,"title":{},"body":{"classes/CryptographyKeyPairDto.html":{},"coverage.html":{}}}],["src/ipfs/dto/ipfs",{"_index":258,"title":{},"body":{"classes/IpfsMessageDto.html":{},"coverage.html":{}}}],["src/ipfs/ipfs.controller.ts",{"_index":235,"title":{},"body":{"controllers/IpfsController.html":{},"coverage.html":{}}}],["src/ipfs/ipfs.controller.ts:10",{"_index":241,"title":{},"body":{"controllers/IpfsController.html":{}}}],["src/ipfs/ipfs.controller.ts:15",{"_index":245,"title":{},"body":{"controllers/IpfsController.html":{}}}],["src/ipfs/ipfs.module.ts",{"_index":268,"title":{},"body":{"modules/IpfsModule.html":{}}}],["src/ipfs/ipfs.service.ts",{"_index":270,"title":{},"body":{"injectables/IpfsService.html":{},"coverage.html":{}}}],["src/ipfs/ipfs.service.ts:21",{"_index":278,"title":{},"body":{"injectables/IpfsService.html":{}}}],["src/ipfs/ipfs.service.ts:31",{"_index":287,"title":{},"body":{"injectables/IpfsService.html":{}}}],["src/ipfs/ipfs.service.ts:8",{"_index":276,"title":{},"body":{"injectables/IpfsService.html":{}}}],["src/main.ts",{"_index":721,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/messages/dto/send",{"_index":444,"title":{},"body":{"classes/SendMessageDto.html":{},"coverage.html":{}}}],["src/messages/messages.controller.ts",{"_index":340,"title":{},"body":{"controllers/MessagesController.html":{},"coverage.html":{}}}],["src/messages/messages.controller.ts:10",{"_index":350,"title":{},"body":{"controllers/MessagesController.html":{}}}],["src/messages/messages.controller.ts:15",{"_index":344,"title":{},"body":{"controllers/MessagesController.html":{}}}],["src/messages/messages.controller.ts:20",{"_index":347,"title":{},"body":{"controllers/MessagesController.html":{}}}],["src/messages/messages.entity.ts",{"_index":319,"title":{},"body":{"classes/Message.html":{},"coverage.html":{}}}],["src/messages/messages.entity.ts:10",{"_index":332,"title":{},"body":{"classes/Message.html":{}}}],["src/messages/messages.entity.ts:13",{"_index":327,"title":{},"body":{"classes/Message.html":{}}}],["src/messages/messages.entity.ts:16",{"_index":333,"title":{},"body":{"classes/Message.html":{}}}],["src/messages/messages.entity.ts:19",{"_index":326,"title":{},"body":{"classes/Message.html":{}}}],["src/messages/messages.entity.ts:22",{"_index":330,"title":{},"body":{"classes/Message.html":{}}}],["src/messages/messages.entity.ts:25",{"_index":334,"title":{},"body":{"classes/Message.html":{}}}],["src/messages/messages.entity.ts:28",{"_index":325,"title":{},"body":{"classes/Message.html":{}}}],["src/messages/messages.entity.ts:7",{"_index":329,"title":{},"body":{"classes/Message.html":{}}}],["src/messages/messages.module.ts",{"_index":381,"title":{},"body":{"modules/MessagesModule.html":{}}}],["src/messages/messages.service.ts",{"_index":386,"title":{},"body":{"injectables/MessagesService.html":{},"coverage.html":{}}}],["src/messages/messages.service.ts:17",{"_index":398,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/messages/messages.service.ts:39",{"_index":394,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/messages/messages.service.ts:43",{"_index":396,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/messages/messages.service.ts:9",{"_index":392,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/users/dto/create",{"_index":47,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/user.dto.ts",{"_index":459,"title":{},"body":{"classes/UserDto.html":{},"coverage.html":{}}}],["src/users/dto/user.dto.ts:5",{"_index":460,"title":{},"body":{"classes/UserDto.html":{}}}],["src/users/users.controller.ts",{"_index":462,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:11",{"_index":466,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:16",{"_index":468,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.entity.ts",{"_index":451,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/users/users.entity.ts:10",{"_index":455,"title":{},"body":{"classes/User.html":{}}}],["src/users/users.entity.ts:7",{"_index":452,"title":{},"body":{"classes/User.html":{}}}],["src/users/users.module.ts",{"_index":483,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":487,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:15",{"_index":492,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:22",{"_index":494,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:9",{"_index":490,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/web3/web3.constants.ts",{"_index":726,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/web3/web3.controller.ts",{"_index":505,"title":{},"body":{"controllers/Web3Controller.html":{},"coverage.html":{}}}],["src/web3/web3.controller.ts:10",{"_index":507,"title":{},"body":{"controllers/Web3Controller.html":{}}}],["src/web3/web3.controller.ts:16",{"_index":511,"title":{},"body":{"controllers/Web3Controller.html":{}}}],["src/web3/web3.entity.ts",{"_index":698,"title":{},"body":{"classes/Web3Transaction.html":{},"coverage.html":{}}}],["src/web3/web3.entity.ts:10",{"_index":708,"title":{},"body":{"classes/Web3Transaction.html":{}}}],["src/web3/web3.entity.ts:13",{"_index":707,"title":{},"body":{"classes/Web3Transaction.html":{}}}],["src/web3/web3.entity.ts:16",{"_index":701,"title":{},"body":{"classes/Web3Transaction.html":{}}}],["src/web3/web3.entity.ts:19",{"_index":702,"title":{},"body":{"classes/Web3Transaction.html":{}}}],["src/web3/web3.entity.ts:22",{"_index":706,"title":{},"body":{"classes/Web3Transaction.html":{}}}],["src/web3/web3.entity.ts:25",{"_index":704,"title":{},"body":{"classes/Web3Transaction.html":{}}}],["src/web3/web3.entity.ts:7",{"_index":705,"title":{},"body":{"classes/Web3Transaction.html":{}}}],["src/web3/web3.factory.ts",{"_index":523,"title":{},"body":{"classes/Web3Factory.html":{},"coverage.html":{}}}],["src/web3/web3.factory.ts:4",{"_index":526,"title":{},"body":{"classes/Web3Factory.html":{}}}],["src/web3/web3.module.ts",{"_index":533,"title":{},"body":{"modules/Web3Module.html":{}}}],["src/web3/web3.service.ts",{"_index":537,"title":{},"body":{"injectables/Web3Service.html":{},"coverage.html":{}}}],["src/web3/web3.service.ts:101",{"_index":555,"title":{},"body":{"injectables/Web3Service.html":{}}}],["src/web3/web3.service.ts:105",{"_index":552,"title":{},"body":{"injectables/Web3Service.html":{}}}],["src/web3/web3.service.ts:139",{"_index":557,"title":{},"body":{"injectables/Web3Service.html":{}}}],["src/web3/web3.service.ts:145",{"_index":561,"title":{},"body":{"injectables/Web3Service.html":{}}}],["src/web3/web3.service.ts:32",{"_index":564,"title":{},"body":{"injectables/Web3Service.html":{}}}],["src/web3/web3.service.ts:33",{"_index":589,"title":{},"body":{"injectables/Web3Service.html":{}}}],["src/web3/web3.service.ts:34",{"_index":592,"title":{},"body":{"injectables/Web3Service.html":{}}}],["src/web3/web3.service.ts:35",{"_index":588,"title":{},"body":{"injectables/Web3Service.html":{}}}],["src/web3/web3.service.ts:36",{"_index":563,"title":{},"body":{"injectables/Web3Service.html":{}}}],["src/web3/web3.service.ts:37",{"_index":590,"title":{},"body":{"injectables/Web3Service.html":{}}}],["src/web3/web3.service.ts:38",{"_index":591,"title":{},"body":{"injectables/Web3Service.html":{}}}],["src/web3/web3.service.ts:39",{"_index":549,"title":{},"body":{"injectables/Web3Service.html":{}}}],["src/web3/web3.service.ts:57",{"_index":559,"title":{},"body":{"injectables/Web3Service.html":{}}}],["src/web3/web3.service.ts:97",{"_index":553,"title":{},"body":{"injectables/Web3Service.html":{}}}],["stable",{"_index":792,"title":{},"body":{"index.html":{}}}],["stabledevelopment",{"_index":794,"title":{},"body":{"index.html":{}}}],["start",{"_index":803,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":805,"title":{},"body":{"index.html":{}}}],["start:prodswagger",{"_index":807,"title":{},"body":{"index.html":{}}}],["started",{"_index":761,"title":{"index.html":{}},"body":{}}],["statements",{"_index":714,"title":{},"body":{"coverage.html":{}}}],["statemutability",{"_index":875,"title":{},"body":{"miscellaneous/variables.html":{}}}],["status",{"_index":687,"title":{},"body":{"injectables/Web3Service.html":{},"classes/Web3Transaction.html":{}}}],["store",{"_index":272,"title":{},"body":{"injectables/IpfsService.html":{}}}],["store(data",{"_index":286,"title":{},"body":{"injectables/IpfsService.html":{}}}],["storedmessage",{"_index":436,"title":{},"body":{"injectables/MessagesService.html":{}}}],["storedmessage.content",{"_index":440,"title":{},"body":{"injectables/MessagesService.html":{}}}],["storedmessage.from",{"_index":438,"title":{},"body":{"injectables/MessagesService.html":{}}}],["storedmessage.to",{"_index":439,"title":{},"body":{"injectables/MessagesService.html":{}}}],["streams",{"_index":311,"title":{},"body":{"injectables/IpfsService.html":{}}}],["string",{"_index":53,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/CryptographyService.html":{},"controllers/IpfsController.html":{},"classes/IpfsMessageDto.html":{},"injectables/IpfsService.html":{},"classes/Message.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"classes/SendMessageDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/Web3Controller.html":{},"classes/Web3Factory.html":{},"injectables/Web3Service.html":{},"classes/Web3Transaction.html":{},"miscellaneous/variables.html":{}}}],["stringdata",{"_index":312,"title":{},"body":{"injectables/IpfsService.html":{}}}],["subscribe('logs",{"_index":618,"title":{},"body":{"injectables/Web3Service.html":{}}}],["successfully",{"_index":676,"title":{},"body":{"injectables/Web3Service.html":{}}}],["suitable",{"_index":152,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["support",{"_index":853,"title":{},"body":{"modules.html":{}}}],["sure",{"_index":797,"title":{},"body":{"index.html":{}}}],["svg",{"_index":854,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":753,"title":{},"body":{"dependencies.html":{}}}],["symmetric",{"_index":102,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["table",{"_index":732,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":731,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":846,"title":{},"body":{"index.html":{}}}],["test:cov",{"_index":851,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":850,"title":{},"body":{"index.html":{}}}],["tests",{"_index":848,"title":{},"body":{"index.html":{}}}],["this.address",{"_index":607,"title":{},"body":{"injectables/Web3Service.html":{}}}],["this.chain",{"_index":599,"title":{},"body":{"injectables/Web3Service.html":{}}}],["this.configservice.get('ipfs.host",{"_index":297,"title":{},"body":{"injectables/IpfsService.html":{}}}],["this.configservice.get('ipfs.port",{"_index":299,"title":{},"body":{"injectables/IpfsService.html":{}}}],["this.configservice.get('web3.broadcastaccount.address",{"_index":608,"title":{},"body":{"injectables/Web3Service.html":{}}}],["this.configservice.get('web3.broadcastaccount.privatekey",{"_index":612,"title":{},"body":{"injectables/Web3Service.html":{}}}],["this.configservice.get('web3.broadcastaccount.publickey",{"_index":610,"title":{},"body":{"injectables/Web3Service.html":{}}}],["this.configservice.get('web3.chain",{"_index":600,"title":{},"body":{"injectables/Web3Service.html":{}}}],["this.configservice.get('web3.contractaddress",{"_index":606,"title":{},"body":{"injectables/Web3Service.html":{}}}],["this.configservice.get('web3.hardfork",{"_index":602,"title":{},"body":{"injectables/Web3Service.html":{}}}],["this.configservice.get('web3.rpcurl",{"_index":604,"title":{},"body":{"injectables/Web3Service.html":{}}}],["this.contractaddress",{"_index":605,"title":{},"body":{"injectables/Web3Service.html":{}}}],["this.cryptographyservice.generateprivatekey",{"_index":500,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.gettransactioncount(this.address",{"_index":650,"title":{},"body":{"injectables/Web3Service.html":{}}}],["this.hardfork",{"_index":601,"title":{},"body":{"injectables/Web3Service.html":{}}}],["this.ipfs",{"_index":302,"title":{},"body":{"injectables/IpfsService.html":{}}}],["this.ipfs.add(buffereddata",{"_index":317,"title":{},"body":{"injectables/IpfsService.html":{}}}],["this.ipfs.get(ipfspath",{"_index":304,"title":{},"body":{"injectables/IpfsService.html":{}}}],["this.ipfsservice.retrieve(path",{"_index":255,"title":{},"body":{"controllers/IpfsController.html":{}}}],["this.ipfsservice.retrieve(tx.content",{"_index":437,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.ipfsservice.store",{"_index":404,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.ipfsservice.store(data",{"_index":257,"title":{},"body":{"controllers/IpfsController.html":{}}}],["this.messagerepository.find",{"_index":417,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.messagerepository.findone",{"_index":423,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.messagerepository.save(message",{"_index":416,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.messagesservice.findall",{"_index":361,"title":{},"body":{"controllers/MessagesController.html":{}}}],["this.messagesservice.findforuser(user",{"_index":374,"title":{},"body":{"controllers/MessagesController.html":{}}}],["this.messagesservice.sendmessage(message.from",{"_index":357,"title":{},"body":{"controllers/MessagesController.html":{}}}],["this.privatekey",{"_index":611,"title":{},"body":{"injectables/Web3Service.html":{}}}],["this.publickey",{"_index":609,"title":{},"body":{"injectables/Web3Service.html":{}}}],["this.rpcurl",{"_index":603,"title":{},"body":{"injectables/Web3Service.html":{}}}],["this.sendsignertransaction(raw",{"_index":685,"title":{},"body":{"injectables/Web3Service.html":{}}}],["this.transactionsrepository.find",{"_index":648,"title":{},"body":{"injectables/Web3Service.html":{}}}],["this.transactionsrepository.findone",{"_index":637,"title":{},"body":{"injectables/Web3Service.html":{}}}],["this.transactionsrepository.save",{"_index":686,"title":{},"body":{"injectables/Web3Service.html":{}}}],["this.transactionsrepository.save(tx",{"_index":642,"title":{},"body":{"injectables/Web3Service.html":{}}}],["this.userrepository.findone",{"_index":502,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.save(newuser",{"_index":501,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userservice.create(user",{"_index":478,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.findbyname(name",{"_index":480,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.web3",{"_index":613,"title":{},"body":{"injectables/Web3Service.html":{}}}],["this.web3.eth",{"_index":617,"title":{},"body":{"injectables/Web3Service.html":{}}}],["this.web3.eth.abi.decodeparameters(['string",{"_index":628,"title":{},"body":{"injectables/Web3Service.html":{}}}],["this.web3.eth.contract(web3constants.abi",{"_index":655,"title":{},"body":{"injectables/Web3Service.html":{}}}],["this.web3.eth.gettransactioncount(account",{"_index":692,"title":{},"body":{"injectables/Web3Service.html":{}}}],["this.web3.eth.sendsignedtransaction(raw",{"_index":696,"title":{},"body":{"injectables/Web3Service.html":{}}}],["this.web3.utils.tohex(800000",{"_index":664,"title":{},"body":{"injectables/Web3Service.html":{}}}],["this.web3.utils.tohex(this.web3.utils.towei('15",{"_index":666,"title":{},"body":{"injectables/Web3Service.html":{}}}],["this.web3.utils.tohex(txcount",{"_index":662,"title":{},"body":{"injectables/Web3Service.html":{}}}],["this.web3service.broadcastnotification(channelid",{"_index":406,"title":{},"body":{"injectables/MessagesService.html":{},"controllers/Web3Controller.html":{}}}],["this.web3service.getall",{"_index":516,"title":{},"body":{"controllers/Web3Controller.html":{}}}],["this.web3service.gettransactionbychannelid(channelid",{"_index":434,"title":{},"body":{"injectables/MessagesService.html":{}}}],["throw",{"_index":677,"title":{},"body":{"injectables/Web3Service.html":{}}}],["timestamp",{"_index":322,"title":{},"body":{"classes/Message.html":{}}}],["todo",{"_index":363,"title":{},"body":{"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"classes/SendMessageDto.html":{},"controllers/Web3Controller.html":{},"injectables/Web3Service.html":{}}}],["transaction",{"_index":593,"title":{},"body":{"injectables/Web3Service.html":{}}}],["transactionhash",{"_index":623,"title":{},"body":{"injectables/Web3Service.html":{}}}],["transactions",{"_index":426,"title":{},"body":{"injectables/MessagesService.html":{}}}],["transactionsrepository",{"_index":550,"title":{},"body":{"injectables/Web3Service.html":{}}}],["true",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"controllers/MessagesController.html":{},"classes/Web3Transaction.html":{}}}],["true/false",{"_index":192,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["tx",{"_index":433,"title":{},"body":{"injectables/MessagesService.html":{},"injectables/Web3Service.html":{},"dependencies.html":{}}}],["tx(txobject",{"_index":668,"title":{},"body":{"injectables/Web3Service.html":{}}}],["tx.channelid",{"_index":638,"title":{},"body":{"injectables/Web3Service.html":{}}}],["tx.content",{"_index":441,"title":{},"body":{"injectables/MessagesService.html":{},"injectables/Web3Service.html":{}}}],["tx.createddate",{"_index":443,"title":{},"body":{"injectables/MessagesService.html":{}}}],["tx.serialize",{"_index":682,"title":{},"body":{"injectables/Web3Service.html":{}}}],["tx.sign(bufferedprivatekey",{"_index":679,"title":{},"body":{"injectables/Web3Service.html":{}}}],["tx.signature",{"_index":639,"title":{},"body":{"injectables/Web3Service.html":{}}}],["tx.status",{"_index":640,"title":{},"body":{"injectables/Web3Service.html":{}}}],["tx.txhash",{"_index":442,"title":{},"body":{"injectables/MessagesService.html":{},"injectables/Web3Service.html":{}}}],["tx.validate",{"_index":669,"title":{},"body":{"injectables/Web3Service.html":{}}}],["txcount",{"_index":649,"title":{},"body":{"injectables/Web3Service.html":{}}}],["txhash",{"_index":323,"title":{},"body":{"classes/Message.html":{},"injectables/MessagesService.html":{},"injectables/Web3Service.html":{},"classes/Web3Transaction.html":{}}}],["txobject",{"_index":661,"title":{},"body":{"injectables/Web3Service.html":{}}}],["type",{"_index":52,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CryptographyKeyPairDto.html":{},"injectables/CryptographyService.html":{},"controllers/IpfsController.html":{},"classes/IpfsMessageDto.html":{},"injectables/IpfsService.html":{},"classes/Message.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"classes/SendMessageDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/Web3Controller.html":{},"classes/Web3Factory.html":{},"injectables/Web3Service.html":{},"classes/Web3Transaction.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":337,"title":{},"body":{"classes/Message.html":{},"injectables/MessagesService.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"injectables/Web3Service.html":{},"classes/Web3Transaction.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/MessagesModule.html":{},"modules/UsersModule.html":{},"modules/Web3Module.html":{}}}],["typeormmodule.forfeature([message",{"_index":385,"title":{},"body":{"modules/MessagesModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":486,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([web3transaction",{"_index":536,"title":{},"body":{"modules/Web3Module.html":{}}}],["typeormmodule.forroot",{"_index":34,"title":{},"body":{"modules/AppModule.html":{}}}],["ui",{"_index":754,"title":{},"body":{"dependencies.html":{}}}],["unique",{"_index":336,"title":{},"body":{"classes/Message.html":{},"classes/User.html":{},"classes/Web3Transaction.html":{}}}],["unique('uq_name",{"_index":456,"title":{},"body":{"classes/User.html":{}}}],["unique('uq_tx_hash",{"_index":709,"title":{},"body":{"classes/Web3Transaction.html":{}}}],["unique('uq_user_channelid",{"_index":338,"title":{},"body":{"classes/Message.html":{}}}],["unit",{"_index":847,"title":{},"body":{"index.html":{}}}],["up",{"_index":799,"title":{},"body":{"index.html":{}}}],["update",{"_index":819,"title":{},"body":{"index.html":{}}}],["upswagger",{"_index":826,"title":{},"body":{"index.html":{}}}],["use",{"_index":136,"title":{},"body":{"injectables/CryptographyService.html":{},"injectables/IpfsService.html":{},"controllers/Web3Controller.html":{},"index.html":{}}}],["used",{"_index":107,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["user",{"_index":56,"title":{"classes/User.html":{}},"body":{"classes/CreateUserDto.html":{},"injectables/CryptographyService.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user.dto",{"_index":471,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":48,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:5",{"_index":58,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.name",{"_index":498,"title":{},"body":{"injectables/UsersService.html":{}}}],["userdto",{"_index":458,"title":{"classes/UserDto.html":{}},"body":{"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userrepository",{"_index":491,"title":{},"body":{"injectables/UsersService.html":{}}}],["users",{"_index":463,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":484,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.entity",{"_index":485,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["users.service",{"_index":474,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/users.module",{"_index":31,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":461,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":476,"title":{},"body":{"controllers/UsersController.html":{}}}],["usersmodule",{"_index":13,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":473,"title":{"injectables/UsersService.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":101,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["utf",{"_index":316,"title":{},"body":{"injectables/IpfsService.html":{}}}],["util",{"_index":596,"title":{},"body":{"injectables/Web3Service.html":{}}}],["v1",{"_index":786,"title":{},"body":{"index.html":{}}}],["v11.9.0",{"_index":777,"title":{},"body":{"index.html":{}}}],["v19",{"_index":779,"title":{},"body":{"index.html":{}}}],["valid",{"_index":281,"title":{},"body":{"injectables/IpfsService.html":{}}}],["valid/invalid",{"_index":193,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["validates",{"_index":187,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["validatesignature",{"_index":94,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["validatesignature(signature",{"_index":184,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["value",{"_index":863,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":727,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":860,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":781,"title":{},"body":{"index.html":{}}}],["via",{"_index":647,"title":{},"body":{"injectables/Web3Service.html":{}}}],["watch",{"_index":804,"title":{},"body":{"index.html":{}}}],["way",{"_index":572,"title":{},"body":{"injectables/Web3Service.html":{}}}],["we're",{"_index":365,"title":{},"body":{"controllers/MessagesController.html":{}}}],["web3",{"_index":506,"title":{},"body":{"controllers/Web3Controller.html":{},"classes/Web3Factory.html":{},"injectables/Web3Service.html":{},"dependencies.html":{}}}],["web3(new",{"_index":528,"title":{},"body":{"classes/Web3Factory.html":{}}}],["web3.constants",{"_index":598,"title":{},"body":{"injectables/Web3Service.html":{}}}],["web3.controller",{"_index":534,"title":{},"body":{"modules/Web3Module.html":{}}}],["web3.entity",{"_index":513,"title":{},"body":{"controllers/Web3Controller.html":{},"modules/Web3Module.html":{},"injectables/Web3Service.html":{}}}],["web3.factory",{"_index":535,"title":{},"body":{"modules/Web3Module.html":{},"injectables/Web3Service.html":{}}}],["web3.providers.websocketprovider(rpcurl",{"_index":529,"title":{},"body":{"classes/Web3Factory.html":{}}}],["web3.service",{"_index":514,"title":{},"body":{"controllers/Web3Controller.html":{},"modules/Web3Module.html":{}}}],["web3.utils.fromascii(content",{"_index":658,"title":{},"body":{"injectables/Web3Service.html":{}}}],["web3.utils.fromascii(signature",{"_index":659,"title":{},"body":{"injectables/Web3Service.html":{}}}],["web3.utils.toutf8(decoded[0",{"_index":630,"title":{},"body":{"injectables/Web3Service.html":{}}}],["web3.utils.toutf8(decoded[1",{"_index":631,"title":{},"body":{"injectables/Web3Service.html":{}}}],["web3.utils.toutf8(decoded[2",{"_index":632,"title":{},"body":{"injectables/Web3Service.html":{}}}],["web3/web3.configuration",{"_index":33,"title":{},"body":{"modules/AppModule.html":{}}}],["web3/web3.module",{"_index":383,"title":{},"body":{"modules/MessagesModule.html":{}}}],["web3/web3.service",{"_index":402,"title":{},"body":{"injectables/MessagesService.html":{}}}],["web3configuration",{"_index":32,"title":{},"body":{"modules/AppModule.html":{}}}],["web3constants",{"_index":597,"title":{},"body":{"injectables/Web3Service.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["web3controller",{"_index":504,"title":{"controllers/Web3Controller.html":{}},"body":{"controllers/Web3Controller.html":{},"modules/Web3Module.html":{},"coverage.html":{}}}],["web3factory",{"_index":522,"title":{"classes/Web3Factory.html":{}},"body":{"classes/Web3Factory.html":{},"modules/Web3Module.html":{},"injectables/Web3Service.html":{},"coverage.html":{}}}],["web3factory.getweb3(this.rpcurl",{"_index":614,"title":{},"body":{"injectables/Web3Service.html":{}}}],["web3module",{"_index":380,"title":{"modules/Web3Module.html":{}},"body":{"modules/MessagesModule.html":{},"modules/Web3Module.html":{},"modules.html":{},"overview.html":{}}}],["web3service",{"_index":391,"title":{"injectables/Web3Service.html":{}},"body":{"injectables/MessagesService.html":{},"controllers/Web3Controller.html":{},"modules/Web3Module.html":{},"injectables/Web3Service.html":{},"coverage.html":{},"overview.html":{}}}],["web3transaction",{"_index":512,"title":{"classes/Web3Transaction.html":{}},"body":{"controllers/Web3Controller.html":{},"modules/Web3Module.html":{},"injectables/Web3Service.html":{},"classes/Web3Transaction.html":{},"coverage.html":{}}}],["whats",{"_index":570,"title":{},"body":{"injectables/Web3Service.html":{}}}],["working",{"_index":780,"title":{},"body":{"index.html":{}}}],["yes",{"_index":430,"title":{},"body":{"injectables/MessagesService.html":{}}}],["zoom",{"_index":14,"title":{},"body":{"modules/AppModule.html":{},"modules/CryptographyModule.html":{},"modules/IpfsModule.html":{},"modules/MessagesModule.html":{},"modules/UsersModule.html":{},"modules/Web3Module.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nMessagesModule\n\nMessagesModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nMessagesModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            MessagesModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport ipfsConfiguration from './ipfs/ipfs.configuration';\nimport { MessagesModule } from './messages/messages.module';\nimport { UsersModule } from './users/users.module';\nimport web3Configuration from './web3/web3.configuration';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRoot(),\n    ConfigModule.forRoot({\n      isGlobal: true,\n      load: [ipfsConfiguration, web3Configuration],\n    }),\n    UsersModule,\n    MessagesModule,\n  ],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'User name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport default class CreateUserDto {\n  @ApiProperty({ description: 'User name' })\n  name: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CryptographyKeyPairDto.html":{"url":"classes/CryptographyKeyPairDto.html","title":"class - CryptographyKeyPairDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CryptographyKeyPairDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cryptography/dto/cryptography-keypair.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                privateKey\n                            \n                            \n                                publicKey\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            privateKey\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Buffer\n\n                        \n                    \n                        \n                            \n                                    Defined in src/cryptography/dto/cryptography-keypair.dto.ts:3\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            publicKey\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Buffer\n\n                        \n                    \n                        \n                            \n                                    Defined in src/cryptography/dto/cryptography-keypair.dto.ts:2\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CryptographyKeyPairDto {\n  publicKey: Buffer;\n  privateKey: Buffer;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CryptographyModule.html":{"url":"modules/CryptographyModule.html","title":"module - CryptographyModule","body":"\n                   \n\n\n\n\n    Modules\n    CryptographyModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CryptographyModule\n\n\n\ncluster_CryptographyModule_exports\n\n\n\ncluster_CryptographyModule_providers\n\n\n\n\nCryptographyService \n\nCryptographyService \n\n\n\nCryptographyModule\n\nCryptographyModule\n\nCryptographyService  -->\n\nCryptographyModule->CryptographyService \n\n\n\n\n\nCryptographyService\n\nCryptographyService\n\nCryptographyModule -->\n\nCryptographyService->CryptographyModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/cryptography/cryptography.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CryptographyService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CryptographyService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CryptographyService } from './cryptography.service';\n\n@Module({\n  providers: [CryptographyService],\n  exports: [CryptographyService],\n})\nexport class CryptographyModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CryptographyService.html":{"url":"injectables/CryptographyService.html","title":"injectable - CryptographyService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CryptographyService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cryptography/cryptography.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                decrypt\n                            \n                            \n                                    Async\n                                deriveSymmetricKeyfromSecret\n                            \n                            \n                                    Async\n                                encrypt\n                            \n                            \n                                    Async\n                                generateECDHSharedSecret\n                            \n                            \n                                    Async\n                                generateNonceBuffer\n                            \n                            \n                                    Async\n                                generateOneUseKeyPair\n                            \n                            \n                                    Async\n                                generateRandomBytes\n                            \n                            \n                                    Async\n                                generateRandomNumber\n                            \n                            \n                                    Async\n                                generateSHA256Hash\n                            \n                            \n                                    Async\n                                generateSignature\n                            \n                            \n                                    Async\n                                generateSigningKeyPair\n                            \n                            \n                                    Async\n                                validateSignature\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            decrypt\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    decrypt(data: Buffer, nonce: Buffer, key: Buffer)\n                \n            \n\n\n            \n                \n                    Defined in src/cryptography/cryptography.service.ts:150\n                \n            \n\n\n            \n                \n                    Decrypts data using a symmetric key and nonce\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        data buffer to be decrypted\n\n                                    \n                                \n                                \n                                    nonce\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        number used once - must not be reused or secret will be exposed\n\n                                    \n                                \n                                \n                                    key\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        symmetric key used to decrypt data\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        buffer containing decrypted data\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deriveSymmetricKeyfromSecret\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deriveSymmetricKeyfromSecret(secret: Buffer, nonce: number, context: string)\n                \n            \n\n\n            \n                \n                    Defined in src/cryptography/cryptography.service.ts:106\n                \n            \n\n\n            \n                \n                    Derives a symmetric key from secret\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    secret\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        input buffer containing key derivation secret\n\n                                    \n                                \n                                \n                                    nonce\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        number used once - must not be reused or secret will be exposed!\n\n                                    \n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        string describing context of key generation\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        buffer containing the derived 32-byte symmetric key\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            encrypt\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    encrypt(data: Buffer, nonce: Buffer, key: Buffer)\n                \n            \n\n\n            \n                \n                    Defined in src/cryptography/cryptography.service.ts:135\n                \n            \n\n\n            \n                \n                    Encrypts data using a symmetric key and nonce\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        data buffer to be encrypted\n\n                                    \n                                \n                                \n                                    nonce\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        number used once - must not be reused or secret will be exposed\n\n                                    \n                                \n                                \n                                    key\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        symmetric key used to encrypt data\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        buffer containing encrypted data\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            generateECDHSharedSecret\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    generateECDHSharedSecret(publicKey: Buffer, privateKey: Buffer)\n                \n            \n\n\n            \n                \n                    Defined in src/cryptography/cryptography.service.ts:51\n                \n            \n\n\n            \n                \n                    Generates an ECDH shared secret from one-use keys\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    publicKey\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        other party public one-use key\n\n                                    \n                                \n                                \n                                    privateKey\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        user private one-use key\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        sharedSecret buffer containing ECDH shared secret\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            generateNonceBuffer\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    generateNonceBuffer(nonce: number)\n                \n            \n\n\n            \n                \n                    Defined in src/cryptography/cryptography.service.ts:120\n                \n            \n\n\n            \n                \n                    Generates an 8-byte buffer from nonce\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    nonce\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        number passed in - either random 32-bit integer or counter\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        nonceBuffer padded noncebuffer suitable for use in chacha20 encryption/decryption\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            generateOneUseKeyPair\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    generateOneUseKeyPair()\n                \n            \n\n\n            \n                \n                    Defined in src/cryptography/cryptography.service.ts:31\n                \n            \n\n\n            \n                \n                    Generate a public and private one-use key pair (c25519)\nThis is used to perform Diffie-Hellman secret exchanges\nnot for signing!\n\n\n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        dto containing public and private key buffers\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            generateRandomBytes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    generateRandomBytes()\n                \n            \n\n\n            \n                \n                    Defined in src/cryptography/cryptography.service.ts:170\n                \n            \n\n\n            \n                \n                    Generates a random 32-byte buffer\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            generateRandomNumber\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    generateRandomNumber()\n                \n            \n\n\n            \n                \n                    Defined in src/cryptography/cryptography.service.ts:161\n                \n            \n\n\n            \n                \n                    Generates 32-bit random number\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            generateSHA256Hash\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    generateSHA256Hash(data: Buffer)\n                \n            \n\n\n            \n                \n                    Defined in src/cryptography/cryptography.service.ts:91\n                \n            \n\n\n            \n                \n                    Generates a SHA256 hash\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        input buffer to be hashed\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        buffer containing the 32-byte SHA-256 hash\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            generateSignature\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    generateSignature(data: Buffer, privateSigningKey: Buffer)\n                \n            \n\n\n            \n                \n                    Defined in src/cryptography/cryptography.service.ts:65\n                \n            \n\n\n            \n                \n                    Generates a digital signature of data using the private signing key\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        data to be signed\n\n                                    \n                                \n                                \n                                    privateSigningKey\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        key used to sign data\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        buffer containing signature\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            generateSigningKeyPair\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    generateSigningKeyPair()\n                \n            \n\n\n            \n                \n                    Defined in src/cryptography/cryptography.service.ts:11\n                \n            \n\n\n            \n                \n                    Generates a public and private signing key pair (ed25519)\n\n\n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        dto containing public and private key buffers\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateSignature\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateSignature(signature: Buffer, data: Buffer, publicSigningKey: Buffer)\n                \n            \n\n\n            \n                \n                    Defined in src/cryptography/cryptography.service.ts:80\n                \n            \n\n\n            \n                \n                    Validates a digital signature of data using the public signing key\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    signature\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        detached signature of data param\n\n                                    \n                                \n                                \n                                    data\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        data that has been signed\n\n                                    \n                                \n                                \n                                    publicSigningKey\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        public key of signing keypair used to sign data\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        boolean true/false if signature valid/invalid\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport SodiumNative from 'sodium-native';\nimport { CryptographyKeyPairDto } from './dto/cryptography-keypair.dto';\n\n@Injectable()\nexport class CryptographyService {\n  /**\n   * Generates a public and private signing key pair (ed25519)\n   * @returns dto containing public and private key buffers\n   */\n  async generateSigningKeyPair(): Promise {\n    const publicSigningKey: Buffer = SodiumNative.sodium_malloc(SodiumNative.crypto_sign_PUBLICKEYBYTES);\n    const privateSigningKey: Buffer = SodiumNative.sodium_malloc(SodiumNative.crypto_sign_SECRETKEYBYTES);\n\n    SodiumNative.crypto_sign_keypair(publicSigningKey, privateSigningKey);\n\n    const keyPair: CryptographyKeyPairDto = {\n      publicKey: publicSigningKey,\n      privateKey: privateSigningKey,\n    };\n\n    return keyPair;\n  }\n\n  /**\n   * Generate a public and private one-use key pair (c25519)\n   * This is used to perform Diffie-Hellman secret exchanges\n   * not for signing!\n   * @returns dto containing public and private key buffers\n   */\n  async generateOneUseKeyPair(): Promise {\n    const publicOneUseKey: Buffer = SodiumNative.sodium_malloc(SodiumNative.crypto_scalarmult_BYTES);\n    const privateOneUseKey: Buffer = SodiumNative.sodium_malloc(SodiumNative.crypto_scalarmult_SCALARBYTES);\n\n    SodiumNative.crypto_scalarmult_base(publicOneUseKey, privateOneUseKey);\n\n    const keyPair: CryptographyKeyPairDto = {\n      publicKey: publicOneUseKey,\n      privateKey: privateOneUseKey,\n    };\n\n    return keyPair;\n  }\n\n  /**\n   * Generates an ECDH shared secret from one-use keys\n   * @param publicKey other party public one-use key\n   * @param privateKey user private one-use key\n   * @returns sharedSecret buffer containing ECDH shared secret\n   */\n  async generateECDHSharedSecret(publicKey: Buffer, privateKey: Buffer): Promise {\n    const sharedSecret: Buffer = SodiumNative.sodium_malloc(SodiumNative.crypto_scalarmult_BYTES);\n\n    SodiumNative.crypto_scalarmult(sharedSecret, privateKey, publicKey);\n\n    return sharedSecret;\n  }\n\n  /**\n   * Generates a digital signature of data using the private signing key\n   * @param data data to be signed\n   * @param privateSigningKey key used to sign data\n   * @returns buffer containing signature\n   */\n  async generateSignature(data: Buffer, privateSigningKey: Buffer): Promise {\n    const signature: Buffer = SodiumNative.sodium_malloc(SodiumNative.crypto_sign_BYTES);\n\n    SodiumNative.crypto_sign_detached(signature, data, privateSigningKey);\n\n    return signature;\n  }\n\n  /**\n   * Validates a digital signature of data using the public signing key\n   * @param signature detached signature of data param\n   * @param data data that has been signed\n   * @param publicSigningKey public key of signing keypair used to sign data\n   * @returns boolean true/false if signature valid/invalid\n   */\n  async validateSignature(signature: Buffer, data: Buffer, publicSigningKey: Buffer): Promise {\n    const retval: boolean = SodiumNative.crypto_sign_verify_detached(signature, data, publicSigningKey);\n\n    return retval;\n  }\n\n  /**\n   * Generates a SHA256 hash\n   * @param data input buffer to be hashed\n   * @returns buffer containing the 32-byte SHA-256 hash\n   */\n  async generateSHA256Hash(data: Buffer): Promise {\n    const outputHash: Buffer = SodiumNative.sodium_malloc(SodiumNative.crypto_hash_sha256_BYTES);\n\n    SodiumNative.crypto_hash_sha256(outputHash, data);\n\n    return outputHash;\n  }\n\n  /**\n   * Derives a symmetric key from secret\n   * @param secret input buffer containing key derivation secret\n   * @param nonce number used once - must not be reused or secret will be exposed!\n   * @param context string describing context of key generation\n   * @returns buffer containing the derived 32-byte symmetric key\n   */\n  async deriveSymmetricKeyfromSecret(secret: Buffer, nonce: number, context: string): Promise {\n    const outputSymmetricKey: Buffer = SodiumNative.sodium_malloc(SodiumNative.crypto_kdf_KEYBYTES);\n    const keyContext: Buffer = Buffer.from(context);\n\n    SodiumNative.crypto_kdf_derive_from_key(outputSymmetricKey, nonce, keyContext, secret);\n\n    return outputSymmetricKey;\n  }\n\n  /**\n   * Generates an 8-byte buffer from nonce\n   * @param nonce number passed in - either random 32-bit integer or counter\n   * @returns nonceBuffer padded noncebuffer suitable for use in chacha20 encryption/decryption\n   */\n  async generateNonceBuffer(nonce: number): Promise {\n    const nonceBuffer = SodiumNative.sodium_malloc(SodiumNative.crypto_stream_chacha20_NONCEBYTES);\n\n    nonceBuffer.writeUInt32BE(nonce, 0);\n\n    return nonceBuffer;\n  }\n\n  /**\n   * Encrypts data using a symmetric key and nonce\n   * @param data data buffer to be encrypted\n   * @param nonce number used once - must not be reused or secret will be exposed\n   * @param key symmetric key used to encrypt data\n   * @returns buffer containing encrypted data\n   */\n  async encrypt(data: Buffer, nonce: Buffer, key: Buffer): Promise {\n    const encryptedData: Buffer = SodiumNative.sodium_malloc(data.length);\n\n    SodiumNative.crypto_stream_chacha20_xor(encryptedData, data, nonce, key);\n\n    return encryptedData;\n  }\n\n  /**\n   * Decrypts data using a symmetric key and nonce\n   * @param data data buffer to be decrypted\n   * @param nonce number used once - must not be reused or secret will be exposed\n   * @param key symmetric key used to decrypt data\n   * @returns buffer containing decrypted data\n   */\n  async decrypt(data: Buffer, nonce: Buffer, key: Buffer): Promise {\n    const decryptedData: Buffer = SodiumNative.sodium_malloc(data.length);\n\n    SodiumNative.crypto_stream_chacha20_xor(decryptedData, data, nonce, key);\n\n    return decryptedData;\n  }\n\n  /**\n   * Generates 32-bit random number\n   */\n  async generateRandomNumber(): Promise {\n    const retval = SodiumNative.randombytes_random();\n\n    return retval;\n  }\n\n  /**\n   * Generates a random 32-byte buffer\n   */\n  async generateRandomBytes(): Promise {\n    const retval = Buffer.alloc(32);\n    SodiumNative.randombytes_buf(retval);\n    return retval;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/IpfsController.html":{"url":"controllers/IpfsController.html","title":"controller - IpfsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  IpfsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/ipfs/ipfs.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                ipfs\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            get\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    get(path: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':path')\n                \n            \n\n            \n                \n                    Defined in src/ipfs/ipfs.controller.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            post\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    post(data: IpfsMessageDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/ipfs/ipfs.controller.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                IpfsMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Post } from '@nestjs/common';\nimport { IpfsMessageDto } from './dto/ipfs-message.dto';\nimport { IpfsService } from './ipfs.service';\n\n@Controller('ipfs')\nexport class IpfsController {\n  constructor(private readonly ipfsService: IpfsService) {}\n\n  @Get(':path')\n  async get(@Param('path') path: string): Promise {\n    return this.ipfsService.retrieve(path);\n  }\n\n  @Post()\n  async post(@Body() data: IpfsMessageDto): Promise {\n    return this.ipfsService.store(data);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IpfsMessageDto.html":{"url":"classes/IpfsMessageDto.html","title":"class - IpfsMessageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IpfsMessageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/ipfs/dto/ipfs-message.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                            \n                                from\n                            \n                            \n                                to\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            content\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'Content'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/ipfs/dto/ipfs-message.dto.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            from\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'From'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/ipfs/dto/ipfs-message.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            to\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'To'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/ipfs/dto/ipfs-message.dto.ts:8\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class IpfsMessageDto {\n  @ApiProperty({ description: 'From' })\n  from: string;\n\n  @ApiProperty({ description: 'To' })\n  to: string;\n\n  @ApiProperty({ description: 'Content' })\n  content: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/IpfsModule.html":{"url":"modules/IpfsModule.html","title":"module - IpfsModule","body":"\n                   \n\n\n\n\n    Modules\n    IpfsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_IpfsModule\n\n\n\ncluster_IpfsModule_exports\n\n\n\ncluster_IpfsModule_providers\n\n\n\n\nIpfsService \n\nIpfsService \n\n\n\nIpfsModule\n\nIpfsModule\n\nIpfsService  -->\n\nIpfsModule->IpfsService \n\n\n\n\n\nIpfsService\n\nIpfsService\n\nIpfsModule -->\n\nIpfsService->IpfsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/ipfs/ipfs.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            IpfsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            IpfsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            IpfsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { IpfsController } from './ipfs.controller';\nimport { IpfsService } from './ipfs.service';\n\n@Module({\n  imports: [ConfigModule],\n  providers: [IpfsService],\n  controllers: [IpfsController],\n  exports: [IpfsService],\n})\nexport class IpfsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/IpfsService.html":{"url":"injectables/IpfsService.html","title":"injectable - IpfsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  IpfsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/ipfs/ipfs.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                ipfs\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                retrieve\n                            \n                            \n                                    Async\n                                store\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/ipfs/ipfs.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            retrieve\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    retrieve(ipfsPath: string)\n                \n            \n\n\n            \n                \n                    Defined in src/ipfs/ipfs.service.ts:21\n                \n            \n\n\n            \n                \n                    Fetch a file from IPFS that is addressed by a valid IPFS Path.\nhttps://github.com/ipfs/interface-js-ipfs-core/blob/master/SPEC/FILES.md#get\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ipfsPath\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        IPFS Path\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            store\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    store(data: IpfsMessageDto)\n                \n            \n\n\n            \n                \n                    Defined in src/ipfs/ipfs.service.ts:31\n                \n            \n\n\n            \n                \n                    Add files and data to IPFS.\nhttps://github.com/ipfs/interface-js-ipfs-core/blob/master/SPEC/FILES.md#add\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                IpfsMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        data message to be added to IPFS\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            ipfs\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/ipfs/ipfs.service.ts:8\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport IpfsClient from 'ipfs-http-client';\nimport { IpfsMessageDto } from './dto/ipfs-message.dto';\n\n@Injectable()\nexport class IpfsService {\n  private readonly ipfs;\n  constructor(private readonly configService: ConfigService) {\n    const host = this.configService.get('ipfs.host');\n    const port = this.configService.get('ipfs.port');\n    const protocol = 'https';\n    this.ipfs = IpfsClient({ host, port, protocol });\n  }\n\n  /**\n   * Fetch a file from IPFS that is addressed by a valid IPFS Path.\n   * https://github.com/ipfs/interface-js-ipfs-core/blob/master/SPEC/FILES.md#get\n   * @param ipfsPath IPFS Path\n   */\n  async retrieve(ipfsPath: string): Promise {\n    const [file] = await this.ipfs.get(ipfsPath);\n    return JSON.parse(file.content.toString('utf8'));\n  }\n\n  /**\n   * Add files and data to IPFS.\n   * https://github.com/ipfs/interface-js-ipfs-core/blob/master/SPEC/FILES.md#add\n   * @param data data message to be added to IPFS\n   */\n  async store(data: IpfsMessageDto): Promise {\n    // this will perform badly with huge messages\n    // check later how to use streams\n    const stringData = JSON.stringify(data);\n    const bufferedData = Buffer.from(stringData, 'utf-8');\n    const [result] = await this.ipfs.add(bufferedData);\n    return result.path;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Message.html":{"url":"classes/Message.html","title":"class - Message","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Message\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/messages/messages.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                channelId\n                            \n                            \n                                content\n                            \n                            \n                                from\n                            \n                            \n                                id\n                            \n                            \n                                ipfsPath\n                            \n                            \n                                timestamp\n                            \n                            \n                                to\n                            \n                            \n                                txHash\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            channelId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/messages/messages.entity.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            content\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/messages/messages.entity.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            from\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/messages/messages.entity.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/messages/messages.entity.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ipfsPath\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/messages/messages.entity.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            timestamp\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/messages/messages.entity.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            to\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/messages/messages.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            txHash\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/messages/messages.entity.ts:25\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn, Unique } from 'typeorm';\n\n@Entity()\n@Unique('UQ_USER_CHANNELID', ['to', 'channelId'])\nexport class Message {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  timestamp: Date;\n\n  @Column()\n  from: string;\n\n  @Column()\n  to: string;\n\n  @Column()\n  content: string;\n\n  @Column()\n  ipfsPath: string;\n\n  @Column()\n  txHash: string;\n\n  @Column()\n  channelId: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MessagesController.html":{"url":"controllers/MessagesController.html","title":"controller - MessagesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MessagesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/messages/messages.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                messages\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getAllMessages\n                            \n                            \n                                    Async\n                                getMessages\n                            \n                            \n                                    Async\n                                sendMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getAllMessages\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllMessages()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/messages/messages.controller.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getMessages\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMessages(user: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:user')\n                \n            \n\n            \n                \n                    Defined in src/messages/messages.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            sendMessage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendMessage(message: SendMessageDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/messages/messages.controller.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                SendMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Post } from '@nestjs/common';\nimport SendMessageDto from './dto/send-message.dto';\nimport { Message } from './messages.entity';\nimport { MessagesService } from './messages.service';\n\n@Controller('messages')\nexport class MessagesController {\n  constructor(private readonly messagesService: MessagesService) {}\n  @Post()\n  async sendMessage(@Body() message: SendMessageDto): Promise {\n    await this.messagesService.sendMessage(message.from, message.to, message.channelId, message.content);\n  }\n\n  @Get()\n  async getAllMessages(): Promise {\n    return this.messagesService.findAll();\n  }\n\n  @Get('/:user')\n  async getMessages(@Param('user') user: string): Promise {\n    const messages: Message[] = [];\n    // TODO: for now we're just simulating a sequence of channel id\n    //       example: ['bob-1', 'bob-2', 'bob-3', ...]\n    let i = 1;\n    while (true) {\n      const message = await this.messagesService.findForUser(user, `${user}-${i++}`);\n      if (message) {\n        messages.push(message);\n      } else {\n        break;\n      }\n    }\n    return messages;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MessagesModule.html":{"url":"modules/MessagesModule.html","title":"module - MessagesModule","body":"\n                   \n\n\n\n\n    Modules\n    MessagesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MessagesModule\n\n\n\ncluster_MessagesModule_imports\n\n\n\ncluster_MessagesModule_providers\n\n\n\n\nIpfsModule\n\nIpfsModule\n\n\n\nMessagesModule\n\nMessagesModule\n\nMessagesModule -->\n\nIpfsModule->MessagesModule\n\n\n\n\n\nWeb3Module\n\nWeb3Module\n\nMessagesModule -->\n\nWeb3Module->MessagesModule\n\n\n\n\n\nMessagesService\n\nMessagesService\n\nMessagesModule -->\n\nMessagesService->MessagesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/messages/messages.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MessagesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MessagesController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            IpfsModule\n                        \n                        \n                            Web3Module\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { IpfsModule } from '../ipfs/ipfs.module';\nimport { Web3Module } from '../web3/web3.module';\nimport { MessagesController } from './messages.controller';\nimport { Message } from './messages.entity';\nimport { MessagesService } from './messages.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Message]), IpfsModule, Web3Module],\n  controllers: [MessagesController],\n  providers: [MessagesService],\n})\nexport class MessagesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MessagesService.html":{"url":"injectables/MessagesService.html","title":"injectable - MessagesService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  MessagesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/messages/messages.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findForUser\n                            \n                            \n                                    Async\n                                sendMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(messageRepository: Repository, ipfsService: IpfsService, web3Service: Web3Service)\n                    \n                \n                        \n                            \n                                Defined in src/messages/messages.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        messageRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        ipfsService\n                                                  \n                                                        \n                                                                        IpfsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        web3Service\n                                                  \n                                                        \n                                                                        Web3Service\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/messages/messages.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findForUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findForUser(user: string, channelId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/messages/messages.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    channelId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            sendMessage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendMessage(from: string, to: string, channelId: string, content: string)\n                \n            \n\n\n            \n                \n                    Defined in src/messages/messages.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    from\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    to\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    channelId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    content\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { IpfsService } from '../ipfs/ipfs.service';\nimport { Web3Service } from '../web3/web3.service';\nimport { Message } from './messages.entity';\n\n@Injectable()\nexport class MessagesService {\n  constructor(\n    @InjectRepository(Message)\n    private readonly messageRepository: Repository,\n    private readonly ipfsService: IpfsService,\n    private readonly web3Service: Web3Service,\n  ) {}\n\n  async sendMessage(from: string, to: string, channelId: string, content: string): Promise {\n    const ipfsPath: string = await this.ipfsService.store({\n      to,\n      from,\n      content,\n    });\n    Logger.debug(ipfsPath);\n    const txHash: string = await this.web3Service.broadcastNotification(channelId, ipfsPath, '');\n    Logger.debug(txHash);\n\n    const message = new Message();\n    message.timestamp = new Date();\n    message.from = from;\n    message.to = to;\n    message.content = content;\n    message.ipfsPath = ipfsPath;\n    message.txHash = txHash;\n    message.channelId = channelId;\n    // TODO: need to rethink this part\n    // await this.messageRepository.save(message);\n  }\n\n  async findAll(): Promise {\n    return await this.messageRepository.find();\n  }\n\n  async findForUser(user: string, channelId: string): Promise {\n    // getting messages for alice\n    // calculate next channelId\n\n    // check if message is already in the repository\n    let message = await this.messageRepository.findOne({\n      where: { to: user, channelId },\n    });\n    if (message) {\n      return message;\n    }\n\n    // given message is not in the repository, check if received transactions contain the channel id\n    // if not, simply return nothing\n    // if yes, extract the message and save it in the repository\n    const tx = await this.web3Service.getTransactionByChannelId(channelId);\n    if (!tx) {\n      return null;\n    }\n\n    const storedMessage = await this.ipfsService.retrieve(tx.content);\n    message = new Message();\n    message.from = storedMessage.from;\n    message.to = storedMessage.to;\n    message.content = storedMessage.content;\n    message.ipfsPath = tx.content;\n    message.txHash = tx.txHash;\n    message.channelId = channelId;\n    message.timestamp = tx.createdDate;\n    await this.messageRepository.save(message);\n\n    return this.messageRepository.findOne({ where: { channelId } });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SendMessageDto.html":{"url":"classes/SendMessageDto.html","title":"class - SendMessageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SendMessageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/messages/dto/send-message.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                channelId\n                            \n                            \n                                content\n                            \n                            \n                                from\n                            \n                            \n                                to\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            channelId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'Channel ID'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/messages/dto/send-message.dto.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            content\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'Content'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/messages/dto/send-message.dto.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            from\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'From'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/messages/dto/send-message.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            to\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'To'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/messages/dto/send-message.dto.ts:8\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport default class SendMessageDto {\n  @ApiProperty({ description: 'From' })\n  from: string;\n\n  @ApiProperty({ description: 'To' })\n  to: string;\n\n  @ApiProperty({ description: 'Content' })\n  content: string;\n\n  // TODO: for now exposing the channel id for simplicity; this will be calculated internally in the future\n  @ApiProperty({ description: 'Channel ID' })\n  channelId: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/users.entity.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 500})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/users.entity.ts:10\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn, Unique } from 'typeorm';\n\n@Entity()\n@Unique('UQ_NAME', ['name'])\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ length: 500 })\n  name: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserDto.html":{"url":"classes/UserDto.html","title":"class - UserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'User name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/user.dto.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport default class UserDto {\n  @ApiProperty({ description: 'User name' })\n  name: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                get\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(user: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            get\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    get(name: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post, Query } from '@nestjs/common';\nimport CreateUserDto from './dto/create-user.dto';\nimport UserDto from './dto/user.dto';\nimport { UsersService } from './users.service';\n\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly userService: UsersService) {}\n\n  @Post()\n  async create(@Body() user: CreateUserDto): Promise {\n    this.userService.create(user);\n  }\n\n  @Get()\n  async get(@Query('name') name: string): Promise {\n    return this.userService.findByName(name);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService\n\nUsersService\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UsersController } from './users.controller';\nimport { User } from './users.entity';\nimport { UsersService } from './users.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  providers: [UsersService],\n  controllers: [UsersController],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findByName\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(user: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findByName\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findByName(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport CreateUserDto from './dto/create-user.dto';\nimport UserDto from './dto/user.dto';\nimport { User } from './users.entity';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(User)\n    private readonly userRepository: Repository,\n  ) {}\n\n  async create(user: CreateUserDto): Promise {\n    const newUser = new User();\n    newUser.name = user.name;\n    // newUser.privateKey = this.cryptographyService.generatePrivateKey()\n    await this.userRepository.save(newUser);\n  }\n\n  async findByName(name: string): Promise {\n    return this.userRepository.findOne({\n      select: ['name'],\n      where: { name },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/Web3Controller.html":{"url":"controllers/Web3Controller.html","title":"controller - Web3Controller","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  Web3Controller\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/web3/web3.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                web3\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            get\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    get()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/web3/web3.controller.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            post\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    post(channelId: string, content: string, signature: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':channel-id/:content/:signature')\n                \n            \n\n            \n                \n                    Defined in src/web3/web3.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    channelId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    content\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    signature\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, Post } from '@nestjs/common';\nimport { Web3Transaction } from './web3.entity';\nimport { Web3Service } from './web3.service';\n\n@Controller('web3')\nexport class Web3Controller {\n  constructor(private readonly web3Service: Web3Service) {}\n\n  @Get()\n  async get(): Promise {\n    return this.web3Service.getAll();\n  }\n\n  // TODO: do not be lazy and use a proper dto\n  @Post(':channel-id/:content/:signature')\n  async post(\n    @Param('channel-id') channelId: string,\n    @Param('content') content: string,\n    @Param('signature') signature: string,\n  ): Promise {\n    return this.web3Service.broadcastNotification(channelId, content, signature);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Web3Factory.html":{"url":"classes/Web3Factory.html","title":"class - Web3Factory","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Web3Factory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/web3/web3.factory.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getWeb3\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getWeb3\n                        \n                        \n                    \n                \n            \n            \n                \ngetWeb3(rpcUrl: string)\n                \n            \n\n\n            \n                \n                    Defined in src/web3/web3.factory.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    rpcUrl\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Web3\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import Web3 from 'web3';\n\nexport class Web3Factory {\n  getWeb3(rpcUrl: string): Web3 {\n    return new Web3(new Web3.providers.WebsocketProvider(rpcUrl));\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/Web3Module.html":{"url":"modules/Web3Module.html","title":"module - Web3Module","body":"\n                   \n\n\n\n\n    Modules\n    Web3Module\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_Web3Module\n\n\n\ncluster_Web3Module_exports\n\n\n\ncluster_Web3Module_providers\n\n\n\n\nWeb3Service \n\nWeb3Service \n\n\n\nWeb3Module\n\nWeb3Module\n\nWeb3Service  -->\n\nWeb3Module->Web3Service \n\n\n\n\n\nWeb3Service\n\nWeb3Service\n\nWeb3Module -->\n\nWeb3Service->Web3Module\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/web3/web3.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            Web3Service\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            Web3Controller\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            Web3Service\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Web3Controller } from './web3.controller';\nimport { Web3Transaction } from './web3.entity';\nimport { Web3Factory } from './web3.factory';\nimport { Web3Service } from './web3.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Web3Transaction]), ConfigModule],\n  controllers: [Web3Controller],\n  providers: [Web3Service, Web3Factory],\n  exports: [Web3Service],\n})\nexport class Web3Module {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/Web3Service.html":{"url":"injectables/Web3Service.html","title":"injectable - Web3Service","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  Web3Service\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/web3/web3.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                address\n                            \n                            \n                                    Private\n                                    Readonly\n                                chain\n                            \n                            \n                                    Private\n                                    Readonly\n                                contractAddress\n                            \n                            \n                                    Private\n                                    Readonly\n                                hardfork\n                            \n                            \n                                    Private\n                                    Readonly\n                                privateKey\n                            \n                            \n                                    Private\n                                    Readonly\n                                publicKey\n                            \n                            \n                                    Private\n                                    Readonly\n                                rpcUrl\n                            \n                            \n                                    Private\n                                    Readonly\n                                web3\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                broadcastNotification\n                            \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getTransactionByChannelId\n                            \n                            \n                                    Async\n                                getTransactionCount\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                            \n                                    Async\n                                sendSignerTransaction\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(transactionsRepository: Repository, configService: ConfigService, web3Factory: Web3Factory)\n                    \n                \n                        \n                            \n                                Defined in src/web3/web3.service.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        transactionsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        web3Factory\n                                                  \n                                                        \n                                                                        Web3Factory\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            broadcastNotification\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    broadcastNotification(channelId: string, content: string, signature: string)\n                \n            \n\n\n            \n                \n                    Defined in src/web3/web3.service.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    channelId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    content\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    signature\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n\n            \n                \n                    Defined in src/web3/web3.service.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTransactionByChannelId\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTransactionByChannelId(channelId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/web3/web3.service.ts:101\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    channelId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTransactionCount\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTransactionCount(account: string)\n                \n            \n\n\n            \n                \n                    Defined in src/web3/web3.service.ts:139\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    account\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            onModuleInit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/web3/web3.service.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            sendSignerTransaction\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendSignerTransaction(raw: string)\n                \n            \n\n\n            \n                \n                    Defined in src/web3/web3.service.ts:145\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    raw\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            address\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/web3/web3.service.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            chain\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/web3/web3.service.ts:32\n                            \n                        \n\n                \n                    \n                        Probably need to create a deploy contract method or check with the gurus whats the best way to deal with it.\nFor now, this was deployed in Ropsen: 0x5b821362887db76980399bf4206ba747bef7ad95\n   pragma solidity >=0.4.22 \n   event NotifyNewMessage(string messageUid);\n\n   function notify(string memory messageUid) public {\n       emit NotifyNewMessage(messageUid);\n   }   }\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            contractAddress\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/web3/web3.service.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            hardfork\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/web3/web3.service.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            privateKey\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/web3/web3.service.ts:37\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            publicKey\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/web3/web3.service.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            rpcUrl\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/web3/web3.service.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            web3\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/web3/web3.service.ts:39\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Transaction as Tx } from 'ethereumjs-tx';\nimport { bufferToHex } from 'ethereumjs-util';\nimport Web3 from 'web3';\n\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Web3Constants } from './web3.constants';\nimport { Web3Transaction } from './web3.entity';\nimport { Web3Factory } from './web3.factory';\n\n@Injectable()\nexport class Web3Service {\n  /**\n   * Probably need to create a deploy contract method or check with the gurus whats the best way to deal with it.\n   * For now, this was deployed in Ropsen: 0x5b821362887db76980399bf4206ba747bef7ad95\n   *\n   *   pragma solidity >=0.4.22 ,\n    private readonly configService: ConfigService,\n    private readonly web3Factory: Web3Factory,\n  ) {\n    this.chain = this.configService.get('web3.chain');\n    this.hardfork = this.configService.get('web3.hardfork');\n    this.rpcUrl = this.configService.get('web3.rpcUrl');\n    this.contractAddress = this.configService.get('web3.contractAddress');\n    this.address = this.configService.get('web3.broadcastAccount.address');\n    this.publicKey = this.configService.get('web3.broadcastAccount.publicKey');\n    this.privateKey = this.configService.get('web3.broadcastAccount.privateKey');\n    this.web3 = web3Factory.getWeb3(this.rpcUrl);\n  }\n\n  async onModuleInit(): Promise {\n    const options = {\n      fromBlock: 0,\n      address: this.contractAddress,\n    };\n    this.web3.eth\n      .subscribe('logs', options, (error, result) => {\n        if (error) {\n          Logger.error(result);\n        }\n      })\n      .on('data', async log => {\n        const transactionHash = log.transactionHash;\n        Logger.debug(`Received raw event: '${JSON.stringify(log, null, 2)}'`, transactionHash);\n        const decoded = this.web3.eth.abi.decodeParameters(['string', 'string', 'string'], log.data);\n        const channelId = Web3.utils.toUtf8(decoded[0]);\n        const content = Web3.utils.toUtf8(decoded[1]);\n        const signature = Web3.utils.toUtf8(decoded[2]);\n        Logger.debug(`parsed channelId='${channelId}'`, transactionHash);\n        Logger.debug(`parsed   content='${content}'`, transactionHash);\n        Logger.debug(`parsed signature='${signature}'`, transactionHash);\n        let tx = await this.transactionsRepository.findOne({\n          txHash: transactionHash,\n        });\n        if (!tx) {\n          tx = new Web3Transaction();\n        }\n        tx.txHash = transactionHash;\n        tx.channelId = channelId;\n        tx.content = content;\n        tx.signature = signature;\n        tx.status = 'confirmed';\n        await this.transactionsRepository.save(tx);\n      })\n      .on('changed', log => {\n        Logger.debug(log);\n      });\n    Logger.debug(`Subcribed logs from ${this.contractAddress} via ${this.rpcUrl}`);\n  }\n\n  async getAll(): Promise {\n    return this.transactionsRepository.find();\n  }\n\n  async getTransactionByChannelId(channelId: string): Promise {\n    return this.transactionsRepository.findOne({ where: { channelId } });\n  }\n\n  async broadcastNotification(channelId: string, content: string, signature: string): Promise {\n    const txCount = await this.getTransactionCount(this.address);\n    Logger.debug(`TransactionCount: ${txCount}`);\n    const bufferedPrivateKey = Buffer.from(this.privateKey, 'hex');\n    const contract = new this.web3.eth.Contract(Web3Constants.abi, this.contractAddress);\n    const data = contract.methods\n      .notify(Web3.utils.fromAscii(channelId), Web3.utils.fromAscii(content), Web3.utils.fromAscii(signature))\n      .encodeABI();\n    const txObject = {\n      nonce: this.web3.utils.toHex(txCount),\n      gasLimit: this.web3.utils.toHex(800000),\n      gasPrice: this.web3.utils.toHex(this.web3.utils.toWei('15', 'gwei')),\n      to: this.contractAddress,\n      data,\n    };\n\n    const tx = new Tx(txObject, { chain: this.chain, hardfork: this.hardfork });\n    if (!(tx.validate() && bufferToHex(tx.getSenderAddress()) === this.address)) {\n      // TODO: need to dig why this fails while transaction gets executed and mined successfully\n      // throw Error('Invalid transaction');\n    }\n\n    tx.sign(bufferedPrivateKey);\n\n    Logger.debug(tx);\n\n    const serializedTx = tx.serialize();\n    const raw = '0x' + serializedTx.toString('hex');\n\n    const txHash = await this.sendSignerTransaction(raw);\n    await this.transactionsRepository.save({ txHash, status: 'pending' });\n    return txHash;\n  }\n\n  async getTransactionCount(account: string) {\n    return new Promise(async (resolve, reject) => {\n      this.web3.eth.getTransactionCount(account, (err, txCount) => (err ? reject(`${err}`) : resolve(txCount)));\n    });\n  }\n\n  async sendSignerTransaction(raw: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      this.web3.eth.sendSignedTransaction(raw, (err, txHash) => (err ? reject(`${err}`) : resolve(txHash)));\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Web3Transaction.html":{"url":"classes/Web3Transaction.html","title":"class - Web3Transaction","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Web3Transaction\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/web3/web3.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                channelId\n                            \n                            \n                                    Optional\n                                content\n                            \n                            \n                                createdDate\n                            \n                            \n                                id\n                            \n                            \n                                    Optional\n                                signature\n                            \n                            \n                                status\n                            \n                            \n                                txHash\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            channelId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/web3/web3.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            content\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/web3/web3.entity.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/web3/web3.entity.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/web3/web3.entity.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            signature\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/web3/web3.entity.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/web3/web3.entity.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            txHash\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/web3/web3.entity.ts:10\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, CreateDateColumn, Entity, PrimaryGeneratedColumn, Unique } from 'typeorm';\n\n@Entity()\n@Unique('UQ_TX_HASH', ['txHash'])\nexport class Web3Transaction {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  txHash: string;\n\n  @Column()\n  status: string;\n\n  @Column({ nullable: true })\n  channelId?: string;\n\n  @Column({ nullable: true })\n  content?: string;\n\n  @Column({ nullable: true })\n  signature?: string;\n\n  @CreateDateColumn()\n  createdDate: Date;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/cryptography/cryptography.service.ts\n            \n            injectable\n            CryptographyService\n            \n                92 %\n                (12/13)\n            \n        \n        \n            \n                \n                src/cryptography/dto/cryptography-keypair.dto.ts\n            \n            class\n            CryptographyKeyPairDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/ipfs/dto/ipfs-message.dto.ts\n            \n            class\n            IpfsMessageDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/ipfs/ipfs.controller.ts\n            \n            controller\n            IpfsController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/ipfs/ipfs.service.ts\n            \n            injectable\n            IpfsService\n            \n                40 %\n                (2/5)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/messages/dto/send-message.dto.ts\n            \n            class\n            SendMessageDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/messages/messages.controller.ts\n            \n            controller\n            MessagesController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/messages/messages.entity.ts\n            \n            class\n            Message\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/messages/messages.service.ts\n            \n            injectable\n            MessagesService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dto/user.dto.ts\n            \n            class\n            UserDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/users.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/web3/web3.constants.ts\n            \n            variable\n            Web3Constants\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/web3/web3.controller.ts\n            \n            controller\n            Web3Controller\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/web3/web3.entity.ts\n            \n            class\n            Web3Transaction\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/web3/web3.factory.ts\n            \n            class\n            Web3Factory\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/web3/web3.service.ts\n            \n            injectable\n            Web3Service\n            \n                6 %\n                (1/16)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^6.7.2\n        \n            @nestjs/config : 0.0.9\n        \n            @nestjs/core : ^6.7.2\n        \n            @nestjs/platform-express : ^6.7.2\n        \n            @nestjs/swagger : ^4.1.7\n        \n            @nestjs/typeorm : ^6.2.0\n        \n            ethereumjs-tx : ^2.1.2\n        \n            ipfs-http-client : ^40.2.1\n        \n            pg : ^7.17.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.0\n        \n            rxjs : ^6.5.3\n        \n            sodium-native : ^2.4.6\n        \n            swagger-ui-express : ^4.1.2\n        \n            typeorm : ^0.2.22\n        \n            web3 : ^1.2.4\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nDescription\nProject Ekho - peer-to-peer communication module.\nCheck detailed documentation.\nInstallation\n$ npm installConfiguration\n# .env contents\nIPFS_HOST=ipfs.infura.io\nIPFS_PORT=5001Running the app\nRequirements\n\nnode v11.9.0\ndocker v19 (working with Docker version 19.03.5, build 633a0ea838)\ndocker-compose v1 (working with docker-compose version 1.22.0, build f46880fe)\n\n# to use the correct node version\nnvm use v11.9.0\n\n# or as of now (2020/01/15), stable version points to v11.9.0\nnvm use stableDevelopment mode\n# make sure the databse is up and running\n$ docker-compose up\n\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodSwagger endpoint should be accessible: http://localhost:3000/api/#\nProd mode - single node\n# use docker-compose-single-node\n# 1) brings up postgres db\n# 2) brings up ekho instance\n$ docker-compose -f docker-compose-single-node.yml up\n\n# to update existing containers with new code, rebuild new images\n$ docker-compose -f docker-compose-single-node.yml down\n$ docker-compose -f docker-compose-single-node.yml build\n$ docker-compose -f docker-compose-single-node.yml upSwagger endpoint should be accessible: http://localhost:3000/api/#\nProd mode - dual node\n# use docker-compose-dual-node\n# 1) brings up postgres db1 and ekho1 in network1\n# 2) brings up postgres db2 and ekho2 in network2\n# Note: instance 1 and 2 are isolated by different networks\n$ docker-compose -f docker-compose-dual-node.yml up\n\n# to update existing containers with new code, rebuild new images\n$ docker-compose -f docker-compose-dual-node.yml down\n$ docker-compose -f docker-compose-dual-node.yml build\n$ docker-compose -f docker-compose-dual-node.yml upSwagger endpoints should be accessible:\n\nhttp://localhost:3100/api/#\nhttp://localhost:3200/api/#\n\nNote: single and dual node can run simultaneosly, producing 3 separate instances locally\nTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:cov\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CryptographyModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        IpfsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MessagesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        Web3Module\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_CryptographyModule\n\n\n\ncluster_CryptographyModule_exports\n\n\n\ncluster_CryptographyModule_providers\n\n\n\ncluster_IpfsModule\n\n\n\ncluster_IpfsModule_exports\n\n\n\ncluster_IpfsModule_providers\n\n\n\ncluster_MessagesModule\n\n\n\ncluster_MessagesModule_imports\n\n\n\ncluster_MessagesModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_Web3Module\n\n\n\ncluster_Web3Module_exports\n\n\n\ncluster_Web3Module_providers\n\n\n\n\nMessagesModule\n\nMessagesModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nMessagesModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nCryptographyService \n\nCryptographyService \n\n\n\nCryptographyModule\n\nCryptographyModule\n\nCryptographyService  -->\n\nCryptographyModule->CryptographyService \n\n\n\n\n\nCryptographyService\n\nCryptographyService\n\nCryptographyModule -->\n\nCryptographyService->CryptographyModule\n\n\n\n\n\nIpfsService \n\nIpfsService \n\n\n\nIpfsModule\n\nIpfsModule\n\nMessagesModule -->\n\nIpfsModule->MessagesModule\n\n\n\nIpfsService  -->\n\nIpfsModule->IpfsService \n\n\n\n\n\nIpfsService\n\nIpfsService\n\nIpfsModule -->\n\nIpfsService->IpfsModule\n\n\n\n\n\nWeb3Module\n\nWeb3Module\n\nMessagesModule -->\n\nWeb3Module->MessagesModule\n\n\n\n\n\nWeb3Service \n\nWeb3Service \n\nWeb3Service  -->\n\nWeb3Module->Web3Service \n\n\n\n\n\nMessagesService\n\nMessagesService\n\nMessagesModule -->\n\nMessagesService->MessagesModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\nWeb3Service\n\nWeb3Service\n\nWeb3Module -->\n\nWeb3Service->Web3Module\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    9 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Web3Constants   (src/.../web3.constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/web3/web3.constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Web3Constants\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  abi: [\n    {\n      anonymous: false,\n      inputs: [\n        {\n          indexed: false,\n          internalType: 'string',\n          name: 'channelId',\n          type: 'string',\n        },\n        {\n          indexed: false,\n          internalType: 'string',\n          name: 'content',\n          type: 'string',\n        },\n        {\n          indexed: false,\n          internalType: 'string',\n          name: 'signature',\n          type: 'string',\n        },\n      ],\n      name: 'NotifyNewMessage',\n      type: 'event',\n    },\n    {\n      constant: false,\n      inputs: [\n        {\n          internalType: 'string',\n          name: 'channelId',\n          type: 'string',\n        },\n        {\n          internalType: 'string',\n          name: 'content',\n          type: 'string',\n        },\n        {\n          internalType: 'string',\n          name: 'signature',\n          type: 'string',\n        },\n      ],\n      name: 'notify',\n      outputs: [],\n      payable: false,\n      stateMutability: 'nonpayable',\n      type: 'function',\n    },\n  ],\n}\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
