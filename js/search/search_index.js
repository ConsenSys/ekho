var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/interfaces/AnonKeySet.html",[0,1.276,1,2.341]],["body/interfaces/AnonKeySet.html",[0,2.068,1,3.241,2,1.529,3,0.084,4,0.084,5,0.072,6,1.876,7,1.876,8,1.774,9,0.198,10,1.129,11,4.454,12,4.454,13,3.657,14,0.31,15,0.014,16,0.213,17,2.448,18,1.991,19,1.991,20,1.876,21,0.178,22,3.588,23,2.127,24,2.742,25,0.719,26,1.876,27,4.195,28,2.464,29,1.876,30,3.793,31,3.793,32,4.027,33,3.066,34,4.206,35,1.841,36,3.441,37,3.441,38,2.127,39,2.127,40,2.127,41,2.127,42,2.91,43,1.876,44,2.448,45,3.441,46,1.991,47,1.457,48,3.565,49,1.876,50,2.127,51,1.161,52,2.127,53,1.991,54,2.127,55,2.454,56,1.876,57,2.91,58,1.991,59,3.066,60,3.565,61,3.372,62,3.785,63,3.785,64,2.742,65,1.991,66,1.622,67,1.991,68,1.991,69,1.442,70,1.991,71,1.991,72,1.462,73,1.876,74,2.405,75,2.594,76,2.911,77,3.066,78,3.241,79,3.565,80,3.241,81,1.462,82,1.767,83,3.441,84,1.882,85,3.441,86,1.991,87,2.911,88,2.236,89,0.005,90,0.008,91,0.005]],["title/modules/AppModule.html",[92,1.144,93,2.857]],["body/modules/AppModule.html",[3,0.116,4,0.116,5,0.099,15,0.014,16,0.368,21,0.116,82,1.866,89,0.007,90,0.01,91,0.007,92,1.878,93,5.861,94,1.769,95,1.843,96,2.008,97,2.008,98,1.843,99,1.922,100,2.008,101,3.798,102,3.798,103,4.968,104,4.47,105,4.968,106,3.934,107,4.968,108,4.229,109,2.667,110,2.008,111,2.008,112,4.367,113,2.925,114,1.131,115,4.367,116,2.921,117,4.367,118,2.735,119,2.576,120,2.008,121,4.367,122,3.424,123,4.367,124,5.8,125,4.367,126,5.8,127,2.667,128,4.367,129,2.921,130,4.367,131,3.145,132,5.8,133,4.367,134,4.367,135,4.367,136,4.367,137,3.073,138,4.367,139,4.367,140,4.367,141,4.367,142,4.367,143,4.367,144,0.174]],["title/classes/Block.html",[144,0.158,145,2.214]],["body/classes/Block.html",[3,0.137,4,0.137,5,0.118,9,0.323,10,1.21,14,0.493,15,0.014,16,0.296,21,0.137,72,2.382,89,0.009,90,0.011,91,0.009,137,3.43,144,0.206,145,3.614,146,1.081,147,4.505,148,6.145,149,5.803,150,1.765,151,3.921,152,1.271,153,4.505,154,6.475,155,0.736,156,5.179,157,1.602,158,3.742,159,5.179,160,3.742,161,5.179,162,3.43,163,4.332,164,3.73,165,2.015,166,5.179,167,5.179,168,3.465,169,5.179]],["title/interfaces/BroadcastAccountConfig.html",[0,1.276,170,2.654]],["body/interfaces/BroadcastAccountConfig.html",[0,2.135,2,2.182,3,0.12,4,0.12,5,0.103,9,0.283,10,1.111,14,0.442,15,0.014,21,0.186,25,0.761,55,1.913,69,1.018,89,0.008,90,0.01,91,0.008,170,4.439,171,3.034,172,5.021,173,3.976,174,3.61,175,1.308,176,3.915,177,3.915,178,3.556,179,3.266,180,4.439,181,3.556,182,3.556,183,4.439,184,3.556,185,4.439,186,3.556,187,4.779,188,3.556,189,3.556,190,3.556,191,4.157,192,3.979,193,3.979,194,4.283,195,2.676,196,3.266,197,3.266,198,3.266,199,3.266,200,3.266,201,3.266,202,3.266,203,3.034,204,4.081]],["title/classes/Channel.html",[144,0.158,205,1.324]],["body/classes/Channel.html",[3,0.13,4,0.13,5,0.112,9,0.307,10,1.172,14,0.512,15,0.014,16,0.316,21,0.13,25,0.685,72,2.265,89,0.008,90,0.011,91,0.008,144,0.196,146,1.028,150,1.875,152,1.308,155,0.757,157,1.358,158,3.657,160,3.323,162,3.323,163,4.197,165,1.917,205,2.094,206,4.285,207,5.413,208,4.618,209,1.339,210,4.197,211,4.926,212,3.528,213,4.926,214,4.926,215,3.295,216,4.926,217,4.926,218,2.796,219,3.93,220,1.707,221,4.285,222,3.93,223,4.926]],["title/classes/ChannelDto.html",[144,0.158,224,3.111]],["body/classes/ChannelDto.html",[3,0.136,4,0.136,5,0.117,9,0.32,10,1.202,14,0.492,15,0.014,16,0.295,21,0.136,25,0.695,82,2.07,89,0.009,90,0.011,91,0.009,144,0.204,146,1.07,150,1.898,152,1.266,155,0.732,157,1.393,175,1.479,205,2.588,207,5.515,209,1.473,218,2.987,220,1.777,224,5.046,225,4.461,226,4.149,227,5.129,228,5.129,229,5.129,230,3.112,231,1.996,232,3.409,233,2.437]],["title/classes/ChannelMember.html",[144,0.158,212,1.824]],["body/classes/ChannelMember.html",[3,0.105,4,0.105,5,0.09,9,0.247,10,1.014,14,0.524,15,0.014,16,0.33,21,0.105,25,0.628,72,1.82,89,0.007,90,0.009,91,0.007,144,0.158,146,0.826,150,1.745,152,1.33,153,3.443,155,0.769,157,1.175,158,3.282,160,2.876,162,2.876,163,3.631,165,1.54,205,2.548,209,1.201,210,3.631,212,2.496,215,2.648,218,2.509,219,3.4,220,1.372,222,4.376,234,3.443,235,5.389,236,2.748,237,4.461,238,5.389,239,1.977,240,4.858,241,5.389,242,2.611,243,3.958,244,4.257,245,3.958,246,3.4,247,3.958,248,3.958,249,3.958,250,3.958,251,2.876,252,3.958,253,5.227,254,4.8,255,2.648,256,2.097,257,3.958,258,3.958,259,3.958,260,3.958,261,3.958,262,3.958]],["title/classes/ChannelMemberDto.html",[144,0.158,263,3.111]],["body/classes/ChannelMemberDto.html",[3,0.117,4,0.117,5,0.101,9,0.276,10,1.094,14,0.497,15,0.014,16,0.332,21,0.117,25,0.552,82,1.884,89,0.007,90,0.01,91,0.007,144,0.177,146,0.925,150,1.9,152,1.306,155,0.756,157,1.267,175,1.278,177,3.455,205,2.633,218,2.372,220,1.535,222,4.11,226,2.614,230,3.147,231,1.724,232,3.103,233,2.515,236,2.812,237,4.724,239,2.023,255,2.964,256,2.347,263,4.592,264,3.854,265,2.234,266,3.429,267,4.431,268,6.56,269,4.431,270,4.217,271,4.431,272,2.191,273,4.431,274,4.431,275,3.191]],["title/classes/ChannelMembersResolver.html",[144,0.158,276,2.857]],["body/classes/ChannelMembersResolver.html",[3,0.112,4,0.112,5,0.097,9,0.265,14,0.477,15,0.014,16,0.337,21,0.112,35,1.907,47,1.548,51,1.422,66,2.079,69,1.441,81,3.562,89,0.007,90,0.01,91,0.007,118,2.659,144,0.169,146,0.886,152,1.156,155,0.714,209,1.33,212,3.29,220,1.471,236,2.651,239,2.044,255,2.839,256,2.248,276,4.098,277,3.692,278,5.691,279,5.691,280,3.807,281,1.868,282,3.692,283,4.298,284,4.244,285,2.052,286,1.842,287,4.463,288,4.244,289,5.035,290,4.244,291,4.244,292,4.244,293,4.244,294,4.244,295,3.056,296,3.328,297,3.328,298,3.056,299,3.056,300,3.056,301,1.868,302,1.417,303,5.035,304,4.244,305,5.691,306,4.244,307,4.244,308,4.244]],["title/classes/ChannelMessage.html",[144,0.158,244,2.341]],["body/classes/ChannelMessage.html",[3,0.129,4,0.129,5,0.111,9,0.305,10,1.167,14,0.511,15,0.014,16,0.315,21,0.129,25,0.589,72,2.249,89,0.008,90,0.011,91,0.008,144,0.195,146,1.021,150,1.871,152,1.304,155,0.755,157,1.569,158,3.645,160,3.309,162,3.309,165,1.903,175,1.411,210,3.273,212,3.66,215,3.273,218,2.53,219,3.912,220,1.695,221,4.255,222,3.912,240,3.836,244,3.685,254,4.498,309,4.255,310,4.603,311,4.603,312,4.892,313,4.892,314,4.892,315,4.892,316,3.912,317,4.892,318,4.892]],["title/classes/ChannelMessageDto.html",[144,0.158,319,3.111]],["body/classes/ChannelMessageDto.html",[3,0.139,4,0.139,5,0.119,9,0.327,10,1.219,14,0.474,15,0.014,16,0.24,21,0.139,25,0.701,89,0.009,90,0.011,91,0.009,144,0.209,146,1.094,152,1.278,155,0.74,157,1.412,175,1.512,205,2.178,230,3.137,231,2.04,233,2.462,265,3.582,266,3,270,4.699,272,2.781,310,4.752,311,5.115,319,5.116,320,4.561,321,6.179,322,5.243,323,4.365,324,5.243,325,5.243]],["title/classes/ChannelResolver.html",[144,0.158,326,2.857]],["body/classes/ChannelResolver.html",[3,0.123,4,0.123,5,0.106,9,0.29,14,0.448,15,0.014,16,0.338,21,0.123,35,1.842,47,1.122,51,1.512,66,1.979,69,1.508,81,2.782,89,0.008,90,0.01,91,0.008,118,2.916,144,0.186,146,0.971,150,1.163,152,0.838,155,0.63,205,2.705,208,4.047,209,1.173,212,2.782,220,1.613,275,3.352,281,2.049,282,4.049,283,4.457,285,1.809,286,1.624,287,4.743,289,3.65,295,3.352,296,3.65,297,3.65,298,3.352,299,3.352,300,3.352,301,2.049,302,1.554,303,3.65,326,4.356,327,4.049,328,4.655,329,4.655,330,4.655,331,3.65,332,4.655,333,4.655,334,4.049,335,4.655,336,4.655,337,4.655,338,4.655]],["title/controllers/ChannelsController.html",[339,1.484,340,2.857]],["body/controllers/ChannelsController.html",[3,0.072,4,0.072,5,0.062,9,0.17,14,0.402,15,0.014,16,0.325,21,0.072,35,1.97,44,2.033,47,1.679,51,1.401,61,1.524,66,2.126,69,1.73,89,0.005,90,0.007,91,0.005,114,0.707,144,0.109,150,1.774,152,1.224,155,0.708,157,1.584,195,1.612,205,2.443,209,1.28,212,1.256,231,1.063,233,0.947,236,1.494,239,1.075,244,2.961,246,4.259,251,3.823,270,1.967,272,1.022,275,1.967,283,2.6,285,1.803,286,1.618,287,2.142,298,1.967,299,1.967,301,1.203,302,0.912,339,1.022,340,2.989,341,1.022,342,2.376,343,1.524,344,4.15,345,4.15,346,4.15,347,5.606,348,4.15,349,4.15,350,5.019,351,5.606,352,5.606,353,2.732,354,4.037,355,3.144,356,2.732,357,2.732,358,4.037,359,4.15,360,2.732,361,4.15,362,2.732,363,2.732,364,2.732,365,2.732,366,4.15,367,2.732,368,2.732,369,2.732,370,5.606,371,2.732,372,2.732,373,2.732,374,5.019,375,4.658,376,4.15,377,4.037,378,5.606,379,3.254,380,6.963,381,4.15,382,3.936,383,2.732,384,3.61,385,2.732,386,1.827,387,5.019,388,2.142,389,2.732,390,1.827,391,2.732,392,1.967,393,2.732,394,2.732,395,2.376,396,2.732,397,2.732,398,4.15,399,4.15,400,5.019,401,2.732,402,2.732,403,2.732,404,2.732,405,2.732,406,1.711,407,2.732,408,3.512,409,5.606,410,2.732,411,2.732,412,4.366,413,2.732,414,2.732,415,2.732,416,2.732,417,2.732,418,2.316,419,2.732,420,2.732,421,2.732,422,1.612,423,2.732,424,2.732,425,2.732,426,2.732,427,2.732]],["title/modules/ChannelsModule.html",[92,1.144,103,2.654]],["body/modules/ChannelsModule.html",[3,0.104,4,0.104,5,0.09,15,0.014,16,0.371,21,0.104,82,1.269,89,0.007,90,0.009,91,0.007,92,1.783,94,1.597,95,1.664,96,1.813,97,1.813,98,1.664,99,2.722,100,2.843,103,5.467,104,4.252,106,3.818,108,4.022,109,2.49,110,1.813,111,1.813,113,2.73,114,1.021,119,2.327,120,1.813,122,3.092,127,1.813,129,2.638,131,2.84,144,0.157,205,1.316,212,2.49,236,1.949,239,1.402,244,3.194,255,2.638,256,2.089,275,2.84,276,3.899,283,4.922,298,2.84,299,2.84,326,3.899,340,4.453,341,2.026,395,3.43,428,3.43,429,3.43,430,3.43,431,3.43,432,4.022,433,4.252,434,4.514,435,4.514,436,3.943,437,2.84,438,3.092,439,3.43,440,3.43,441,3.943,442,3.943,443,3.943,444,3.943]],["title/classes/Contact.html",[144,0.158,236,1.428]],["body/classes/Contact.html",[3,0.097,4,0.097,5,0.084,9,0.229,10,0.964,14,0.522,15,0.014,16,0.296,21,0.097,25,0.742,28,2.064,42,3.156,72,2.371,89,0.006,90,0.009,91,0.006,137,4.031,144,0.147,146,0.767,150,1.699,152,1.369,155,0.792,157,1.116,158,3.915,160,2.732,162,2.732,163,3.45,164,2.647,165,1.43,208,3.985,209,1.252,210,3.45,212,3.242,215,2.459,218,2.993,219,3.231,220,1.274,222,3.732,236,1.856,239,1.971,240,2.883,254,3.714,256,1.947,266,2.739,286,1.892,445,3.198,446,4.671,447,4.671,448,4.29,449,3.198,450,5.794,451,3.198,452,3.676,453,3.676,454,3.676,455,3.676,456,3.676,457,3.676,458,3.198,459,4.486,460,3.676,461,5.957,462,5.957,463,3.676,464,3.676,465,3.676,466,3.676,467,3.198,468,3.198,469,3.676,470,3.198,471,3.676,472,3.676,473,3.676]],["title/classes/ContactDto.html",[144,0.158,474,2.857]],["body/classes/ContactDto.html",[3,0.15,4,0.15,5,0.129,9,0.353,10,1.278,14,0.456,15,0.014,16,0.313,21,0.15,25,0.645,89,0.01,90,0.012,91,0.01,144,0.226,146,1.182,152,1.019,155,0.59,175,1.634,204,3.818,209,1.481,218,2.977,220,1.963,232,3.624,233,1.963,236,2.463,474,4.927,475,4.927,476,4.577,477,5.665,478,3.79]],["title/classes/ContactHandshakeDto.html",[144,0.158,479,2.341]],["body/classes/ContactHandshakeDto.html",[3,0.131,4,0.131,5,0.113,9,0.309,10,1.177,14,0.521,15,0.014,16,0.227,21,0.131,25,0.767,28,2.4,42,3.669,89,0.008,90,0.011,91,0.008,144,0.198,146,1.035,152,1.383,155,0.8,175,1.431,218,3.309,220,1.719,232,3.338,266,3.185,448,4.987,479,3.718,480,6.793,481,4.315,482,4.961,483,4.961,484,4.961,485,4.961,486,4.961,487,4.961]],["title/controllers/ContactsController.html",[339,1.484,488,2.857]],["body/controllers/ContactsController.html",[3,0.088,4,0.088,5,0.076,9,0.207,14,0.454,15,0.014,16,0.299,21,0.088,25,0.718,35,1.973,44,1.344,47,1.643,51,1.198,66,2.128,69,1.383,74,1.794,89,0.006,90,0.008,91,0.006,114,0.859,144,0.132,152,1.227,155,0.71,157,1.736,209,1.322,236,1.195,246,3.863,251,4.036,285,2.038,286,1.829,301,1.461,302,1.108,339,1.242,341,1.242,343,1.852,355,2.079,386,3.766,474,2.39,478,2.22,479,4.146,488,3.453,489,2.887,490,2.22,491,4.054,492,4.414,493,4.795,494,5.629,495,4.795,496,5.06,497,2.887,498,5.653,499,6.166,500,6.166,501,7.195,502,3.319,503,2.887,504,4.835,505,6.166,506,3.319,507,3.319,508,4.795,509,3.319,510,3.319,511,6.166,512,3.319,513,3.319,514,4.795,515,3.319,516,2.887,517,3.319,518,3.142,519,2.602,520,2.887,521,2.887,522,3.319,523,3.319,524,3.319,525,3.319,526,3.319,527,3.319,528,3.319,529,6.166,530,5.363,531,2.887,532,3.319,533,3.319,534,3.319]],["title/modules/ContactsModule.html",[92,1.144,104,2.341]],["body/modules/ContactsModule.html",[3,0.124,4,0.124,5,0.106,15,0.014,16,0.361,21,0.124,82,1.504,89,0.008,90,0.01,91,0.008,92,1.942,94,1.894,95,1.973,96,2.15,97,2.15,98,1.973,99,2.965,100,3.097,104,4.783,106,4.009,108,4.223,109,2.79,110,2.15,111,2.15,113,3.059,114,1.211,119,2.758,120,2.15,127,2.15,129,3.128,131,3.367,144,0.186,236,1.683,341,2.27,432,4.223,437,3.367,478,3.128,488,4.849,518,4.502,519,3.666,535,4.067,536,4.675,537,4.067,538,4.067,539,4.675,540,4.675,541,4.369,542,4.675,543,4.675]],["title/classes/ContactsResolver.html",[144,0.158,541,2.857]],["body/classes/ContactsResolver.html",[3,0.119,4,0.119,5,0.103,9,0.281,14,0.441,15,0.014,16,0.334,21,0.119,25,0.558,35,1.82,47,1.086,51,1.48,66,1.959,69,1.484,81,3.356,89,0.008,90,0.01,91,0.008,118,2.823,144,0.18,146,0.94,152,0.811,155,0.617,157,1.282,209,1.148,220,1.562,236,2.381,239,1.94,251,3.137,256,2.387,281,1.984,285,1.771,286,1.59,289,3.533,295,3.245,296,3.533,297,3.533,300,3.245,301,1.984,302,1.504,303,3.533,331,4.644,478,3.015,479,3.494,490,3.962,491,3.245,496,3.245,498,5.06,518,4.181,519,3.533,531,5.151,541,4.265,544,3.92,545,4.506,546,4.506,547,4.506,548,4.506,549,4.506,550,4.506,551,5.922,552,5.922]],["title/injectables/ContactsService.html",[518,2.214,553,1.607]],["body/injectables/ContactsService.html",[3,0.054,4,0.054,5,0.046,9,0.127,13,1.665,14,0.461,15,0.014,16,0.291,17,2.393,20,1.204,21,0.054,25,0.717,28,1.441,35,1.989,47,1.668,51,0.825,55,2.147,66,2.141,69,1.498,74,2.545,82,0.657,84,2.644,89,0.003,90,0.006,91,0.003,114,0.529,120,0.939,127,0.939,137,1.081,144,0.081,150,1.476,155,0.731,157,1.702,165,0.794,175,0.589,209,1.543,236,2.71,239,1.646,246,2.993,251,3.844,281,1.454,285,2.068,286,1.857,302,1.595,418,1.843,422,1.204,478,1.365,479,3.938,491,2.378,492,2.589,496,2.378,497,2.872,498,4.43,503,2.872,504,2.589,516,2.872,518,1.843,520,1.775,521,1.775,553,1.337,554,1.139,555,1.775,556,2.872,557,2.378,558,3.44,559,2.589,560,2.872,561,2.872,562,3.302,563,2.872,564,3.302,565,2.041,566,2.993,567,3.13,568,3.13,569,2.041,570,3.302,571,5.806,572,2.041,573,2.041,574,3.302,575,2.041,576,2.872,577,2.041,578,2.041,579,3.302,580,4.155,581,2.041,582,1.365,583,3.302,584,2.041,585,3.302,586,2.041,587,3.302,588,2.041,589,3.302,590,2.041,591,2.041,592,3.302,593,2.041,594,3.302,595,2.041,596,1.47,597,1.47,598,1.47,599,2.041,600,1.365,601,1.775,602,2.041,603,1.601,604,1.775,605,2.041,606,2.041,607,1.588,608,1.775,609,1.775,610,1.775,611,2.041,612,3.617,613,2.041,614,3.302,615,3.302,616,1.601,617,4.777,618,3.302,619,2.041,620,2.041,621,3.302,622,3.302,623,3.302,624,2.872,625,2.041,626,2.041,627,2.872,628,2.041,629,2.872,630,2.041,631,2.041,632,2.041,633,2.041,634,2.872,635,2.041,636,2.872,637,2.041,638,1.775,639,2.041,640,2.041,641,2.041,642,2.041,643,2.041]],["title/classes/CreateChannelDto.html",[144,0.158,354,2.857]],["body/classes/CreateChannelDto.html",[3,0.135,4,0.135,5,0.116,9,0.318,10,1.199,14,0.491,15,0.014,16,0.294,21,0.135,25,0.605,89,0.009,90,0.011,91,0.009,144,0.203,146,1.065,152,1.263,155,0.731,157,1.593,175,1.472,205,2.458,209,1.524,218,2.599,220,1.769,226,3.011,230,3.107,231,1.986,232,3.399,233,2.432,236,2.31,246,4.396,251,3.717,265,3.235,354,4.62,644,5.302,645,4.44,646,5.104,647,5.104,648,6.416,649,5.104]],["title/classes/CreateChannelMemberDto.html",[144,0.158,650,3.111]],["body/classes/CreateChannelMemberDto.html",[3,0.128,4,0.128,5,0.11,9,0.301,10,1.157,14,0.497,15,0.014,16,0.283,21,0.128,25,0.583,82,1.991,89,0.008,90,0.01,91,0.008,144,0.192,146,1.007,152,1.298,155,0.751,157,1.651,175,1.391,177,3.652,205,2.067,218,2.921,220,1.672,226,4.033,230,3.147,231,1.877,232,3.28,233,2.499,236,2.228,237,4.923,239,1.603,242,3.289,246,4.282,251,3.621,265,2.433,266,3.509,272,2.316,644,5.37,650,4.854,651,4.197,652,4.825,653,4.825,654,4.825,655,4.825]],["title/classes/CreateChannelMessageDto.html",[144,0.158,656,3.111]],["body/classes/CreateChannelMessageDto.html",[3,0.145,4,0.145,5,0.124,9,0.34,10,1.25,14,0.446,15,0.014,16,0.25,21,0.145,25,0.63,89,0.009,90,0.011,91,0.009,144,0.218,146,1.139,152,1.204,155,0.697,157,1.448,175,1.575,205,2.233,230,3.053,231,2.124,233,2.318,265,3.373,266,3.076,270,4.818,272,2.503,310,4.839,321,6.292,323,4.476,644,5.209,656,5.246,657,4.749,658,5.46,659,5.46]],["title/classes/CreateUserDto.html",[144,0.158,660,2.654]],["body/classes/CreateUserDto.html",[3,0.144,4,0.144,5,0.124,9,0.34,10,1.248,14,0.445,15,0.014,16,0.331,21,0.144,25,0.629,89,0.009,90,0.011,91,0.009,144,0.217,146,1.137,152,0.98,155,0.567,175,1.571,204,3.728,209,1.526,218,2.705,220,1.887,226,3.213,230,2.819,231,2.119,232,3.538,233,2.315,239,1.951,476,4.468,607,2.62,660,4.468,661,5.81,662,4.737,663,5.446,664,3.643]],["title/classes/CryptographyKeyPairDto.html",[13,2.001,144,0.158]],["body/classes/CryptographyKeyPairDto.html",[3,0.156,4,0.156,5,0.134,9,0.367,10,1.308,13,3.53,14,0.467,15,0.013,21,0.156,25,0.729,89,0.01,90,0.012,91,0.01,144,0.235,146,1.228,155,0.729,173,3.958,174,3.594,665,6.499,666,5.119,667,5.885,668,5.885]],["title/modules/CryptographyModule.html",[92,1.144,432,2.214]],["body/modules/CryptographyModule.html",[3,0.146,4,0.146,5,0.126,15,0.014,16,0.309,17,3.341,18,3.465,21,0.146,89,0.009,90,0.011,91,0.009,92,2.098,94,2.24,95,2.334,96,2.543,97,2.543,98,2.334,99,3.203,100,3.345,109,3.101,110,2.543,111,2.543,114,1.432,144,0.221,432,4.462,669,4.811,670,4.811,671,4.811,672,5.531]],["title/injectables/CryptographyService.html",[17,1.607,553,1.607]],["body/injectables/CryptographyService.html",[3,0.039,4,0.039,5,0.033,9,0.092,13,2.568,14,0.387,15,0.014,16,0.151,17,1.018,19,0.921,20,0.868,21,0.039,24,1.942,25,0.751,27,3.906,28,2.177,44,2.813,47,1.731,51,0.628,55,2.325,57,1.331,59,3.241,60,2.297,61,2.995,69,1.437,75,2.173,77,3.241,78,3.166,79,4.554,80,4.01,81,2.946,82,2.476,84,2.488,88,1.873,89,0.002,90,0.004,91,0.002,114,0.381,144,0.059,155,0.667,157,1.592,173,2.525,174,1.873,175,0.725,209,1.126,233,1.652,239,0.651,285,1.736,286,1.559,311,4.598,316,0.921,553,1.018,554,0.821,582,1.681,624,3.805,673,1.153,674,3.893,675,2.513,676,3.893,677,2.513,678,2.513,679,3.893,680,3.893,681,3.893,682,2.513,683,2.513,684,3.893,685,2.513,686,2.513,687,2.513,688,1.471,689,4.766,690,4.766,691,5.092,692,5.092,693,5.603,694,1.471,695,2.513,696,4.296,697,5.367,698,5.807,699,3.893,700,3.387,701,3.737,702,3.387,703,3.291,704,2.513,705,4.146,706,1.471,707,2.513,708,3.387,709,2.513,710,5.343,711,3.893,712,3.893,713,3.387,714,2.513,715,2.513,716,2.186,717,1.471,718,1.471,719,2.513,720,2.581,721,2.513,722,1.471,723,6.406,724,3.893,725,4.181,726,2.186,727,2.513,728,2.513,729,1.471,730,2.513,731,4.766,732,3.893,733,2.513,734,2.513,735,4.766,736,2.513,737,2.513,738,2.513,739,2.513,740,1.471,741,2.513,742,2.186,743,2.513,744,2.513,745,2.513,746,3.387,747,3.893,748,1.471,749,1.471,750,2.513,751,1.471,752,2.513,753,3.893,754,2.513,755,2.513,756,2.513,757,2.513,758,4.766,759,1.471,760,3.893,761,3.387,762,1.471,763,2.186,764,2.513,765,1.471,766,2.513,767,2.513,768,1.471,769,2.513,770,1.471,771,2.513,772,2.513,773,4.146,774,3.805,775,2.513,776,2.513,777,1.471,778,1.279,779,1.279,780,4.553,781,1.471,782,1.471,783,1.471,784,1.471,785,1.471,786,1.471,787,2.513,788,2.513,789,1.471,790,1.471,791,1.471,792,1.471,793,1.471,794,1.471,795,1.471,796,1.471,797,1.471,798,1.471,799,3.291,800,1.471,801,1.471,802,3.893,803,1.471,804,1.471,805,1.471,806,1.471,807,1.471,808,1.471,809,1.471,810,1.471,811,1.471,812,2.513,813,1.471,814,1.471,815,1.471,816,1.471,817,1.471,818,1.471,819,2.513,820,2.513,821,2.513,822,1.471,823,2.513,824,1.471,825,1.471,826,1.471,827,1.471,828,1.471,829,1.471,830,1.471,831,1.471,832,3.893,833,1.471,834,1.471,835,1.471,836,1.471]],["title/classes/DbKeyManager.html",[144,0.158,837,3.111]],["body/classes/DbKeyManager.html",[3,0.086,4,0.086,5,0.074,9,0.203,14,0.451,15,0.014,16,0.297,17,2.829,21,0.086,25,0.749,28,2.117,35,1.919,47,1.564,51,1.181,55,2.177,66,2.088,69,1.371,74,2.285,82,1.52,84,1.914,88,2.273,89,0.005,90,0.008,91,0.005,144,0.13,146,0.679,150,1.788,155,0.705,157,1.642,165,1.266,173,2.948,174,3.36,209,1.313,239,1.753,256,1.723,281,2.08,285,2.024,286,1.817,302,1.577,476,3.161,566,3.826,568,2.948,598,2.342,600,2.176,607,1.565,616,3.705,696,4.189,773,5.313,837,3.705,838,4.12,839,5.029,840,4.221,841,2.829,842,3.705,843,3.705,844,3.403,845,3.705,846,3.252,847,3.252,848,4.11,849,3.705,850,5.477,851,3.252,852,3.705,853,3.252,854,3.403,855,3.252,856,3.403,857,3.252,858,3.705,859,3.252,860,3.161,861,2.829,862,3.252,863,3.252,864,3.252,865,4.725,866,3.252,867,3.252,868,3.252,869,4.11,870,2.829,871,2.829,872,2.829]],["title/classes/DbKeyPair.html",[144,0.158,860,2.654]],["body/classes/DbKeyPair.html",[3,0.132,4,0.132,5,0.114,9,0.312,10,1.183,14,0.487,15,0.014,16,0.29,21,0.132,25,0.688,89,0.008,90,0.011,91,0.008,144,0.199,146,1.043,150,1.736,152,1.315,155,0.761,157,1.37,158,3.993,160,3.681,162,3.353,165,1.944,173,3.681,174,3.343,239,2.026,253,4.963,256,2.647,838,4.447,839,5.428,840,4.447,860,4.235,873,4.346,874,4.996,875,4.996,876,4.996,877,4.996,878,4.996,879,4.996,880,4.996]],["title/controllers/DevelopmentController.html",[339,1.484,881,2.857]],["body/controllers/DevelopmentController.html",[3,0.096,4,0.096,5,0.082,9,0.226,14,0.394,15,0.014,16,0.321,17,2.393,21,0.096,25,0.745,28,2.047,35,1.817,42,3.582,44,1.466,47,1.424,51,1.275,55,2.175,57,1.917,66,2.009,69,1.325,74,2.399,82,1.641,84,2.598,89,0.01,90,0.009,91,0.006,114,0.937,127,1.664,137,2.702,144,0.144,150,0.904,152,1.063,155,0.615,157,1.518,209,1.244,236,1.836,239,1.53,251,3.398,256,1.917,266,1.664,281,1.593,285,1.766,286,1.585,302,2.141,339,1.354,341,1.354,343,2.02,446,2.838,447,2.838,448,4.869,498,5.389,518,3.297,530,4.437,567,3.129,568,3.129,596,2.607,598,2.607,600,2.421,601,3.149,603,2.838,604,3.149,608,3.149,610,4.437,612,3.149,627,4.437,629,3.149,634,3.149,636,3.149,638,3.149,844,4.254,856,2.607,881,3.673,882,3.149,883,3.149,884,5.101,885,5.101,886,3.62,887,5.101,888,3.62,889,3.62,890,5.101,891,5.907,892,5.101,893,3.62,894,5.101,895,5.101,896,3.62,897,2.421,898,3.62,899,3.62,900,3.62,901,3.62,902,3.62,903,3.62,904,3.62,905,3.62,906,3.62,907,3.62,908,3.62,909,3.149,910,3.62,911,3.62,912,3.62]],["title/modules/DevelopmentModule.html",[92,1.144,105,2.654]],["body/modules/DevelopmentModule.html",[3,0.133,4,0.133,5,0.114,15,0.014,16,0.353,21,0.133,82,1.615,89,0.008,90,0.011,91,0.008,92,2.008,94,2.033,95,2.118,96,2.308,97,2.308,98,2.118,99,2.21,100,2.308,104,4.549,105,5.45,106,4.084,108,4.303,109,2.919,110,2.308,111,2.308,113,3.201,114,1.3,122,3.936,127,2.308,129,3.358,131,3.615,144,0.2,341,2.375,432,4.303,437,3.615,881,5.014,913,5.019,914,5.019,915,5.019,916,5.019]],["title/classes/EkhoEvent.html",[144,0.158,151,2.102]],["body/classes/EkhoEvent.html",[3,0.111,4,0.111,5,0.095,9,0.26,10,1.052,14,0.52,15,0.014,16,0.258,21,0.111,25,0.735,28,2.207,89,0.007,90,0.009,91,0.007,137,3.884,144,0.167,145,4.252,146,0.872,150,1.592,151,2.983,152,1.389,155,0.804,157,1.219,158,4.09,160,3.374,162,2.983,165,1.625,209,0.81,241,3.633,242,3.064,253,4.415,254,4.055,286,1.968,418,3.142,450,5.345,774,4.898,917,3.633,918,3.555,919,5.54,920,4.587,921,4.994,922,3.99,923,4.177,924,5.631,925,4.177,926,6.817,927,4.177,928,4.177,929,4.415,930,6.369,931,4.177,932,4.177,933,4.177,934,4.177,935,4.177,936,4.177,937,4.177,938,4.177]],["title/classes/EkhoEventDto.html",[144,0.158,939,2.654]],["body/classes/EkhoEventDto.html",[3,0.132,4,0.132,5,0.114,9,0.311,10,1.181,14,0.487,15,0.014,16,0.228,21,0.132,25,0.725,28,2.19,89,0.008,90,0.011,91,0.008,144,0.199,146,1.04,150,1.579,152,1.313,155,0.76,157,1.368,168,4.228,175,1.437,205,2.11,230,3.179,231,1.939,233,2.529,265,3.68,266,2.906,272,2.731,720,4.956,939,4.228,940,4.335,941,6.037,942,6.037,943,6.037,944,6.941,945,4.984,946,6.349,947,4.984,948,4.984,949,4.984]],["title/interfaces/EkhoWeb3Config.html",[0,1.276,191,2.485]],["body/interfaces/EkhoWeb3Config.html",[0,2.166,2,2.249,3,0.124,4,0.124,5,0.106,9,0.292,10,1.133,14,0.312,15,0.014,21,0.189,25,0.726,55,1.951,69,1.049,89,0.008,90,0.01,91,0.008,170,4.058,171,3.128,172,4.505,173,3.568,174,3.24,175,1.348,176,4.465,177,3.973,178,3.666,179,3.367,180,4.505,181,3.666,182,3.666,183,4.505,184,3.666,185,4.505,186,3.666,187,4.849,188,3.666,189,3.666,190,3.666,191,4.464,192,4.768,193,4.058,194,4.369,195,2.758,196,3.367,197,3.367,198,3.367,199,3.367,200,3.367,201,3.367,202,3.367,203,3.128,204,4.121]],["title/classes/EncodedMessageDto.html",[144,0.158,390,2.654]],["body/classes/EncodedMessageDto.html",[3,0.138,4,0.138,5,0.119,9,0.325,10,1.215,14,0.473,15,0.014,16,0.239,21,0.138,25,0.734,28,2.254,89,0.009,90,0.011,91,0.009,144,0.208,146,1.089,152,1.276,155,0.738,175,1.505,205,2.171,230,3.132,231,2.03,233,2.456,265,3.574,266,2.991,272,2.776,390,4.352,720,5.101,941,6.165,942,6.165,943,6.165,946,6.455,950,4.538,951,5.217,952,5.217,953,5.217]],["title/controllers/EventsController.html",[339,1.484,954,2.857]],["body/controllers/EventsController.html",[3,0.116,4,0.116,5,0.1,9,0.273,14,0.387,15,0.014,16,0.318,21,0.116,35,2.038,47,1.743,51,1.451,66,2.177,69,1.622,89,0.007,90,0.01,91,0.007,114,1.133,144,0.174,150,1.735,151,2.318,152,1.301,155,0.753,157,1.608,209,1.126,285,1.737,286,1.559,301,1.926,302,1.461,339,1.637,341,1.637,343,2.442,377,3.151,406,2.741,939,2.927,954,4.183,955,3.806,956,5.808,957,6.945,958,4.555,959,6.945,960,4.376,961,4.376,962,4.376,963,5.808,964,4.376,965,3.806,966,6.52,967,4.376,968,5.808,969,4.376,970,3.806,971,3.431,972,3.639,973,3.806,974,4.376,975,4.376,976,4.376,977,4.376,978,3.806,979,4.376,980,4.376,981,4.376]],["title/modules/EventsModule.html",[92,1.144,433,2.341]],["body/modules/EventsModule.html",[3,0.137,4,0.137,5,0.118,15,0.014,16,0.356,21,0.137,89,0.009,90,0.011,91,0.009,92,2.035,94,2.093,95,2.18,96,2.376,97,2.376,98,2.18,99,3.106,100,3.245,109,2.973,110,2.376,111,2.376,113,2.605,114,1.338,119,3.048,120,2.376,144,0.206,145,3.608,151,2.737,341,2.419,433,4.649,954,5.081,971,4.051,972,4.564,973,4.494,982,4.494,983,4.494,984,4.494,985,5.166,986,4.494,987,5.166,988,5.166]],["title/injectables/EventsService.html",[553,1.607,972,2.214]],["body/injectables/EventsService.html",[3,0.078,4,0.078,5,0.067,9,0.184,14,0.474,15,0.014,16,0.299,21,0.078,25,0.656,35,2.02,47,1.715,51,1.098,55,2.005,66,2.163,69,1.596,74,2.533,84,1.781,89,0.005,90,0.007,91,0.005,114,0.764,120,1.356,137,2.329,144,0.118,145,3.478,150,1.557,151,3.587,155,0.754,157,1.414,165,1.147,168,3.898,195,1.74,209,1.313,242,2.115,281,1.935,285,2.024,286,1.817,302,1.467,316,1.847,418,1.646,553,1.781,554,1.646,566,4.241,597,2.123,607,1.419,897,1.973,920,2.123,921,2.312,922,2.754,939,2.941,958,3.447,965,3.824,970,2.565,971,2.312,972,2.453,986,2.565,989,2.565,990,5.068,991,3.824,992,5.068,993,5.068,994,3.824,995,3.824,996,3.166,997,3.824,998,2.949,999,5.256,1000,2.949,1001,4.396,1002,2.949,1003,4.396,1004,2.949,1005,3.824,1006,2.949,1007,2.949,1008,4.396,1009,2.949,1010,4.396,1011,2.949,1012,2.949,1013,4.396,1014,4.396,1015,2.949,1016,4.396,1017,2.949,1018,2.949,1019,2.949,1020,2.949,1021,2.949,1022,2.949,1023,4.396,1024,2.949,1025,2.949,1026,2.949,1027,2.949,1028,2.949,1029,2.949,1030,2.949,1031,4.396,1032,5.256,1033,2.949,1034,2.949,1035,2.949,1036,2.949,1037,2.949,1038,2.949,1039,2.949,1040,2.949,1041,4.396,1042,2.949,1043,2.949,1044,2.949,1045,2.949,1046,2.949,1047,2.949,1048,2.949,1049,2.949,1050,2.949,1051,2.949,1052,2.565,1053,2.949,1054,2.312,1055,2.949,1056,4.396,1057,4.396,1058,2.949,1059,2.949,1060,2.949,1061,2.949,1062,2.949,1063,2.949,1064,2.949]],["title/controllers/IpfsController.html",[339,1.484,1065,2.857]],["body/controllers/IpfsController.html",[3,0.132,4,0.132,5,0.113,9,0.31,14,0.421,15,0.014,16,0.317,21,0.132,25,0.653,35,1.889,44,2.014,47,1.521,51,1.577,66,2.064,69,1.416,89,0.008,90,0.011,91,0.008,114,1.288,144,0.198,152,1.136,155,0.657,209,1.224,285,1.887,286,1.694,301,2.189,302,1.66,339,1.86,341,1.86,343,2.775,355,4.715,386,3.326,696,3.522,1065,4.545,1066,4.325,1067,3.326,1068,4.972,1069,6.311,1070,4.972,1071,4.545,1072,4.972,1073,4.568,1074,4.972,1075,4.325,1076,3.899,1077,4.09,1078,4.325,1079,4.972,1080,4.972,1081,4.972,1082,4.972,1083,4.972]],["title/classes/IpfsMessageDto.html",[144,0.158,1073,2.485]],["body/classes/IpfsMessageDto.html",[3,0.154,4,0.154,5,0.133,9,0.364,10,1.301,14,0.389,15,0.014,16,0.267,21,0.154,25,0.656,89,0.01,90,0.012,91,0.01,144,0.233,146,1.218,152,1.05,155,0.608,230,2.94,231,2.271,233,2.023,265,2.943,918,4.398,1073,4.363,1084,6.059,1085,4.577,1086,5.836]],["title/modules/IpfsModule.html",[92,1.144,434,2.485]],["body/modules/IpfsModule.html",[3,0.138,4,0.138,5,0.119,15,0.014,16,0.349,21,0.138,89,0.009,90,0.011,91,0.009,92,2.042,94,2.108,95,2.197,96,2.393,97,2.393,98,2.197,99,3.117,100,3.256,109,2.987,110,2.393,111,2.393,113,2.624,114,1.348,116,3.482,144,0.207,341,2.43,434,4.944,1065,5.098,1077,4.83,1078,4.527,1087,4.527,1088,4.527,1089,4.527,1090,5.205,1091,4.345,1092,5.093,1093,5.205,1094,5.205,1095,4.081]],["title/injectables/IpfsService.html",[553,1.607,1077,2.341]],["body/injectables/IpfsService.html",[3,0.103,4,0.103,5,0.163,9,0.242,14,0.409,15,0.014,16,0.281,21,0.103,25,0.578,35,1.712,43,3.158,44,2.168,47,1.29,51,1.338,55,2.126,66,1.924,69,1.201,74,2.003,75,2.164,89,0.01,90,0.009,91,0.007,114,1.004,144,0.155,155,0.638,209,1.189,233,1.855,272,2.003,281,1.707,285,1.833,286,1.645,301,1.707,302,1.295,375,2.595,422,2.288,553,2.168,554,2.164,607,1.866,696,4.001,700,3.374,701,3.041,725,2.793,742,3.374,897,2.595,1067,5.443,1071,4.994,1073,4.14,1075,3.374,1076,3.041,1077,3.158,1095,5.182,1096,3.374,1097,4.656,1098,4.656,1099,3.878,1100,3.878,1101,5.353,1102,3.878,1103,5.353,1104,5.353,1105,6.609,1106,6.609,1107,5.353,1108,4.414,1109,5.353,1110,3.878,1111,4.656,1112,5.353,1113,5.353,1114,5.353,1115,3.374,1116,3.041,1117,3.878,1118,3.878,1119,3.878,1120,3.374,1121,3.878,1122,3.878,1123,3.878,1124,2.793,1125,3.878,1126,3.878,1127,3.878,1128,3.878,1129,3.878,1130,3.878,1131,3.878,1132,3.878,1133,3.374,1134,5.353,1135,3.374,1136,3.374]],["title/interfaces/KeyManager.html",[0,1.276,568,2.102]],["body/interfaces/KeyManager.html",[0,1.396,2,2.088,3,0.115,4,0.115,5,0.099,9,0.271,14,0.481,15,0.014,16,0.199,21,0.115,25,0.771,28,2.399,35,2.035,47,1.738,51,1.443,88,2.779,89,0.007,90,0.01,91,0.007,127,3.409,150,1.73,155,0.751,157,1.726,165,1.689,174,3.124,209,1.398,285,2.155,286,1.935,379,3.403,568,3.06,696,4.342,838,4.373,842,4.53,843,4.53,844,4.16,845,4.53,849,4.53,850,5.933,852,4.53,854,4.16,856,4.16,858,4.53,1137,3.775,1138,4.34,1139,4.34,1140,4.34,1141,4.34,1142,4.34]],["title/modules/KeyManagerModule.html",[92,1.144,106,2.102]],["body/modules/KeyManagerModule.html",[3,0.141,4,0.141,5,0.122,15,0.014,16,0.352,21,0.141,82,1.716,89,0.009,90,0.011,91,0.009,92,2.065,94,2.161,95,2.252,96,2.454,97,2.454,98,2.252,99,2.904,100,3.033,106,4.147,109,3.033,110,2.454,111,2.454,113,3.326,114,1.382,119,3.148,120,2.454,127,2.454,144,0.213,432,4.369,437,3.842,838,3.148,840,3.148,860,3.57,861,4.641,1143,5.336,1144,5.336,1145,5.336,1146,5.336,1147,5.614,1148,5.336,1149,5.336]],["title/classes/Message.html",[144,0.158,272,1.484]],["body/classes/Message.html",[3,0.121,4,0.121,5,0.104,9,0.285,10,1.116,14,0.524,15,0.014,16,0.273,21,0.121,25,0.758,89,0.008,90,0.01,91,0.008,144,0.182,146,0.953,150,1.663,152,1.398,155,0.809,157,1.293,158,4.116,160,3.164,162,3.164,164,3.287,165,1.776,210,5.124,218,3.182,219,3.741,220,1.582,242,3.397,272,2.234,918,3.715,922,4.17,929,4.683,1108,4.794,1150,3.971,1151,5.79,1152,4.565,1153,4.565,1154,4.565,1155,4.565,1156,4.565,1157,4.565,1158,4.565,1159,4.565,1160,4.565,1161,4.565]],["title/controllers/MessagesController.html",[339,1.484,1162,2.857]],["body/controllers/MessagesController.html",[3,0.114,4,0.114,5,0.098,9,0.268,14,0.383,15,0.014,16,0.316,21,0.114,25,0.609,31,3.811,35,1.914,44,1.74,47,1.557,51,1.434,55,1.846,66,2.084,69,1.287,74,2.147,89,0.007,90,0.01,91,0.007,114,1.112,137,2.276,144,0.171,150,1.073,152,1.163,155,0.673,205,1.434,209,1.113,239,1.673,272,2.765,285,1.716,286,1.54,301,1.891,302,1.434,339,1.607,341,1.607,343,2.397,355,4.047,375,4.322,386,2.874,408,2.691,1076,3.368,1162,4.132,1163,3.737,1164,6.894,1165,5.737,1166,4.499,1167,4.296,1168,4.296,1169,5.737,1170,4.296,1171,4.296,1172,4.612,1173,4.296,1174,4.296,1175,3.368,1176,4.047,1177,3.737,1178,4.296,1179,4.296,1180,4.296,1181,3.737,1182,3.737,1183,3.737,1184,4.296,1185,4.296,1186,3.093,1187,4.296,1188,4.296,1189,4.296,1190,4.296,1191,4.499,1192,3.737,1193,3.737,1194,4.296,1195,4.296,1196,4.296]],["title/modules/MessagesModule.html",[92,1.144,107,2.654]],["body/modules/MessagesModule.html",[3,0.126,4,0.126,5,0.108,15,0.014,16,0.359,21,0.126,89,0.008,90,0.01,91,0.008,92,1.959,94,1.928,95,2.009,96,2.189,97,2.189,98,2.009,99,2.99,100,3.123,107,5.437,109,2.822,110,2.189,111,2.189,113,3.095,114,1.233,119,2.808,120,2.189,144,0.19,272,1.781,341,2.296,433,4.486,434,4.763,435,4.763,438,3.732,439,4.14,440,4.14,1162,4.891,1175,3.732,1176,5.066,1177,4.14,1197,4.14,1198,4.76,1199,4.14,1200,4.14,1201,4.76,1202,4.76,1203,4.76]],["title/injectables/MessagesService.html",[553,1.607,1176,2.485]],["body/injectables/MessagesService.html",[3,0.087,4,0.087,5,0.075,9,0.204,14,0.373,15,0.014,16,0.32,21,0.087,25,0.752,30,1.934,35,1.758,47,1.348,51,1.187,55,2.093,66,1.962,69,1.46,74,2.683,84,2.483,89,0.006,90,0.008,91,0.006,114,0.849,120,1.507,144,0.131,150,0.819,155,0.638,165,1.275,205,1.094,209,1.084,239,1.231,242,3.617,272,2.813,281,2.092,285,1.671,286,1.5,302,2.046,375,2.193,379,2.57,382,2.57,408,2.053,553,1.925,554,1.829,558,4.414,566,4.385,597,2.36,607,2.689,897,2.193,918,3.632,922,2.977,929,2.57,972,3.907,996,2.36,1052,2.851,1077,4.13,1108,4.025,1124,3.422,1166,3.726,1175,2.57,1176,2.977,1181,2.851,1182,4.133,1183,4.133,1204,2.851,1205,4.133,1206,3.277,1207,4.13,1208,3.277,1209,4.752,1210,3.277,1211,4.752,1212,3.277,1213,4.752,1214,3.277,1215,2.851,1216,3.277,1217,3.277,1218,3.277,1219,3.277,1220,3.277,1221,2.851,1222,3.277,1223,4.752,1224,3.277,1225,4.752,1226,4.752,1227,2.851,1228,3.277,1229,3.277,1230,4.752,1231,3.277,1232,2.57,1233,3.277,1234,3.277,1235,3.277,1236,4.752,1237,3.277,1238,2.851,1239,3.277,1240,2.851,1241,3.277,1242,3.277,1243,3.726,1244,3.277,1245,3.277,1246,3.277,1247,3.277,1248,2.851,1249,2.851,1250,3.277]],["title/classes/ProcessReport.html",[144,0.158,392,2.857]],["body/classes/ProcessReport.html",[3,0.138,4,0.138,5,0.119,9,0.325,10,1.214,14,0.472,15,0.014,16,0.297,21,0.138,89,0.009,90,0.011,91,0.009,144,0.207,146,1.086,152,1.274,155,0.737,157,1.604,175,1.501,230,3.129,231,2.025,233,2.454,265,3.57,272,2.43,375,4.345,382,5.813,390,4.736,392,4.677,406,4.644,920,4.677,1251,4.527,1252,7.08,1253,7.08,1254,7.08,1255,5.205,1256,5.205,1257,5.205,1258,5.205]],["title/classes/RawMessageDto.html",[144,0.158,358,2.857]],["body/classes/RawMessageDto.html",[3,0.139,4,0.139,5,0.12,9,0.329,10,1.223,14,0.475,15,0.014,16,0.241,21,0.139,25,0.617,89,0.009,90,0.011,91,0.009,144,0.21,146,1.1,152,1.281,155,0.741,157,1.612,175,1.52,205,2.185,230,3.143,231,2.05,233,2.467,239,1.695,242,3.425,251,3.772,265,3.59,266,3.424,272,2.449,310,4.763,323,4.379,358,4.713,1259,4.584,1260,5.269,1261,5.269,1262,5.269]],["title/classes/SendMessageDto.html",[144,0.158,1172,2.654]],["body/classes/SendMessageDto.html",[3,0.13,4,0.13,5,0.112,9,0.306,10,1.169,14,0.5,15,0.014,16,0.286,21,0.13,25,0.743,89,0.008,90,0.011,91,0.008,144,0.195,146,1.023,150,1.721,152,1.306,155,0.755,175,1.414,205,2.299,218,3.036,220,1.699,226,4.28,230,3.163,231,1.908,232,3.314,233,2.514,242,3.314,408,3.071,918,4.183,1085,3.845,1172,4.184,1186,3.531,1263,6.519,1264,4.903,1265,4.903,1266,4.903,1267,4.903,1268,4.903,1269,4.903,1270,4.903,1271,4.903,1272,4.903]],["title/interfaces/SignedSharedSecret.html",[0,1.276,26,2.341]],["body/interfaces/SignedSharedSecret.html",[0,2.068,1,2.742,2,1.529,3,0.084,4,0.084,5,0.072,6,1.876,7,1.876,8,1.774,9,0.198,10,1.129,11,4.027,12,4.027,13,3.242,14,0.31,15,0.014,16,0.213,17,2.448,18,1.991,19,1.991,20,1.876,21,0.178,22,3.588,23,2.127,24,2.742,25,0.739,26,2.742,27,4.407,28,2.589,29,1.876,30,3.793,31,3.793,32,4.027,33,3.066,34,4.206,35,1.841,36,3.441,37,3.441,38,2.127,39,2.127,40,2.127,41,2.127,42,2.91,43,1.876,44,2.448,45,3.441,46,1.991,47,1.457,48,3.565,49,1.876,50,2.127,51,1.161,52,2.127,53,1.991,54,2.127,55,2.454,56,1.876,57,2.91,58,1.991,59,3.066,60,3.565,61,3.372,62,3.785,63,3.785,64,2.742,65,1.991,66,1.622,67,1.991,68,1.991,69,1.442,70,1.991,71,1.991,72,1.462,73,1.876,74,2.405,75,2.594,76,2.911,77,3.066,78,3.241,79,3.565,80,3.241,81,1.462,82,1.767,83,3.441,84,1.882,85,3.441,86,1.991,87,2.911,88,2.236,89,0.005,90,0.008,91,0.005]],["title/interfaces/StringIndexedObject.html",[0,1.276,1273,2.857]],["body/interfaces/StringIndexedObject.html",[0,1.264,2,1.89,3,0.104,4,0.104,5,0.089,8,2.193,15,0.014,21,0.184,25,0.708,44,1.591,47,1.302,48,4.247,49,2.318,55,2.505,64,2.318,69,1.563,73,2.318,89,0.007,90,0.009,91,0.007,155,0.409,204,3.709,209,1.047,557,2.829,559,3.081,710,3.417,840,3.186,996,3.889,1071,4.444,1091,2.628,1273,5.31,1274,4.235,1275,3.929,1276,3.417,1277,4.235,1278,3.417,1279,6.83,1280,3.417,1281,3.417,1282,3.417,1283,3.081,1284,3.081,1285,3.417,1286,3.417,1287,3.081,1288,3.417,1289,3.417,1290,3.417,1291,3.417,1292,4.698,1293,5.78,1294,6.06,1295,3.417,1296,3.929,1297,2.829,1298,3.929,1299,3.929,1300,3.081,1301,4.698,1302,3.417,1303,3.417,1304,3.417,1305,4.698,1306,4.698,1307,3.417,1308,3.081,1309,3.417,1310,3.417,1311,4.698,1312,4.698,1313,4.698,1314,5.368,1315,3.417,1316,3.417,1317,3.417,1318,3.081,1319,5.368,1320,4.698]],["title/interfaces/TestHelper.html",[0,1.276,33,2.214]],["body/interfaces/TestHelper.html",[0,2.002,1,2.588,2,1.415,3,0.078,4,0.078,5,0.067,6,3.672,7,3.672,8,1.641,9,0.183,10,0.82,11,3.899,12,3.899,13,3.139,14,0.292,15,0.014,16,0.201,17,2.357,18,1.842,19,1.842,20,1.735,21,0.173,22,3.474,23,1.967,24,2.588,25,0.751,26,1.735,27,4.193,28,2.409,29,1.735,30,3.672,31,3.672,32,3.899,33,3.247,34,4.452,35,1.926,36,4.09,37,3.899,38,2.935,39,3.511,40,3.511,41,2.935,42,3.297,43,1.735,44,2.357,45,3.287,46,1.842,47,1.676,48,3.433,49,1.735,50,1.967,51,1.454,52,1.967,53,1.842,54,1.967,55,2.418,56,1.735,57,2.78,58,1.842,59,2.929,60,3.433,61,3.247,62,3.645,63,3.645,64,2.588,65,1.842,66,1.562,67,1.842,68,1.842,69,1.397,70,1.842,71,1.842,72,1.352,73,1.735,74,2.329,75,2.448,76,2.748,77,2.929,78,3.096,79,3.433,80,3.096,81,1.352,82,1.688,83,3.287,84,1.777,85,3.287,86,1.842,87,2.748,88,2.799,89,0.005,90,0.007,91,0.005,155,0.606,209,0.851,285,1.312,286,1.178,1276,2.558,1321,2.94,1322,2.94,1323,2.94,1324,2.94]],["title/interfaces/TestSubject.html",[0,1.276,22,2.214]],["body/interfaces/TestSubject.html",[0,2.054,1,3.21,2,1.504,3,0.083,4,0.083,5,0.071,6,1.845,7,1.845,8,1.745,9,0.195,10,1.12,11,4.434,12,4.434,13,3.642,14,0.363,15,0.014,16,0.21,17,2.428,18,1.959,19,1.959,20,1.845,21,0.177,22,3.726,23,3.072,24,3.768,25,0.728,26,1.845,27,4.176,28,2.453,29,1.845,30,3.768,31,3.768,32,4,33,3.037,34,4.182,35,1.833,36,3.408,37,3.408,38,2.092,39,2.092,40,2.092,41,2.092,42,2.882,43,1.845,44,2.428,45,3.408,46,1.959,47,1.445,48,3.537,49,1.845,50,2.092,51,1.147,52,2.092,53,1.959,54,2.092,55,2.446,56,1.845,57,2.882,58,1.959,59,3.037,60,3.537,61,3.346,62,3.756,63,3.756,64,2.709,65,1.959,66,1.609,67,1.959,68,1.959,69,1.433,70,1.959,71,1.959,72,1.438,73,1.845,74,2.389,75,2.563,76,2.876,77,3.037,78,3.21,79,3.537,80,3.21,81,1.438,82,1.75,83,3.408,84,1.86,85,3.408,86,1.959,87,2.876,88,2.209,89,0.005,90,0.008,91,0.005,286,1.232]],["title/interfaces/TestUsers.html",[0,1.276,29,2.341]],["body/interfaces/TestUsers.html",[0,2.059,1,2.721,2,1.513,3,0.083,4,0.083,5,0.072,6,1.856,7,1.856,8,1.756,9,0.196,10,1.123,11,4.01,12,4.01,13,3.228,14,0.364,15,0.014,16,0.211,17,2.435,18,1.971,19,1.971,20,1.856,21,0.177,22,4.16,23,2.105,24,2.721,25,0.718,26,1.856,27,4.183,28,2.457,29,2.721,30,4.183,31,4.183,32,4.441,33,3.047,34,4.191,35,1.836,36,3.42,37,3.42,38,2.105,39,2.105,40,2.105,41,2.105,42,2.892,43,1.856,44,2.435,45,3.42,46,1.971,47,1.45,48,3.547,49,1.856,50,2.105,51,1.152,52,2.105,53,1.971,54,2.105,55,2.449,56,1.856,57,2.892,58,1.971,59,3.047,60,3.547,61,3.356,62,3.766,63,3.766,64,2.721,65,1.971,66,1.614,67,1.971,68,1.971,69,1.436,70,1.971,71,1.971,72,1.447,73,1.856,74,2.395,75,2.574,76,2.889,77,3.047,78,3.221,79,3.547,80,3.221,81,1.447,82,1.756,83,3.42,84,1.868,85,3.42,86,1.971,87,2.889,88,2.219,89,0.005,90,0.008,91,0.005]],["title/classes/User.html",[144,0.158,239,1.027]],["body/classes/User.html",[3,0.121,4,0.121,5,0.104,9,0.285,10,1.116,14,0.511,15,0.014,16,0.323,21,0.121,25,0.563,72,2.746,89,0.008,90,0.01,91,0.008,137,3.164,144,0.182,146,0.953,150,1.831,152,1.271,155,0.735,157,1.293,158,3.164,160,3.164,162,3.164,163,4.453,164,3.287,165,1.776,208,4.453,209,1.369,212,3.457,215,3.054,218,2.419,219,3.741,220,1.582,222,4.17,236,2.706,239,1.547,255,3.054,449,5.195,450,5.537,451,5.195,458,3.971,459,5.195,468,3.971,470,3.971,490,4.453,609,3.971,1325,3.971,1326,4.565,1327,4.565,1328,4.565,1329,4.565,1330,4.565,1331,4.565]],["title/classes/UserDto.html",[144,0.158,1332,2.654]],["body/classes/UserDto.html",[3,0.138,4,0.138,5,0.119,9,0.325,10,1.215,14,0.473,15,0.014,16,0.324,21,0.138,25,0.613,89,0.009,90,0.011,91,0.009,144,0.208,146,1.089,150,1.908,152,1.171,155,0.677,157,1.408,175,1.505,204,3.956,209,1.481,218,2.871,220,1.808,226,3.838,230,2.991,231,2.03,232,3.446,233,2.456,239,2.016,476,4.352,664,3.49,1332,4.352,1333,4.538,1334,5.217,1335,5.217]],["title/controllers/UsersController.html",[339,1.484,1336,2.857]],["body/controllers/UsersController.html",[3,0.132,4,0.132,5,0.114,9,0.311,14,0.421,15,0.014,16,0.334,21,0.132,25,0.654,35,1.89,47,1.524,51,1.579,66,2.066,69,1.418,89,0.008,90,0.011,91,0.008,114,1.291,144,0.199,152,1.137,155,0.658,209,1.415,239,1.637,280,3.334,285,1.89,286,1.696,301,2.194,302,1.664,339,1.865,341,1.865,343,2.781,355,4.348,377,3.589,386,3.334,388,3.908,567,3.348,660,4.883,1332,3.334,1336,4.551,1337,4.335,1338,4.228,1339,4.335,1340,4.984,1341,4.984,1342,4.984,1343,4.335,1344,4.335,1345,3.908,1346,4.984,1347,4.984,1348,4.984,1349,4.984,1350,4.984,1351,4.984]],["title/modules/UsersModule.html",[92,1.144,108,2.214]],["body/modules/UsersModule.html",[3,0.131,4,0.131,5,0.113,15,0.014,16,0.357,21,0.131,82,1.596,89,0.008,90,0.011,91,0.008,92,1.997,94,2.009,95,2.094,96,2.281,97,2.281,98,2.094,99,3.049,100,3.185,106,4.072,108,4.453,109,2.898,110,2.281,111,2.281,113,3.178,114,1.285,119,2.927,120,2.281,127,2.281,129,3.319,144,0.198,239,1.285,341,2.357,567,4.309,664,3.319,1336,4.987,1345,3.89,1352,4.315,1353,4.961,1354,4.315,1355,4.315,1356,4.961,1357,4.538,1358,4.961,1359,4.961,1360,4.961]],["title/classes/UsersResolver.html",[144,0.158,1357,2.857]],["body/classes/UsersResolver.html",[3,0.123,4,0.123,5,0.106,9,0.29,14,0.403,15,0.014,16,0.308,21,0.123,25,0.633,35,1.91,47,1.458,51,1.512,66,2.066,69,1.508,81,3.539,89,0.008,90,0.01,91,0.008,118,2.916,144,0.186,146,0.971,152,1.089,155,0.7,209,1.38,239,1.993,280,4.76,281,2.049,285,1.809,286,1.624,295,3.352,300,3.352,301,2.049,302,1.554,331,3.65,334,5.262,377,3.352,567,4.004,664,3.114,1345,3.65,1357,4.356,1361,4.049,1362,6.049,1363,4.655,1364,4.655,1365,4.655,1366,6.049,1367,4.655,1368,4.655,1369,4.655,1370,4.655,1371,4.655,1372,4.655,1373,4.655,1374,4.655]],["title/injectables/UsersService.html",[553,1.607,567,2.102]],["body/injectables/UsersService.html",[3,0.082,4,0.082,5,0.071,9,0.194,14,0.471,15,0.014,16,0.315,21,0.082,25,0.709,35,2.013,47,1.704,51,1.144,55,1.746,66,2.158,69,1.586,74,2.385,82,1.002,84,1.854,88,2.202,89,0.005,90,0.008,91,0.005,114,0.806,120,1.432,127,1.432,144,0.124,150,1.495,155,0.751,157,1.561,165,1.212,175,0.898,209,1.508,239,1.405,281,2.015,285,2.114,286,1.897,302,1.528,388,2.441,418,2.554,422,1.837,553,1.854,554,1.738,557,3.296,558,4.308,566,3.748,567,2.425,568,3.169,576,3.981,580,5.204,582,2.083,596,2.242,597,2.242,600,2.083,603,2.441,607,1.498,616,2.441,660,4.002,664,2.083,696,3.339,850,3.589,854,3.296,1287,3.589,1332,2.083,1338,3.062,1339,3.981,1343,2.708,1344,2.708,1375,2.708,1376,3.981,1377,3.981,1378,3.981,1379,3.113,1380,5.427,1381,3.113,1382,4.577,1383,3.113,1384,3.113,1385,4.577,1386,3.113,1387,3.113,1388,4.577,1389,3.113,1390,4.577,1391,3.113,1392,4.577,1393,3.113,1394,3.113,1395,3.113,1396,3.113,1397,3.113,1398,3.113,1399,3.113,1400,3.113,1401,2.708,1402,3.113,1403,3.113,1404,3.113,1405,3.113,1406,3.113,1407,3.113,1408,2.708,1409,3.981,1410,3.113,1411,3.113,1412,3.113,1413,3.113,1414,3.113,1415,3.113,1416,4.577,1417,3.113,1418,3.113,1419,3.113]],["title/classes/VaultKeyManager.html",[144,0.158,1420,3.111]],["body/classes/VaultKeyManager.html",[3,0.079,4,0.079,5,0.068,9,0.186,14,0.466,15,0.014,16,0.243,17,2.755,21,0.079,25,0.752,28,2.276,35,1.881,47,1.584,51,1.11,55,2.248,59,3.666,66,2.059,69,1.316,74,2.195,82,0.962,84,2.755,88,2.137,89,0.005,90,0.007,91,0.005,144,0.119,146,0.624,150,1.699,155,0.708,157,1.647,174,2.822,175,0.862,209,1.319,239,1.373,281,1.316,285,2.034,286,1.826,301,1.316,302,1.483,418,1.669,422,2.621,476,2.972,568,2.808,582,2,598,2.153,600,2,696,4.054,705,4.61,708,2.601,716,2.601,726,4.61,763,2.601,838,4.122,839,5.031,840,4.122,842,3.483,843,3.483,844,3.199,845,3.483,849,3.483,852,3.483,854,3.199,856,3.199,858,3.483,869,3.864,870,2.601,871,2.601,872,2.601,1116,3.483,1338,3.546,1420,3.483,1421,2.601,1422,4.442,1423,2.99,1424,5.103,1425,2.99,1426,4.442,1427,6.801,1428,5.867,1429,2.99,1430,6.569,1431,4.442,1432,2.99,1433,2.99,1434,2.99,1435,2.99,1436,2.99,1437,2.99,1438,2.99,1439,5.867,1440,4.442,1441,4.442,1442,5.3,1443,4.61,1444,2.99,1445,2.99,1446,2.99,1447,4.442,1448,2.99,1449,2.99,1450,2.99,1451,2.99,1452,4.442,1453,4.442,1454,2.601,1455,2.99]],["title/interfaces/Web3Config.html",[0,1.276,192,2.654]],["body/interfaces/Web3Config.html",[0,2.104,2,2.118,3,0.117,4,0.117,5,0.1,9,0.275,10,1.09,14,0.483,15,0.014,21,0.184,25,0.765,55,1.876,69,0.988,89,0.007,90,0.01,91,0.007,170,4.658,171,2.946,172,4.375,173,3.465,174,3.146,175,1.27,176,3.858,177,4.391,178,3.453,179,3.171,180,4.979,181,3.453,182,3.453,183,4.979,184,3.453,185,4.979,186,3.453,187,5.36,188,3.453,189,3.453,190,3.453,191,4.097,192,4.375,193,3.902,194,4.2,195,2.598,196,3.171,197,3.171,198,3.171,199,3.171,200,3.171,201,3.171,202,3.171,203,2.946,204,4.042]],["title/controllers/Web3Controller.html",[339,1.484,1456,2.857]],["body/controllers/Web3Controller.html",[3,0.128,4,0.128,5,0.11,9,0.302,14,0.322,15,0.014,16,0.284,21,0.128,25,0.748,28,2.501,35,1.869,44,1.959,47,1.495,51,1.549,66,2.049,69,1.391,89,0.008,90,0.01,91,0.008,114,1.252,144,0.193,150,1.208,152,1.116,155,0.646,176,2.853,209,0.938,242,2.983,285,1.446,286,1.298,301,2.129,302,1.614,339,1.809,341,1.809,343,2.699,355,4.521,384,5.393,408,3.029,725,3.482,746,4.206,909,4.206,918,4.028,1207,4.037,1221,4.206,1456,4.465,1457,4.206,1458,7.218,1459,4.836,1460,4.836,1461,6.2,1462,6.2,1463,4.836,1464,4.206,1465,4.836,1466,4.836,1467,4.836,1468,4.836,1469,4.836,1470,4.836]],["title/modules/Web3Module.html",[92,1.144,435,2.485]],["body/modules/Web3Module.html",[3,0.133,4,0.133,5,0.115,15,0.014,16,0.353,21,0.133,89,0.008,90,0.011,91,0.008,92,2.013,94,2.043,95,2.128,96,2.319,97,2.319,98,2.128,99,3.072,100,3.209,109,2.928,110,2.319,111,2.319,113,3.211,114,1.306,116,3.374,144,0.201,341,2.382,433,4.554,435,5.013,438,3.955,1091,4.26,1207,4.809,1456,5.025,1464,4.387,1471,4.387,1472,5.043,1473,4.387,1474,4.387,1475,5.043,1476,5.043,1477,4.993,1478,5.043]],["title/injectables/Web3Service.html",[553,1.607,1207,2.341]],["body/injectables/Web3Service.html",[3,0.055,4,0.055,5,0.047,9,0.129,10,0.623,14,0.321,15,0.014,16,0.292,21,0.055,25,0.686,28,1.829,35,1.697,47,1.272,51,0.833,53,1.294,55,2.397,66,1.933,69,1.266,74,2.451,81,0.95,84,2.85,89,0.006,90,0.006,91,0.003,114,0.535,116,1.381,144,0.082,145,1.86,149,3.286,151,1.766,155,0.722,157,0.721,168,2.804,172,2.804,173,1.766,174,1.603,176,3.329,177,3.329,179,2.4,180,2.804,183,2.23,185,2.23,195,1.966,209,0.933,242,2.016,281,0.909,285,1.438,286,1.291,302,2.349,311,2.23,316,1.294,406,1.294,408,2.625,412,1.796,418,1.152,422,2.838,553,1.35,554,1.152,607,3.222,696,1.86,702,1.796,897,1.381,918,2.945,922,3.535,972,2.684,978,1.796,1005,2.899,1054,1.619,1091,3.53,1120,1.796,1124,2.4,1133,1.796,1135,1.796,1136,1.796,1186,2.4,1207,1.966,1215,1.796,1227,3.645,1232,1.619,1238,1.796,1243,4.425,1248,1.796,1249,2.899,1297,1.487,1338,2.23,1401,3.645,1408,3.645,1409,5.164,1443,1.796,1479,1.796,1480,2.899,1481,2.899,1482,4.81,1483,4.81,1484,2.899,1485,2.065,1486,3.333,1487,3.333,1488,2.065,1489,3.333,1490,2.065,1491,2.065,1492,2.065,1493,2.065,1494,3.333,1495,2.065,1496,3.333,1497,2.065,1498,2.065,1499,3.333,1500,3.333,1501,4.81,1502,3.333,1503,3.333,1504,3.333,1505,3.333,1506,3.333,1507,3.333,1508,3.333,1509,3.333,1510,3.333,1511,3.333,1512,3.333,1513,2.065,1514,3.333,1515,2.065,1516,2.065,1517,2.065,1518,2.065,1519,2.065,1520,2.065,1521,2.065,1522,2.065,1523,5.277,1524,2.899,1525,2.065,1526,2.065,1527,2.065,1528,2.065,1529,1.619,1530,2.065,1531,2.065,1532,3.333,1533,2.065,1534,3.333,1535,2.065,1536,5.277,1537,2.065,1538,3.333,1539,2.065,1540,2.065,1541,2.065,1542,2.065,1543,2.065,1544,2.065,1545,4.191,1546,4.81,1547,2.065,1548,4.191,1549,4.191,1550,3.333,1551,2.065,1552,4.191,1553,2.065,1554,2.065,1555,2.065,1556,3.333,1557,2.065,1558,2.065,1559,2.065,1560,2.065,1561,2.065,1562,2.065,1563,2.065,1564,2.065,1565,2.065,1566,2.065,1567,2.065,1568,3.333,1569,2.065,1570,2.065,1571,2.065,1572,2.065,1573,4.191,1574,2.065,1575,2.065,1576,2.065,1577,2.065,1578,2.065,1579,2.065,1580,3.333,1581,2.065,1582,1.619,1583,2.065,1584,2.065,1585,2.065,1586,3.333,1587,2.065,1588,2.065,1589,5.277,1590,2.065,1591,2.065,1592,2.065,1593,2.065,1594,2.065,1595,2.065,1596,2.065,1597,2.065,1598,2.065,1599,2.065,1600,2.065,1601,2.065,1602,2.065,1603,2.065,1604,2.065,1605,2.065,1606,2.065,1607,2.065,1608,2.065,1609,2.065,1610,2.065,1611,2.065,1612,2.065,1613,2.065,1614,2.065,1615,2.065,1616,2.065,1617,2.065,1618,2.065,1619,2.065,1620,2.065,1621,2.065,1622,2.065,1623,2.065,1624,2.065,1625,2.065,1626,2.065,1627,3.333,1628,3.333,1629,3.333,1630,3.333,1631,4.81,1632,3.333,1633,2.065,1634,3.333,1635,2.065,1636,2.065]],["title/coverage.html",[1637,4.263]],["body/coverage.html",[0,2.102,1,1.209,5,0.047,6,3.317,7,3.317,8,3.864,13,1.033,14,0.137,15,0.014,17,0.83,22,1.144,26,1.209,29,1.209,33,1.144,56,1.209,89,0.003,90,0.006,91,0.003,98,0.865,127,1.523,144,0.313,145,1.144,147,1.782,151,1.085,170,1.371,171,3.516,191,1.284,192,1.371,193,1.371,203,1.371,205,0.684,206,1.782,212,0.942,224,1.607,225,1.782,234,1.782,236,0.738,239,0.531,244,1.209,263,1.607,264,1.782,266,0.942,272,1.239,276,1.476,277,1.782,280,1.371,283,1.284,309,1.782,316,5.233,319,1.607,320,1.782,326,1.476,327,1.782,339,2.305,340,1.476,342,1.782,354,1.476,358,1.476,390,1.371,392,1.476,406,1.284,445,1.782,474,1.476,475,1.782,479,1.209,480,1.782,481,1.782,488,1.476,489,1.782,490,1.371,518,1.144,541,1.476,544,1.782,553,2.495,555,1.782,567,1.085,568,1.085,607,0.986,644,3.002,645,1.782,650,1.607,651,1.782,656,1.607,657,1.782,660,1.371,661,1.782,662,1.782,665,1.782,666,1.782,673,2.597,780,1.607,837,1.607,838,3.101,839,3.002,840,2.459,841,1.782,860,1.371,873,1.782,881,1.476,882,1.782,917,1.782,939,1.371,940,1.782,950,1.782,954,1.476,955,1.782,972,1.144,989,1.782,1065,1.476,1066,1.782,1067,1.371,1073,1.284,1077,1.209,1084,1.782,1085,2.597,1092,1.607,1096,1.782,1137,1.782,1147,1.607,1150,1.782,1162,1.476,1163,1.782,1172,1.371,1176,1.284,1204,1.782,1207,1.209,1251,1.782,1259,1.782,1263,1.782,1273,1.476,1274,4.641,1277,1.607,1283,1.607,1297,1.476,1300,1.607,1308,1.607,1318,1.607,1325,1.782,1332,1.371,1333,1.782,1336,1.476,1337,1.782,1357,1.476,1361,1.782,1375,1.782,1420,1.607,1421,1.782,1456,1.476,1457,1.782,1477,1.607,1479,1.782,1529,1.607,1637,1.607,1638,1.782,1639,2.049,1640,1.782,1641,2.049,1642,2.049,1643,1.782,1644,2.049,1645,6.924,1646,4.788,1647,6.535,1648,6.535,1649,3.312,1650,4.169,1651,3.312,1652,2.049,1653,4.788,1654,4.572,1655,6.515,1656,8.048,1657,1.782,1658,8.035,1659,1.782,1660,1.782,1661,1.782,1662,5.359,1663,4.572,1664,1.782,1665,2.049,1666,2.049,1667,4.169,1668,4.169,1669,3.312,1670,4.165,1671,1.782,1672,1.782,1673,1.782,1674,1.782,1675,1.782,1676,1.782,1677,1.782,1678,2.049,1679,2.049,1680,4.165,1681,1.782,1682,1.782,1683,1.782,1684,1.782,1685,1.782,1686,1.782,1687,1.782,1688,2.049,1689,5.813,1690,1.782,1691,1.782,1692,1.782,1693,1.782,1694,1.782,1695,1.782,1696,1.782,1697,1.782,1698,1.782,1699,1.782,1700,1.782,1701,3.626,1702,1.782,1703,1.782,1704,1.782,1705,2.881,1706,2.881,1707,1.782,1708,1.782,1709,1.782,1710,1.782,1711,2.049,1712,2.049,1713,2.049,1714,2.049]],["title/dependencies.html",[95,2.016,1715,3.302]],["body/dependencies.html",[15,0.014,89,0.009,90,0.011,91,0.009,95,2.235,114,1.371,116,3.543,118,3.317,120,2.435,165,2.061,176,3.124,220,2.275,231,2.061,778,4.607,779,4.607,1067,3.543,1115,4.607,1116,4.153,1243,4.153,1284,4.153,1454,4.607,1524,4.607,1716,7.136,1717,5.296,1718,5.296,1719,5.296,1720,5.296,1721,7.136,1722,5.296,1723,5.296,1724,5.296,1725,5.296,1726,5.296,1727,5.296,1728,5.296,1729,5.296,1730,5.296,1731,5.296,1732,5.296,1733,5.296,1734,5.296,1735,5.296,1736,5.296,1737,5.296,1738,5.296,1739,5.296,1740,5.296,1741,5.296,1742,5.296,1743,5.296,1744,5.296,1745,5.296,1746,5.296]],["title/miscellaneous/functions.html",[1747,2.378,1748,4.156]],["body/miscellaneous/functions.html",[9,0.397,15,0.012,89,0.011,90,0.012,91,0.011,98,3.257,1687,5.535,1747,4.582,1748,5.535,1749,6.363]],["title/index.html",[9,0.206,1232,2.59,1750,3.302]],["body/index.html",[15,0.014,46,2.983,49,3.304,57,1.742,89,0.006,90,0.008,91,0.006,92,0.948,233,1.139,323,2.199,467,2.86,607,2.953,725,4.692,883,2.86,1054,2.578,1124,2.368,1186,2.368,1191,4.391,1192,4.871,1193,2.86,1240,2.86,1582,2.578,1637,4.391,1638,5.34,1751,3.288,1752,4.762,1753,4.762,1754,3.288,1755,4.762,1756,3.288,1757,7.007,1758,3.288,1759,2.86,1760,3.288,1761,3.288,1762,3.288,1763,3.288,1764,7.007,1765,5.599,1766,8.065,1767,3.288,1768,4.762,1769,6.139,1770,3.288,1771,6.139,1772,3.288,1773,8.015,1774,3.288,1775,3.288,1776,3.288,1777,3.288,1778,4.762,1779,3.288,1780,3.288,1781,3.288,1782,3.288,1783,6.516,1784,3.288,1785,3.288,1786,3.288,1787,7.176,1788,3.288,1789,7.176,1790,3.288,1791,3.288,1792,3.288,1793,3.288,1794,3.288,1795,4.762,1796,5.599,1797,4.762,1798,4.762,1799,7.007,1800,6.139,1801,5.599,1802,7.176,1803,7.176,1804,5.599,1805,5.599,1806,4.762,1807,4.762,1808,4.762,1809,4.762,1810,4.762,1811,4.762,1812,7.007,1813,3.288,1814,3.288,1815,3.288,1816,3.288,1817,3.288,1818,3.288,1819,4.762,1820,3.288,1821,3.288,1822,3.288,1823,3.288,1824,3.288,1825,3.288,1826,3.288,1827,3.288,1828,3.288,1829,3.288,1830,5.599,1831,2.86,1832,4.762,1833,3.288,1834,3.288,1835,3.288,1836,3.288,1837,3.288,1838,3.288,1839,3.288,1840,3.288,1841,3.288,1842,3.288,1843,3.288,1844,3.288,1845,3.288,1846,2.86,1847,4.762,1848,3.288,1849,3.288,1850,3.288,1851,3.288,1852,3.288,1853,3.288,1854,3.288,1855,3.288,1856,3.288]],["title/modules.html",[94,2.202]],["body/modules.html",[15,0.011,89,0.009,90,0.011,91,0.009,93,4.004,94,2.252,103,3.72,104,3.28,105,3.72,106,2.946,107,3.72,108,3.103,432,3.103,433,3.28,434,3.483,435,3.483,1857,8.222,1858,8.222,1859,8.222,1860,8.222]],["title/overview.html",[1861,4.729]],["body/overview.html",[2,1.709,15,0.014,17,2.904,77,1.983,89,0.006,90,0.008,91,0.006,92,1.025,93,5.642,94,1.439,95,1.499,96,1.634,97,1.634,98,1.499,99,1.564,100,1.634,101,3.09,102,3.09,103,5.391,104,4.622,105,5.112,106,3.947,107,5.162,108,4.265,109,2.315,110,1.634,111,1.634,146,0.741,283,4.492,341,1.329,428,3.09,429,3.09,430,3.09,431,3.09,432,4.158,433,4.322,434,4.492,435,4.668,518,4.002,535,3.09,537,3.09,538,3.09,554,1.983,567,3.798,669,3.09,670,3.09,671,3.09,701,3.948,972,4.002,982,3.09,983,3.09,984,3.09,1077,4.23,1087,3.09,1088,3.09,1089,3.09,1176,4.492,1197,3.09,1199,3.09,1200,3.09,1207,4.23,1352,3.09,1354,3.09,1355,3.09,1471,3.09,1473,3.09,1474,3.09,1640,3.09,1643,3.09,1861,3.09]],["title/miscellaneous/variables.html",[1747,2.378,1862,4.156]],["body/miscellaneous/variables.html",[6,0.737,7,0.737,8,2.908,9,0.078,10,0.408,11,1.82,12,1.82,14,0.492,15,0.014,17,1.896,22,0.697,24,0.737,25,0.641,27,2.761,28,1.946,30,2.055,31,2.055,32,2.182,33,1.218,34,2.478,35,0.902,36,1.367,37,1.367,42,1.539,43,0.737,44,1.177,45,0.782,47,0.7,48,3.074,51,0.312,55,2.293,56,1.287,57,1.539,58,1.367,59,1.621,60,2.055,61,1.944,62,2.182,63,2.182,64,1.287,65,0.782,66,0.935,67,0.782,68,0.782,69,1.554,70,0.782,71,0.782,72,1.003,73,0.737,74,1.48,75,1.218,76,1.367,77,1.621,78,1.714,79,2.055,80,1.714,81,1.003,82,1.597,83,1.82,84,1.177,85,1.82,86,0.782,87,1.367,88,1.398,89,0.002,90,0.004,91,0.002,94,0.506,99,0.55,127,0.574,145,1.218,148,1.086,149,0.979,150,1.24,151,0.661,168,0.835,171,0.835,172,0.835,173,0.661,174,0.601,175,2.195,176,1.714,177,1.287,180,0.835,183,1.459,185,0.835,187,0.899,191,1.367,193,1.944,194,3.575,195,0.737,196,0.899,197,0.899,198,0.899,199,1.571,200,0.899,201,1.571,202,0.899,203,1.459,204,2.908,205,1.32,207,0.979,208,1.944,209,1.151,212,1.003,235,1.086,236,0.785,237,0.899,238,1.086,239,0.902,242,1.903,244,0.737,266,1.602,272,1.48,280,1.459,310,0.835,311,0.835,316,1.367,323,0.835,406,1.367,418,2.612,422,0.737,446,0.979,447,0.979,448,0.899,479,0.737,490,1.944,491,0.899,492,0.979,496,0.899,504,0.979,556,1.086,557,2.092,558,2.092,559,1.711,560,1.086,561,1.086,563,1.086,566,1.367,568,1.845,571,1.898,582,5.106,596,2.092,607,2.092,673,0.979,713,1.086,761,1.086,780,2.278,838,0.737,840,1.287,848,1.086,918,2.77,919,1.086,920,0.899,921,0.979,922,1.367,958,0.979,990,1.086,991,1.086,992,1.086,993,1.086,994,1.086,995,1.086,996,2.092,997,1.086,1067,1.944,1071,2.092,1073,0.782,1091,3.131,1092,1.711,1095,2.278,1097,1.086,1098,1.086,1108,0.899,1111,1.086,1147,1.711,1151,1.086,1166,0.979,1172,0.835,1191,3.893,1205,1.086,1273,2.092,1274,0.979,1277,2.278,1278,1.086,1279,6.838,1280,1.086,1281,1.086,1282,1.086,1283,1.711,1284,0.979,1285,1.086,1286,1.086,1287,1.711,1288,1.086,1289,1.086,1290,1.086,1291,1.086,1292,1.086,1293,3.03,1294,2.527,1295,1.086,1297,0.899,1300,1.711,1301,1.898,1302,1.086,1303,1.086,1304,1.086,1305,1.898,1306,1.898,1307,1.086,1308,1.711,1309,1.086,1310,1.086,1311,1.898,1312,1.898,1313,1.898,1314,2.527,1315,1.086,1316,1.086,1317,1.086,1318,1.711,1319,2.527,1320,1.898,1338,0.835,1376,1.086,1377,1.086,1378,1.086,1424,1.086,1477,1.711,1480,1.086,1481,1.086,1484,1.086,1529,1.711,1582,0.979,1654,1.898,1655,3.44,1657,1.898,1659,1.898,1660,2.527,1661,1.898,1662,4.071,1663,4.719,1664,1.898,1670,1.898,1671,2.527,1672,2.527,1673,1.898,1674,1.898,1675,1.086,1676,1.086,1677,1.898,1680,2.527,1681,1.898,1682,1.898,1683,1.898,1684,1.898,1685,1.898,1686,1.898,1689,1.898,1690,2.527,1691,3.03,1692,2.527,1693,1.898,1694,1.898,1695,1.898,1696,1.898,1697,1.898,1698,1.898,1699,1.898,1700,1.898,1701,1.898,1702,1.898,1703,3.03,1704,1.898,1705,1.086,1706,2.527,1707,1.898,1708,1.898,1709,1.086,1710,1.086,1747,0.899,1759,1.086,1831,1.086,1846,1.086,1862,1.086,1863,6.737,1864,1.248,1865,4.348,1866,2.182,1867,1.248,1868,1.248,1869,1.248,1870,4.964,1871,1.248,1872,1.248,1873,1.248,1874,1.248,1875,2.182,1876,1.248,1877,1.248,1878,1.248,1879,1.248,1880,1.248,1881,5.21,1882,1.248,1883,1.248,1884,1.248,1885,1.248,1886,1.248,1887,1.248,1888,1.248,1889,1.248,1890,1.248,1891,1.248,1892,1.248,1893,1.248,1894,1.248,1895,1.248,1896,4.348,1897,1.248,1898,1.248,1899,1.248,1900,1.248,1901,1.248,1902,2.905,1903,2.905,1904,2.905,1905,2.905,1906,1.248,1907,2.905,1908,1.248,1909,2.182,1910,1.248,1911,1.248,1912,2.182,1913,2.182,1914,1.248,1915,2.182,1916,1.248,1917,2.182,1918,1.248,1919,1.248,1920,1.248,1921,1.248,1922,1.248,1923,1.248,1924,1.248,1925,1.248,1926,1.248,1927,2.905,1928,1.248,1929,1.248,1930,1.248,1931,1.248,1932,1.248,1933,1.248,1934,1.248,1935,1.248,1936,1.248,1937,1.248,1938,1.248,1939,2.182,1940,2.905,1941,4.348,1942,1.248,1943,1.248,1944,1.248,1945,1.248,1946,1.248,1947,1.248,1948,1.248,1949,1.248,1950,1.248,1951,1.248]]],"invertedIndex":[["",{"_index":15,"title":{},"body":{"interfaces/AnonKeySet.html":{},"modules/AppModule.html":{},"classes/Block.html":{},"interfaces/BroadcastAccountConfig.html":{},"classes/Channel.html":{},"classes/ChannelDto.html":{},"classes/ChannelMember.html":{},"classes/ChannelMemberDto.html":{},"classes/ChannelMembersResolver.html":{},"classes/ChannelMessage.html":{},"classes/ChannelMessageDto.html":{},"classes/ChannelResolver.html":{},"controllers/ChannelsController.html":{},"modules/ChannelsModule.html":{},"classes/Contact.html":{},"classes/ContactDto.html":{},"classes/ContactHandshakeDto.html":{},"controllers/ContactsController.html":{},"modules/ContactsModule.html":{},"classes/ContactsResolver.html":{},"injectables/ContactsService.html":{},"classes/CreateChannelDto.html":{},"classes/CreateChannelMemberDto.html":{},"classes/CreateChannelMessageDto.html":{},"classes/CreateUserDto.html":{},"classes/CryptographyKeyPairDto.html":{},"modules/CryptographyModule.html":{},"injectables/CryptographyService.html":{},"classes/DbKeyManager.html":{},"classes/DbKeyPair.html":{},"controllers/DevelopmentController.html":{},"modules/DevelopmentModule.html":{},"classes/EkhoEvent.html":{},"classes/EkhoEventDto.html":{},"interfaces/EkhoWeb3Config.html":{},"classes/EncodedMessageDto.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"controllers/IpfsController.html":{},"classes/IpfsMessageDto.html":{},"modules/IpfsModule.html":{},"injectables/IpfsService.html":{},"interfaces/KeyManager.html":{},"modules/KeyManagerModule.html":{},"classes/Message.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/ProcessReport.html":{},"classes/RawMessageDto.html":{},"classes/SendMessageDto.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/StringIndexedObject.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"classes/VaultKeyManager.html":{},"interfaces/Web3Config.html":{},"controllers/Web3Controller.html":{},"modules/Web3Module.html":{},"injectables/Web3Service.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":316,"title":{},"body":{"classes/ChannelMessage.html":{},"injectables/CryptographyService.html":{},"injectables/EventsService.html":{},"injectables/Web3Service.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.0.9",{"_index":1717,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":1736,"title":{},"body":{"dependencies.html":{}}}],["0.2.22",{"_index":1745,"title":{},"body":{"dependencies.html":{}}}],["0.4.22",{"_index":1512,"title":{},"body":{"injectables/Web3Service.html":{}}}],["0/1",{"_index":1658,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1669,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1651,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":1652,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1653,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1648,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1645,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1647,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1646,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1650,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1649,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1688,"title":{},"body":{"coverage.html":{}}}],["0x",{"_index":1619,"title":{},"body":{"injectables/Web3Service.html":{}}}],["0x0",{"_index":200,"title":{},"body":{"interfaces/BroadcastAccountConfig.html":{},"interfaces/EkhoWeb3Config.html":{},"interfaces/Web3Config.html":{},"miscellaneous/variables.html":{}}}],["0x123",{"_index":201,"title":{},"body":{"interfaces/BroadcastAccountConfig.html":{},"interfaces/EkhoWeb3Config.html":{},"interfaces/Web3Config.html":{},"miscellaneous/variables.html":{}}}],["0x456",{"_index":202,"title":{},"body":{"interfaces/BroadcastAccountConfig.html":{},"interfaces/EkhoWeb3Config.html":{},"interfaces/Web3Config.html":{},"miscellaneous/variables.html":{}}}],["0x5b821362887db76980399bf4206ba747bef7ad95",{"_index":1509,"title":{},"body":{"injectables/Web3Service.html":{}}}],["0xffffff7f",{"_index":199,"title":{},"body":{"interfaces/BroadcastAccountConfig.html":{},"interfaces/EkhoWeb3Config.html":{},"interfaces/Web3Config.html":{},"miscellaneous/variables.html":{}}}],["1",{"_index":1191,"title":{},"body":{"controllers/MessagesController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["1.2.4",{"_index":1746,"title":{},"body":{"dependencies.html":{}}}],["1.22.0",{"_index":1775,"title":{},"body":{"index.html":{}}}],["1/1",{"_index":1668,"title":{},"body":{"coverage.html":{}}}],["1/14",{"_index":1712,"title":{},"body":{"coverage.html":{}}}],["1/9",{"_index":1641,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":1643,"title":{},"body":{"coverage.html":{},"overview.html":{}}}],["100",{"_index":1667,"title":{},"body":{"coverage.html":{}}}],["11",{"_index":1640,"title":{},"body":{"coverage.html":{},"overview.html":{}}}],["12/15",{"_index":1666,"title":{},"body":{"coverage.html":{}}}],["127.0.0.1",{"_index":1934,"title":{},"body":{"miscellaneous/variables.html":{}}}],["14.6.0",{"_index":1727,"title":{},"body":{"dependencies.html":{}}}],["19.03.5",{"_index":1770,"title":{},"body":{"index.html":{}}}],["2",{"_index":1192,"title":{},"body":{"controllers/MessagesController.html":{},"index.html":{}}}],["2.1.2",{"_index":1726,"title":{},"body":{"dependencies.html":{}}}],["2.24.0",{"_index":1732,"title":{},"body":{"dependencies.html":{}}}],["2.4.6",{"_index":1741,"title":{},"body":{"dependencies.html":{}}}],["2.9.16",{"_index":1725,"title":{},"body":{"dependencies.html":{}}}],["2/4",{"_index":1679,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":1431,"title":{},"body":{"classes/VaultKeyManager.html":{}}}],["2020/01/15",{"_index":1779,"title":{},"body":{"index.html":{}}}],["204",{"_index":1444,"title":{},"body":{"classes/VaultKeyManager.html":{}}}],["256",{"_index":756,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["3",{"_index":1193,"title":{},"body":{"controllers/MessagesController.html":{},"index.html":{}}}],["3.0.0",{"_index":1738,"title":{},"body":{"dependencies.html":{}}}],["32",{"_index":77,"title":{},"body":{"interfaces/AnonKeySet.html":{},"injectables/CryptographyService.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["4.0.6",{"_index":1729,"title":{},"body":{"dependencies.html":{}}}],["4.1.2",{"_index":1744,"title":{},"body":{"dependencies.html":{}}}],["4.1.7",{"_index":1722,"title":{},"body":{"dependencies.html":{}}}],["4/40",{"_index":1644,"title":{},"body":{"coverage.html":{}}}],["40.2.1",{"_index":1730,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":1678,"title":{},"body":{"coverage.html":{}}}],["500",{"_index":459,"title":{},"body":{"classes/Contact.html":{},"classes/User.html":{}}}],["6.2.0",{"_index":1723,"title":{},"body":{"dependencies.html":{}}}],["6.5.3",{"_index":1740,"title":{},"body":{"dependencies.html":{}}}],["6.5.4",{"_index":1719,"title":{},"body":{"dependencies.html":{}}}],["6.7.2",{"_index":1716,"title":{},"body":{"dependencies.html":{}}}],["633a0ea838",{"_index":1772,"title":{},"body":{"index.html":{}}}],["7",{"_index":1711,"title":{},"body":{"coverage.html":{}}}],["7.17.1",{"_index":1734,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":701,"title":{},"body":{"injectables/CryptographyService.html":{},"injectables/IpfsService.html":{},"overview.html":{}}}],["80",{"_index":1665,"title":{},"body":{"coverage.html":{}}}],["8080",{"_index":1935,"title":{},"body":{"miscellaneous/variables.html":{}}}],["abi",{"_index":1938,"title":{},"body":{"miscellaneous/variables.html":{}}}],["acceptinithandshake",{"_index":491,"title":{},"body":{"controllers/ContactsController.html":{},"classes/ContactsResolver.html":{},"injectables/ContactsService.html":{},"miscellaneous/variables.html":{}}}],["acceptinithandshake(userid",{"_index":497,"title":{},"body":{"controllers/ContactsController.html":{},"injectables/ContactsService.html":{}}}],["acceptreplyhandshake",{"_index":492,"title":{},"body":{"controllers/ContactsController.html":{},"injectables/ContactsService.html":{},"miscellaneous/variables.html":{}}}],["acceptreplyhandshake(userid",{"_index":503,"title":{},"body":{"controllers/ContactsController.html":{},"injectables/ContactsService.html":{}}}],["accessible",{"_index":1796,"title":{},"body":{"index.html":{}}}],["account",{"_index":1491,"title":{},"body":{"injectables/Web3Service.html":{}}}],["add",{"_index":1111,"title":{},"body":{"injectables/IpfsService.html":{},"miscellaneous/variables.html":{}}}],["add/commit/push",{"_index":1856,"title":{},"body":{"index.html":{}}}],["added",{"_index":1114,"title":{},"body":{"injectables/IpfsService.html":{}}}],["address",{"_index":172,"title":{},"body":{"interfaces/BroadcastAccountConfig.html":{},"interfaces/EkhoWeb3Config.html":{},"interfaces/Web3Config.html":{},"injectables/Web3Service.html":{},"miscellaneous/variables.html":{}}}],["addressed",{"_index":1103,"title":{},"body":{"injectables/IpfsService.html":{}}}],["addselect(['ekhoevent.channelid",{"_index":1045,"title":{},"body":{"injectables/EventsService.html":{}}}],["alice",{"_index":30,"title":{},"body":{"interfaces/AnonKeySet.html":{},"injectables/MessagesService.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"miscellaneous/variables.html":{}}}],["already",{"_index":1235,"title":{},"body":{"injectables/MessagesService.html":{}}}],["anon",{"_index":1881,"title":{},"body":{"miscellaneous/variables.html":{}}}],["anon_channelid",{"_index":1876,"title":{},"body":{"miscellaneous/variables.html":{}}}],["anonblock",{"_index":1671,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["anonchannel",{"_index":1690,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["anonchannelmember",{"_index":1691,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["anonchannelmessage",{"_index":1692,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["anoncontact",{"_index":1657,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["anoncontacthandshakedto",{"_index":1659,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["anonevent",{"_index":1672,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["anonipfsmessage",{"_index":1681,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["anonkeyset",{"_index":1,"title":{"interfaces/AnonKeySet.html":{}},"body":{"interfaces/AnonKeySet.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"coverage.html":{}}}],["anonmessage",{"_index":1693,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["anonsendmessagedto",{"_index":1694,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["anonuser",{"_index":1702,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["anonymous",{"_index":58,"title":{},"body":{"interfaces/AnonKeySet.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"miscellaneous/variables.html":{}}}],["apiproperty",{"_index":230,"title":{},"body":{"classes/ChannelDto.html":{},"classes/ChannelMemberDto.html":{},"classes/ChannelMessageDto.html":{},"classes/CreateChannelDto.html":{},"classes/CreateChannelMemberDto.html":{},"classes/CreateChannelMessageDto.html":{},"classes/CreateUserDto.html":{},"classes/EkhoEventDto.html":{},"classes/EncodedMessageDto.html":{},"classes/IpfsMessageDto.html":{},"classes/ProcessReport.html":{},"classes/RawMessageDto.html":{},"classes/SendMessageDto.html":{},"classes/UserDto.html":{}}}],["apiproperty({description",{"_index":265,"title":{},"body":{"classes/ChannelMemberDto.html":{},"classes/ChannelMessageDto.html":{},"classes/CreateChannelDto.html":{},"classes/CreateChannelMemberDto.html":{},"classes/CreateChannelMessageDto.html":{},"classes/EkhoEventDto.html":{},"classes/EncodedMessageDto.html":{},"classes/IpfsMessageDto.html":{},"classes/ProcessReport.html":{},"classes/RawMessageDto.html":{}}}],["apiquery",{"_index":387,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["apiquery({name",{"_index":369,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["apollo",{"_index":1724,"title":{},"body":{"dependencies.html":{}}}],["app",{"_index":1762,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":93,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["arg('contactname",{"_index":552,"title":{},"body":{"classes/ContactsResolver.html":{}}}],["arg('userid",{"_index":551,"title":{},"body":{"classes/ContactsResolver.html":{}}}],["args",{"_index":1369,"title":{},"body":{"classes/UsersResolver.html":{}}}],["asc",{"_index":1051,"title":{},"body":{"injectables/EventsService.html":{}}}],["async",{"_index":66,"title":{},"body":{"interfaces/AnonKeySet.html":{},"classes/ChannelMembersResolver.html":{},"classes/ChannelResolver.html":{},"controllers/ChannelsController.html":{},"controllers/ContactsController.html":{},"classes/ContactsResolver.html":{},"injectables/ContactsService.html":{},"classes/DbKeyManager.html":{},"controllers/DevelopmentController.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/IpfsController.html":{},"injectables/IpfsService.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"controllers/UsersController.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"classes/VaultKeyManager.html":{},"controllers/Web3Controller.html":{},"injectables/Web3Service.html":{},"miscellaneous/variables.html":{}}}],["autoschemafile",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["await",{"_index":74,"title":{},"body":{"interfaces/AnonKeySet.html":{},"controllers/ContactsController.html":{},"injectables/ContactsService.html":{},"classes/DbKeyManager.html":{},"controllers/DevelopmentController.html":{},"injectables/EventsService.html":{},"injectables/IpfsService.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"injectables/UsersService.html":{},"classes/VaultKeyManager.html":{},"injectables/Web3Service.html":{},"miscellaneous/variables.html":{}}}],["axios",{"_index":1438,"title":{},"body":{"classes/VaultKeyManager.html":{}}}],["axios.create",{"_index":1920,"title":{},"body":{"miscellaneous/variables.html":{}}}],["axiosclient",{"_index":1919,"title":{},"body":{"miscellaneous/variables.html":{}}}],["axiosinstance",{"_index":1424,"title":{},"body":{"classes/VaultKeyManager.html":{},"miscellaneous/variables.html":{}}}],["axiosresponse",{"_index":1427,"title":{},"body":{"classes/VaultKeyManager.html":{}}}],["badly",{"_index":1122,"title":{},"body":{"injectables/IpfsService.html":{}}}],["balls",{"_index":1883,"title":{},"body":{"miscellaneous/variables.html":{}}}],["base64",{"_index":780,"title":{},"body":{"injectables/CryptographyService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["baseurl",{"_index":1913,"title":{},"body":{"miscellaneous/variables.html":{}}}],["being",{"_index":64,"title":{},"body":{"interfaces/AnonKeySet.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/StringIndexedObject.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"miscellaneous/variables.html":{}}}],["best",{"_index":1505,"title":{},"body":{"injectables/Web3Service.html":{}}}],["bit",{"_index":732,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["block",{"_index":145,"title":{"classes/Block.html":{}},"body":{"classes/Block.html":{},"classes/EkhoEvent.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"injectables/Web3Service.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["block.blockevents",{"_index":938,"title":{},"body":{"classes/EkhoEvent.html":{}}}],["blockchain",{"_index":195,"title":{},"body":{"interfaces/BroadcastAccountConfig.html":{},"controllers/ChannelsController.html":{},"interfaces/EkhoWeb3Config.html":{},"injectables/EventsService.html":{},"interfaces/Web3Config.html":{},"injectables/Web3Service.html":{},"miscellaneous/variables.html":{}}}],["blockevents",{"_index":148,"title":{},"body":{"classes/Block.html":{},"miscellaneous/variables.html":{}}}],["blockid",{"_index":924,"title":{},"body":{"classes/EkhoEvent.html":{}}}],["blocknumber",{"_index":149,"title":{},"body":{"classes/Block.html":{},"injectables/Web3Service.html":{},"miscellaneous/variables.html":{}}}],["blockrepository",{"_index":999,"title":{},"body":{"injectables/EventsService.html":{}}}],["blocks.entity",{"_index":937,"title":{},"body":{"classes/EkhoEvent.html":{}}}],["bob",{"_index":31,"title":{},"body":{"interfaces/AnonKeySet.html":{},"controllers/MessagesController.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"miscellaneous/variables.html":{}}}],["body",{"_index":386,"title":{},"body":{"controllers/ChannelsController.html":{},"controllers/ContactsController.html":{},"controllers/IpfsController.html":{},"controllers/MessagesController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":774,"title":{},"body":{"injectables/CryptographyService.html":{},"classes/EkhoEvent.html":{}}}],["bootstrap",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"modules/ChannelsModule.html":{},"modules/ContactsModule.html":{},"modules/CryptographyModule.html":{},"modules/DevelopmentModule.html":{},"modules/EventsModule.html":{},"modules/IpfsModule.html":{},"modules/KeyManagerModule.html":{},"modules/MessagesModule.html":{},"modules/UsersModule.html":{},"modules/Web3Module.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["break",{"_index":1196,"title":{},"body":{"controllers/MessagesController.html":{}}}],["brings",{"_index":1800,"title":{},"body":{"index.html":{}}}],["broadcastaccount",{"_index":187,"title":{},"body":{"interfaces/BroadcastAccountConfig.html":{},"interfaces/EkhoWeb3Config.html":{},"interfaces/Web3Config.html":{},"miscellaneous/variables.html":{}}}],["broadcastaccountconfig",{"_index":170,"title":{"interfaces/BroadcastAccountConfig.html":{}},"body":{"interfaces/BroadcastAccountConfig.html":{},"interfaces/EkhoWeb3Config.html":{},"interfaces/Web3Config.html":{},"coverage.html":{}}}],["browse",{"_index":1860,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1857,"title":{},"body":{"modules.html":{}}}],["buff",{"_index":832,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["buffer",{"_index":79,"title":{},"body":{"interfaces/AnonKeySet.html":{},"injectables/CryptographyService.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"miscellaneous/variables.html":{}}}],["buffer.alloc(32",{"_index":830,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["buffer.from(context",{"_index":813,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["buffer.from(data",{"_index":799,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["buffer.from(data).tostring('base64",{"_index":1447,"title":{},"body":{"classes/VaultKeyManager.html":{}}}],["buffer.from(datastr",{"_index":819,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["buffer.from(keystr",{"_index":821,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["buffer.from(privatekey",{"_index":794,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["buffer.from(privatesigningkey",{"_index":800,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["buffer.from(publickey",{"_index":795,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["buffer.from(publicsigningkey",{"_index":805,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["buffer.from(secret",{"_index":815,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["buffer.from(signature",{"_index":804,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["buffer.from(stringdata",{"_index":1130,"title":{},"body":{"injectables/IpfsService.html":{}}}],["buffer.from(this.privatekey",{"_index":1593,"title":{},"body":{"injectables/Web3Service.html":{}}}],["buffereddata",{"_index":1129,"title":{},"body":{"injectables/IpfsService.html":{}}}],["bufferedprivatekey",{"_index":1592,"title":{},"body":{"injectables/Web3Service.html":{}}}],["bufferencoding",{"_index":693,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["buffers",{"_index":747,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["buffertohex",{"_index":1525,"title":{},"body":{"injectables/Web3Service.html":{}}}],["buffertohex(tx.getsenderaddress",{"_index":1610,"title":{},"body":{"injectables/Web3Service.html":{}}}],["build",{"_index":1771,"title":{},"body":{"index.html":{}}}],["builder",{"_index":1927,"title":{},"body":{"miscellaneous/variables.html":{}}}],["builders",{"_index":1911,"title":{},"body":{"miscellaneous/variables.html":{}}}],["builders[type",{"_index":1928,"title":{},"body":{"miscellaneous/variables.html":{}}}],["byte",{"_index":78,"title":{},"body":{"interfaces/AnonKeySet.html":{},"injectables/CryptographyService.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"miscellaneous/variables.html":{}}}],["c25519",{"_index":741,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["cachedblocks",{"_index":1026,"title":{},"body":{"injectables/EventsService.html":{}}}],["cachedblocks.max",{"_index":1032,"title":{},"body":{"injectables/EventsService.html":{}}}],["calculate",{"_index":1233,"title":{},"body":{"injectables/MessagesService.html":{}}}],["calculated",{"_index":1270,"title":{},"body":{"classes/SendMessageDto.html":{}}}],["cascade",{"_index":154,"title":{},"body":{"classes/Block.html":{}}}],["catch",{"_index":1408,"title":{},"body":{"injectables/UsersService.html":{},"injectables/Web3Service.html":{}}}],["chacha20",{"_index":738,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["chain",{"_index":177,"title":{},"body":{"interfaces/BroadcastAccountConfig.html":{},"classes/ChannelMemberDto.html":{},"classes/CreateChannelMemberDto.html":{},"interfaces/EkhoWeb3Config.html":{},"interfaces/Web3Config.html":{},"injectables/Web3Service.html":{},"miscellaneous/variables.html":{}}}],["change",{"_index":1574,"title":{},"body":{"injectables/Web3Service.html":{}}}],["channel",{"_index":205,"title":{"classes/Channel.html":{}},"body":{"classes/Channel.html":{},"classes/ChannelDto.html":{},"classes/ChannelMember.html":{},"classes/ChannelMemberDto.html":{},"classes/ChannelMessageDto.html":{},"classes/ChannelResolver.html":{},"controllers/ChannelsController.html":{},"modules/ChannelsModule.html":{},"classes/CreateChannelDto.html":{},"classes/CreateChannelMemberDto.html":{},"classes/CreateChannelMessageDto.html":{},"classes/EkhoEventDto.html":{},"classes/EncodedMessageDto.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"classes/RawMessageDto.html":{},"classes/SendMessageDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["channel(@args('data",{"_index":335,"title":{},"body":{"classes/ChannelResolver.html":{}}}],["channel.channelmembers",{"_index":259,"title":{},"body":{"classes/ChannelMember.html":{}}}],["channel.dto",{"_index":389,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["channel.dto.ts",{"_index":645,"title":{},"body":{"classes/CreateChannelDto.html":{},"coverage.html":{}}}],["channel.dto.ts:10",{"_index":649,"title":{},"body":{"classes/CreateChannelDto.html":{}}}],["channel.dto.ts:12",{"_index":646,"title":{},"body":{"classes/CreateChannelDto.html":{}}}],["channel.dto.ts:8",{"_index":647,"title":{},"body":{"classes/CreateChannelDto.html":{}}}],["channeldto",{"_index":224,"title":{"classes/ChannelDto.html":{}},"body":{"classes/ChannelDto.html":{},"coverage.html":{}}}],["channelid",{"_index":242,"title":{},"body":{"classes/ChannelMember.html":{},"classes/CreateChannelMemberDto.html":{},"classes/EkhoEvent.html":{},"injectables/EventsService.html":{},"classes/Message.html":{},"injectables/MessagesService.html":{},"classes/RawMessageDto.html":{},"classes/SendMessageDto.html":{},"controllers/Web3Controller.html":{},"injectables/Web3Service.html":{},"miscellaneous/variables.html":{}}}],["channelidentifier",{"_index":941,"title":{},"body":{"classes/EkhoEventDto.html":{},"classes/EncodedMessageDto.html":{}}}],["channelkey",{"_index":207,"title":{},"body":{"classes/Channel.html":{},"classes/ChannelDto.html":{},"miscellaneous/variables.html":{}}}],["channelmember",{"_index":212,"title":{"classes/ChannelMember.html":{}},"body":{"classes/Channel.html":{},"classes/ChannelMember.html":{},"classes/ChannelMembersResolver.html":{},"classes/ChannelMessage.html":{},"classes/ChannelResolver.html":{},"controllers/ChannelsController.html":{},"modules/ChannelsModule.html":{},"classes/Contact.html":{},"classes/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["channelmember.channel",{"_index":223,"title":{},"body":{"classes/Channel.html":{}}}],["channelmember.channelmessages",{"_index":318,"title":{},"body":{"classes/ChannelMessage.html":{}}}],["channelmember.contact",{"_index":472,"title":{},"body":{"classes/Contact.html":{}}}],["channelmember.dto.ts",{"_index":651,"title":{},"body":{"classes/CreateChannelMemberDto.html":{},"coverage.html":{}}}],["channelmember.dto.ts:11",{"_index":652,"title":{},"body":{"classes/CreateChannelMemberDto.html":{}}}],["channelmember.dto.ts:15",{"_index":655,"title":{},"body":{"classes/CreateChannelMemberDto.html":{}}}],["channelmember.dto.ts:19",{"_index":653,"title":{},"body":{"classes/CreateChannelMemberDto.html":{}}}],["channelmember.dto.ts:8",{"_index":654,"title":{},"body":{"classes/CreateChannelMemberDto.html":{}}}],["channelmember.user",{"_index":1331,"title":{},"body":{"classes/User.html":{}}}],["channelmemberdto",{"_index":263,"title":{"classes/ChannelMemberDto.html":{}},"body":{"classes/ChannelMemberDto.html":{},"coverage.html":{}}}],["channelmemberid",{"_index":321,"title":{},"body":{"classes/ChannelMessageDto.html":{},"classes/CreateChannelMessageDto.html":{}}}],["channelmembers",{"_index":208,"title":{},"body":{"classes/Channel.html":{},"classes/ChannelResolver.html":{},"classes/Contact.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["channelmembers(@root",{"_index":337,"title":{},"body":{"classes/ChannelResolver.html":{}}}],["channelmembers(channel",{"_index":329,"title":{},"body":{"classes/ChannelResolver.html":{}}}],["channelmembers.entity",{"_index":221,"title":{},"body":{"classes/Channel.html":{},"classes/ChannelMessage.html":{}}}],["channelmembersresolver",{"_index":276,"title":{"classes/ChannelMembersResolver.html":{}},"body":{"classes/ChannelMembersResolver.html":{},"modules/ChannelsModule.html":{},"coverage.html":{}}}],["channelmessage",{"_index":244,"title":{"classes/ChannelMessage.html":{}},"body":{"classes/ChannelMember.html":{},"classes/ChannelMessage.html":{},"controllers/ChannelsController.html":{},"modules/ChannelsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["channelmessage.channelmember",{"_index":262,"title":{},"body":{"classes/ChannelMember.html":{}}}],["channelmessage.dto.ts",{"_index":657,"title":{},"body":{"classes/CreateChannelMessageDto.html":{},"coverage.html":{}}}],["channelmessage.dto.ts:5",{"_index":659,"title":{},"body":{"classes/CreateChannelMessageDto.html":{}}}],["channelmessage.dto.ts:8",{"_index":658,"title":{},"body":{"classes/CreateChannelMessageDto.html":{}}}],["channelmessagedto",{"_index":319,"title":{"classes/ChannelMessageDto.html":{}},"body":{"classes/ChannelMessageDto.html":{},"coverage.html":{}}}],["channelmessages",{"_index":235,"title":{},"body":{"classes/ChannelMember.html":{},"miscellaneous/variables.html":{}}}],["channelmessages.entity",{"_index":257,"title":{},"body":{"classes/ChannelMember.html":{}}}],["channelresolver",{"_index":326,"title":{"classes/ChannelResolver.html":{}},"body":{"classes/ChannelResolver.html":{},"modules/ChannelsModule.html":{},"coverage.html":{}}}],["channels",{"_index":344,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["channels.controller",{"_index":441,"title":{},"body":{"modules/ChannelsModule.html":{}}}],["channels.entity",{"_index":258,"title":{},"body":{"classes/ChannelMember.html":{}}}],["channels.service",{"_index":298,"title":{},"body":{"classes/ChannelMembersResolver.html":{},"classes/ChannelResolver.html":{},"controllers/ChannelsController.html":{},"modules/ChannelsModule.html":{}}}],["channels/channels.module",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["channels/entities/channelmembers.entity",{"_index":468,"title":{},"body":{"classes/Contact.html":{},"classes/User.html":{}}}],["channelscontroller",{"_index":340,"title":{"controllers/ChannelsController.html":{}},"body":{"controllers/ChannelsController.html":{},"modules/ChannelsModule.html":{},"coverage.html":{}}}],["channelservice",{"_index":287,"title":{},"body":{"classes/ChannelMembersResolver.html":{},"classes/ChannelResolver.html":{},"controllers/ChannelsController.html":{}}}],["channelsmodule",{"_index":103,"title":{"modules/ChannelsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ChannelsModule.html":{},"modules.html":{},"overview.html":{}}}],["channelsservice",{"_index":283,"title":{},"body":{"classes/ChannelMembersResolver.html":{},"classes/ChannelResolver.html":{},"controllers/ChannelsController.html":{},"modules/ChannelsModule.html":{},"coverage.html":{},"overview.html":{}}}],["check",{"_index":1124,"title":{},"body":{"injectables/IpfsService.html":{},"injectables/MessagesService.html":{},"injectables/Web3Service.html":{},"index.html":{}}}],["checkresponse",{"_index":1422,"title":{},"body":{"classes/VaultKeyManager.html":{}}}],["checkresponse(response",{"_index":1426,"title":{},"body":{"classes/VaultKeyManager.html":{}}}],["childkeys",{"_index":1306,"title":{},"body":{"interfaces/StringIndexedObject.html":{},"miscellaneous/variables.html":{}}}],["ci",{"_index":1841,"title":{},"body":{"index.html":{}}}],["class",{"_index":144,"title":{"classes/Block.html":{},"classes/Channel.html":{},"classes/ChannelDto.html":{},"classes/ChannelMember.html":{},"classes/ChannelMemberDto.html":{},"classes/ChannelMembersResolver.html":{},"classes/ChannelMessage.html":{},"classes/ChannelMessageDto.html":{},"classes/ChannelResolver.html":{},"classes/Contact.html":{},"classes/ContactDto.html":{},"classes/ContactHandshakeDto.html":{},"classes/ContactsResolver.html":{},"classes/CreateChannelDto.html":{},"classes/CreateChannelMemberDto.html":{},"classes/CreateChannelMessageDto.html":{},"classes/CreateUserDto.html":{},"classes/CryptographyKeyPairDto.html":{},"classes/DbKeyManager.html":{},"classes/DbKeyPair.html":{},"classes/EkhoEvent.html":{},"classes/EkhoEventDto.html":{},"classes/EncodedMessageDto.html":{},"classes/IpfsMessageDto.html":{},"classes/Message.html":{},"classes/ProcessReport.html":{},"classes/RawMessageDto.html":{},"classes/SendMessageDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"classes/UsersResolver.html":{},"classes/VaultKeyManager.html":{}},"body":{"modules/AppModule.html":{},"classes/Block.html":{},"classes/Channel.html":{},"classes/ChannelDto.html":{},"classes/ChannelMember.html":{},"classes/ChannelMemberDto.html":{},"classes/ChannelMembersResolver.html":{},"classes/ChannelMessage.html":{},"classes/ChannelMessageDto.html":{},"classes/ChannelResolver.html":{},"controllers/ChannelsController.html":{},"modules/ChannelsModule.html":{},"classes/Contact.html":{},"classes/ContactDto.html":{},"classes/ContactHandshakeDto.html":{},"controllers/ContactsController.html":{},"modules/ContactsModule.html":{},"classes/ContactsResolver.html":{},"injectables/ContactsService.html":{},"classes/CreateChannelDto.html":{},"classes/CreateChannelMemberDto.html":{},"classes/CreateChannelMessageDto.html":{},"classes/CreateUserDto.html":{},"classes/CryptographyKeyPairDto.html":{},"modules/CryptographyModule.html":{},"injectables/CryptographyService.html":{},"classes/DbKeyManager.html":{},"classes/DbKeyPair.html":{},"controllers/DevelopmentController.html":{},"modules/DevelopmentModule.html":{},"classes/EkhoEvent.html":{},"classes/EkhoEventDto.html":{},"classes/EncodedMessageDto.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"controllers/IpfsController.html":{},"classes/IpfsMessageDto.html":{},"modules/IpfsModule.html":{},"injectables/IpfsService.html":{},"modules/KeyManagerModule.html":{},"classes/Message.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/ProcessReport.html":{},"classes/RawMessageDto.html":{},"classes/SendMessageDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"classes/VaultKeyManager.html":{},"controllers/Web3Controller.html":{},"modules/Web3Module.html":{},"injectables/Web3Service.html":{},"coverage.html":{}}}],["classes",{"_index":146,"title":{},"body":{"classes/Block.html":{},"classes/Channel.html":{},"classes/ChannelDto.html":{},"classes/ChannelMember.html":{},"classes/ChannelMemberDto.html":{},"classes/ChannelMembersResolver.html":{},"classes/ChannelMessage.html":{},"classes/ChannelMessageDto.html":{},"classes/ChannelResolver.html":{},"classes/Contact.html":{},"classes/ContactDto.html":{},"classes/ContactHandshakeDto.html":{},"classes/ContactsResolver.html":{},"classes/CreateChannelDto.html":{},"classes/CreateChannelMemberDto.html":{},"classes/CreateChannelMessageDto.html":{},"classes/CreateUserDto.html":{},"classes/CryptographyKeyPairDto.html":{},"classes/DbKeyManager.html":{},"classes/DbKeyPair.html":{},"classes/EkhoEvent.html":{},"classes/EkhoEventDto.html":{},"classes/EncodedMessageDto.html":{},"classes/IpfsMessageDto.html":{},"classes/Message.html":{},"classes/ProcessReport.html":{},"classes/RawMessageDto.html":{},"classes/SendMessageDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"classes/UsersResolver.html":{},"classes/VaultKeyManager.html":{},"overview.html":{}}}],["client",{"_index":1116,"title":{},"body":{"injectables/IpfsService.html":{},"classes/VaultKeyManager.html":{},"dependencies.html":{}}}],["cluster_appmodule",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_channelsmodule",{"_index":428,"title":{},"body":{"modules/ChannelsModule.html":{},"overview.html":{}}}],["cluster_channelsmodule_exports",{"_index":430,"title":{},"body":{"modules/ChannelsModule.html":{},"overview.html":{}}}],["cluster_channelsmodule_imports",{"_index":429,"title":{},"body":{"modules/ChannelsModule.html":{},"overview.html":{}}}],["cluster_channelsmodule_providers",{"_index":431,"title":{},"body":{"modules/ChannelsModule.html":{},"overview.html":{}}}],["cluster_contactsmodule",{"_index":535,"title":{},"body":{"modules/ContactsModule.html":{},"overview.html":{}}}],["cluster_contactsmodule_exports",{"_index":537,"title":{},"body":{"modules/ContactsModule.html":{},"overview.html":{}}}],["cluster_contactsmodule_imports",{"_index":536,"title":{},"body":{"modules/ContactsModule.html":{}}}],["cluster_contactsmodule_providers",{"_index":538,"title":{},"body":{"modules/ContactsModule.html":{},"overview.html":{}}}],["cluster_cryptographymodule",{"_index":669,"title":{},"body":{"modules/CryptographyModule.html":{},"overview.html":{}}}],["cluster_cryptographymodule_exports",{"_index":670,"title":{},"body":{"modules/CryptographyModule.html":{},"overview.html":{}}}],["cluster_cryptographymodule_providers",{"_index":671,"title":{},"body":{"modules/CryptographyModule.html":{},"overview.html":{}}}],["cluster_developmentmodule",{"_index":913,"title":{},"body":{"modules/DevelopmentModule.html":{}}}],["cluster_developmentmodule_imports",{"_index":914,"title":{},"body":{"modules/DevelopmentModule.html":{}}}],["cluster_eventsmodule",{"_index":982,"title":{},"body":{"modules/EventsModule.html":{},"overview.html":{}}}],["cluster_eventsmodule_exports",{"_index":983,"title":{},"body":{"modules/EventsModule.html":{},"overview.html":{}}}],["cluster_eventsmodule_providers",{"_index":984,"title":{},"body":{"modules/EventsModule.html":{},"overview.html":{}}}],["cluster_ipfsmodule",{"_index":1087,"title":{},"body":{"modules/IpfsModule.html":{},"overview.html":{}}}],["cluster_ipfsmodule_exports",{"_index":1088,"title":{},"body":{"modules/IpfsModule.html":{},"overview.html":{}}}],["cluster_ipfsmodule_providers",{"_index":1089,"title":{},"body":{"modules/IpfsModule.html":{},"overview.html":{}}}],["cluster_keymanagermodule",{"_index":1143,"title":{},"body":{"modules/KeyManagerModule.html":{}}}],["cluster_keymanagermodule_imports",{"_index":1144,"title":{},"body":{"modules/KeyManagerModule.html":{}}}],["cluster_messagesmodule",{"_index":1197,"title":{},"body":{"modules/MessagesModule.html":{},"overview.html":{}}}],["cluster_messagesmodule_exports",{"_index":1199,"title":{},"body":{"modules/MessagesModule.html":{},"overview.html":{}}}],["cluster_messagesmodule_imports",{"_index":1198,"title":{},"body":{"modules/MessagesModule.html":{}}}],["cluster_messagesmodule_providers",{"_index":1200,"title":{},"body":{"modules/MessagesModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1352,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1354,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":1353,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":1355,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_web3module",{"_index":1471,"title":{},"body":{"modules/Web3Module.html":{},"overview.html":{}}}],["cluster_web3module_exports",{"_index":1473,"title":{},"body":{"modules/Web3Module.html":{},"overview.html":{}}}],["cluster_web3module_imports",{"_index":1472,"title":{},"body":{"modules/Web3Module.html":{}}}],["cluster_web3module_providers",{"_index":1474,"title":{},"body":{"modules/Web3Module.html":{},"overview.html":{}}}],["code",{"_index":1807,"title":{},"body":{"index.html":{}}}],["column",{"_index":158,"title":{},"body":{"classes/Block.html":{},"classes/Channel.html":{},"classes/ChannelMember.html":{},"classes/ChannelMessage.html":{},"classes/Contact.html":{},"classes/DbKeyPair.html":{},"classes/EkhoEvent.html":{},"classes/Message.html":{},"classes/User.html":{}}}],["column({default",{"_index":315,"title":{},"body":{"classes/ChannelMessage.html":{}}}],["column({nullable",{"_index":926,"title":{},"body":{"classes/EkhoEvent.html":{}}}],["columns",{"_index":1285,"title":{},"body":{"interfaces/StringIndexedObject.html":{},"miscellaneous/variables.html":{}}}],["committransaction",{"_index":1280,"title":{},"body":{"interfaces/StringIndexedObject.html":{},"miscellaneous/variables.html":{}}}],["communication",{"_index":1754,"title":{},"body":{"index.html":{}}}],["compodoc",{"_index":1848,"title":{},"body":{"index.html":{}}}],["compose",{"_index":1773,"title":{},"body":{"index.html":{}}}],["config",{"_index":1293,"title":{},"body":{"interfaces/StringIndexedObject.html":{},"miscellaneous/variables.html":{}}}],["config.get('ipfs.host",{"_index":1906,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config.get('ipfs.port",{"_index":1908,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config.get('keymanager.type",{"_index":1926,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config.get('keymanager.vault.timeout",{"_index":1916,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config.get('keymanager.vault.token",{"_index":1918,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config.get('keymanager.vault.url",{"_index":1914,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config.get('web3.rpcurl",{"_index":1949,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configmodule",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":1091,"title":{},"body":{"modules/IpfsModule.html":{},"interfaces/StringIndexedObject.html":{},"modules/Web3Module.html":{},"injectables/Web3Service.html":{},"miscellaneous/variables.html":{}}}],["configuration",{"_index":1853,"title":{},"body":{"index.html":{}}}],["connection",{"_index":1289,"title":{},"body":{"interfaces/StringIndexedObject.html":{},"miscellaneous/variables.html":{}}}],["const",{"_index":55,"title":{},"body":{"interfaces/AnonKeySet.html":{},"interfaces/BroadcastAccountConfig.html":{},"injectables/ContactsService.html":{},"injectables/CryptographyService.html":{},"classes/DbKeyManager.html":{},"controllers/DevelopmentController.html":{},"interfaces/EkhoWeb3Config.html":{},"injectables/EventsService.html":{},"injectables/IpfsService.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/StringIndexedObject.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"injectables/UsersService.html":{},"classes/VaultKeyManager.html":{},"interfaces/Web3Config.html":{},"injectables/Web3Service.html":{},"miscellaneous/variables.html":{}}}],["constant",{"_index":1943,"title":{},"body":{"miscellaneous/variables.html":{}}}],["constructor",{"_index":281,"title":{},"body":{"classes/ChannelMembersResolver.html":{},"classes/ChannelResolver.html":{},"classes/ContactsResolver.html":{},"injectables/ContactsService.html":{},"classes/DbKeyManager.html":{},"controllers/DevelopmentController.html":{},"injectables/EventsService.html":{},"injectables/IpfsService.html":{},"injectables/MessagesService.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"classes/VaultKeyManager.html":{},"injectables/Web3Service.html":{}}}],["constructor(channelservice",{"_index":282,"title":{},"body":{"classes/ChannelMembersResolver.html":{},"classes/ChannelResolver.html":{}}}],["constructor(client",{"_index":1423,"title":{},"body":{"classes/VaultKeyManager.html":{}}}],["constructor(contactsrepository",{"_index":565,"title":{},"body":{"injectables/ContactsService.html":{}}}],["constructor(contactsservice",{"_index":545,"title":{},"body":{"classes/ContactsResolver.html":{}}}],["constructor(eventsrepository",{"_index":998,"title":{},"body":{"injectables/EventsService.html":{}}}],["constructor(eventsservice",{"_index":1485,"title":{},"body":{"injectables/Web3Service.html":{}}}],["constructor(ipfs",{"_index":1099,"title":{},"body":{"injectables/IpfsService.html":{}}}],["constructor(keypairrepository",{"_index":846,"title":{},"body":{"classes/DbKeyManager.html":{}}}],["constructor(messagerepository",{"_index":1206,"title":{},"body":{"injectables/MessagesService.html":{}}}],["constructor(private",{"_index":301,"title":{},"body":{"classes/ChannelMembersResolver.html":{},"classes/ChannelResolver.html":{},"controllers/ChannelsController.html":{},"controllers/ContactsController.html":{},"classes/ContactsResolver.html":{},"controllers/EventsController.html":{},"controllers/IpfsController.html":{},"injectables/IpfsService.html":{},"controllers/MessagesController.html":{},"controllers/UsersController.html":{},"classes/UsersResolver.html":{},"classes/VaultKeyManager.html":{},"controllers/Web3Controller.html":{}}}],["constructor(userrepository",{"_index":1379,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":1363,"title":{},"body":{"classes/UsersResolver.html":{}}}],["contact",{"_index":236,"title":{"classes/Contact.html":{}},"body":{"classes/ChannelMember.html":{},"classes/ChannelMemberDto.html":{},"classes/ChannelMembersResolver.html":{},"controllers/ChannelsController.html":{},"modules/ChannelsModule.html":{},"classes/Contact.html":{},"classes/ContactDto.html":{},"controllers/ContactsController.html":{},"modules/ContactsModule.html":{},"classes/ContactsResolver.html":{},"injectables/ContactsService.html":{},"classes/CreateChannelDto.html":{},"classes/CreateChannelMemberDto.html":{},"controllers/DevelopmentController.html":{},"classes/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["contact.channelmembers",{"_index":261,"title":{},"body":{"classes/ChannelMember.html":{}}}],["contact.handshakeprivatekey",{"_index":610,"title":{},"body":{"injectables/ContactsService.html":{},"controllers/DevelopmentController.html":{}}}],["contact.handshakepublickey",{"_index":612,"title":{},"body":{"injectables/ContactsService.html":{},"controllers/DevelopmentController.html":{}}}],["contact.id",{"_index":905,"title":{},"body":{"controllers/DevelopmentController.html":{}}}],["contact.identifier",{"_index":629,"title":{},"body":{"injectables/ContactsService.html":{},"controllers/DevelopmentController.html":{}}}],["contact.name",{"_index":608,"title":{},"body":{"injectables/ContactsService.html":{},"controllers/DevelopmentController.html":{}}}],["contact.oneusekey",{"_index":636,"title":{},"body":{"injectables/ContactsService.html":{},"controllers/DevelopmentController.html":{}}}],["contact.signature",{"_index":638,"title":{},"body":{"injectables/ContactsService.html":{},"controllers/DevelopmentController.html":{}}}],["contact.signingkey",{"_index":634,"title":{},"body":{"injectables/ContactsService.html":{},"controllers/DevelopmentController.html":{}}}],["contact.user",{"_index":609,"title":{},"body":{"injectables/ContactsService.html":{},"classes/User.html":{}}}],["contactchannelmemberships",{"_index":278,"title":{},"body":{"classes/ChannelMembersResolver.html":{}}}],["contactchannelmemberships(@root",{"_index":307,"title":{},"body":{"classes/ChannelMembersResolver.html":{}}}],["contactchannelmemberships(contact",{"_index":288,"title":{},"body":{"classes/ChannelMembersResolver.html":{}}}],["contactdto",{"_index":474,"title":{"classes/ContactDto.html":{}},"body":{"classes/ContactDto.html":{},"controllers/ContactsController.html":{},"coverage.html":{}}}],["contacthandshake",{"_index":627,"title":{},"body":{"injectables/ContactsService.html":{},"controllers/DevelopmentController.html":{}}}],["contacthandshake.identifier",{"_index":628,"title":{},"body":{"injectables/ContactsService.html":{}}}],["contacthandshake.oneusekey",{"_index":630,"title":{},"body":{"injectables/ContactsService.html":{}}}],["contacthandshake.signature",{"_index":632,"title":{},"body":{"injectables/ContactsService.html":{}}}],["contacthandshake.signingkey",{"_index":631,"title":{},"body":{"injectables/ContactsService.html":{}}}],["contacthandshakedto",{"_index":479,"title":{"classes/ContactHandshakeDto.html":{}},"body":{"classes/ContactHandshakeDto.html":{},"controllers/ContactsController.html":{},"classes/ContactsResolver.html":{},"injectables/ContactsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["contactid",{"_index":246,"title":{},"body":{"classes/ChannelMember.html":{},"controllers/ChannelsController.html":{},"controllers/ContactsController.html":{},"injectables/ContactsService.html":{},"classes/CreateChannelDto.html":{},"classes/CreateChannelMemberDto.html":{}}}],["contactname",{"_index":498,"title":{},"body":{"controllers/ContactsController.html":{},"classes/ContactsResolver.html":{},"injectables/ContactsService.html":{},"controllers/DevelopmentController.html":{}}}],["contacts",{"_index":490,"title":{},"body":{"controllers/ContactsController.html":{},"classes/ContactsResolver.html":{},"classes/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["contacts(@root",{"_index":549,"title":{},"body":{"classes/ContactsResolver.html":{}}}],["contacts(user",{"_index":547,"title":{},"body":{"classes/ContactsResolver.html":{}}}],["contacts.controller",{"_index":540,"title":{},"body":{"modules/ContactsModule.html":{}}}],["contacts.entity",{"_index":478,"title":{},"body":{"classes/ContactDto.html":{},"controllers/ContactsController.html":{},"modules/ContactsModule.html":{},"classes/ContactsResolver.html":{},"injectables/ContactsService.html":{}}}],["contacts.service",{"_index":519,"title":{},"body":{"controllers/ContactsController.html":{},"modules/ContactsModule.html":{},"classes/ContactsResolver.html":{}}}],["contacts/contacts.entity",{"_index":255,"title":{},"body":{"classes/ChannelMember.html":{},"classes/ChannelMemberDto.html":{},"classes/ChannelMembersResolver.html":{},"modules/ChannelsModule.html":{},"classes/User.html":{}}}],["contacts/contacts.module",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"modules/ChannelsModule.html":{},"modules/DevelopmentModule.html":{}}}],["contacts/contacts.service",{"_index":898,"title":{},"body":{"controllers/DevelopmentController.html":{}}}],["contactscontroller",{"_index":488,"title":{"controllers/ContactsController.html":{}},"body":{"controllers/ContactsController.html":{},"modules/ContactsModule.html":{},"coverage.html":{}}}],["contactsmodule",{"_index":104,"title":{"modules/ContactsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ChannelsModule.html":{},"modules/ContactsModule.html":{},"modules/DevelopmentModule.html":{},"modules.html":{},"overview.html":{}}}],["contactsrepository",{"_index":570,"title":{},"body":{"injectables/ContactsService.html":{}}}],["contactsresolver",{"_index":541,"title":{"classes/ContactsResolver.html":{}},"body":{"modules/ContactsModule.html":{},"classes/ContactsResolver.html":{},"coverage.html":{}}}],["contactsservice",{"_index":518,"title":{"injectables/ContactsService.html":{}},"body":{"controllers/ContactsController.html":{},"modules/ContactsModule.html":{},"classes/ContactsResolver.html":{},"injectables/ContactsService.html":{},"controllers/DevelopmentController.html":{},"coverage.html":{},"overview.html":{}}}],["contain",{"_index":1239,"title":{},"body":{"injectables/MessagesService.html":{}}}],["containers",{"_index":1806,"title":{},"body":{"index.html":{}}}],["containing",{"_index":80,"title":{},"body":{"interfaces/AnonKeySet.html":{},"injectables/CryptographyService.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"miscellaneous/variables.html":{}}}],["content",{"_index":918,"title":{},"body":{"classes/EkhoEvent.html":{},"classes/IpfsMessageDto.html":{},"classes/Message.html":{},"injectables/MessagesService.html":{},"classes/SendMessageDto.html":{},"controllers/Web3Controller.html":{},"injectables/Web3Service.html":{},"miscellaneous/variables.html":{}}}],["contents",{"_index":323,"title":{},"body":{"classes/ChannelMessageDto.html":{},"classes/CreateChannelMessageDto.html":{},"classes/RawMessageDto.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["context",{"_index":705,"title":{},"body":{"injectables/CryptographyService.html":{},"classes/VaultKeyManager.html":{}}}],["contract",{"_index":1501,"title":{},"body":{"injectables/Web3Service.html":{}}}],["contract.methods",{"_index":1595,"title":{},"body":{"injectables/Web3Service.html":{}}}],["contractaddress",{"_index":185,"title":{},"body":{"interfaces/BroadcastAccountConfig.html":{},"interfaces/EkhoWeb3Config.html":{},"interfaces/Web3Config.html":{},"injectables/Web3Service.html":{},"miscellaneous/variables.html":{}}}],["controller",{"_index":339,"title":{"controllers/ChannelsController.html":{},"controllers/ContactsController.html":{},"controllers/DevelopmentController.html":{},"controllers/EventsController.html":{},"controllers/IpfsController.html":{},"controllers/MessagesController.html":{},"controllers/UsersController.html":{},"controllers/Web3Controller.html":{}},"body":{"controllers/ChannelsController.html":{},"controllers/ContactsController.html":{},"controllers/DevelopmentController.html":{},"controllers/EventsController.html":{},"controllers/IpfsController.html":{},"controllers/MessagesController.html":{},"controllers/UsersController.html":{},"controllers/Web3Controller.html":{},"coverage.html":{}}}],["controller('channels",{"_index":396,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["controller('contacts",{"_index":523,"title":{},"body":{"controllers/ContactsController.html":{}}}],["controller('development",{"_index":899,"title":{},"body":{"controllers/DevelopmentController.html":{}}}],["controller('events",{"_index":974,"title":{},"body":{"controllers/EventsController.html":{}}}],["controller('ipfs",{"_index":1079,"title":{},"body":{"controllers/IpfsController.html":{}}}],["controller('messages",{"_index":1178,"title":{},"body":{"controllers/MessagesController.html":{}}}],["controller('users",{"_index":1346,"title":{},"body":{"controllers/UsersController.html":{}}}],["controller('web3",{"_index":1465,"title":{},"body":{"controllers/Web3Controller.html":{}}}],["controllers",{"_index":341,"title":{},"body":{"controllers/ChannelsController.html":{},"modules/ChannelsModule.html":{},"controllers/ContactsController.html":{},"modules/ContactsModule.html":{},"controllers/DevelopmentController.html":{},"modules/DevelopmentModule.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"controllers/IpfsController.html":{},"modules/IpfsModule.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"controllers/Web3Controller.html":{},"modules/Web3Module.html":{},"overview.html":{}}}],["core/blob/master/spec/files.md#add",{"_index":1113,"title":{},"body":{"injectables/IpfsService.html":{}}}],["core/blob/master/spec/files.md#get",{"_index":1107,"title":{},"body":{"injectables/IpfsService.html":{}}}],["correct",{"_index":1777,"title":{},"body":{"index.html":{}}}],["counter",{"_index":734,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["coverage",{"_index":1637,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["coverage/coverage",{"_index":1843,"title":{},"body":{"index.html":{}}}],["coverage/lcov",{"_index":1838,"title":{},"body":{"index.html":{}}}],["create",{"_index":1338,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/VaultKeyManager.html":{},"injectables/Web3Service.html":{},"miscellaneous/variables.html":{}}}],["create(@body",{"_index":1348,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(user",{"_index":1339,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createchannel",{"_index":345,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["createchannel(@args('data",{"_index":332,"title":{},"body":{"classes/ChannelResolver.html":{}}}],["createchannel(@body",{"_index":401,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["createchannel(channel",{"_index":353,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["createchanneldto",{"_index":354,"title":{"classes/CreateChannelDto.html":{}},"body":{"controllers/ChannelsController.html":{},"classes/CreateChannelDto.html":{},"coverage.html":{}}}],["createchannelmemberdto",{"_index":650,"title":{"classes/CreateChannelMemberDto.html":{}},"body":{"classes/CreateChannelMemberDto.html":{},"coverage.html":{}}}],["createchannelmessage",{"_index":346,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["createchannelmessage(@body",{"_index":403,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["createchannelmessage(channelmessage",{"_index":357,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["createchannelmessagedto",{"_index":656,"title":{"classes/CreateChannelMessageDto.html":{}},"body":{"classes/CreateChannelMessageDto.html":{},"coverage.html":{}}}],["createcontact",{"_index":556,"title":{},"body":{"injectables/ContactsService.html":{},"miscellaneous/variables.html":{}}}],["createcontact(userid",{"_index":574,"title":{},"body":{"injectables/ContactsService.html":{}}}],["createdatecolumn",{"_index":930,"title":{},"body":{"classes/EkhoEvent.html":{}}}],["createddate",{"_index":919,"title":{},"body":{"classes/EkhoEvent.html":{},"miscellaneous/variables.html":{}}}],["createquerybuilder('block",{"_index":1028,"title":{},"body":{"injectables/EventsService.html":{}}}],["createquerybuilder('ekhoevent",{"_index":1043,"title":{},"body":{"injectables/EventsService.html":{}}}],["createqueryrunner",{"_index":1290,"title":{},"body":{"interfaces/StringIndexedObject.html":{},"miscellaneous/variables.html":{}}}],["creates",{"_index":399,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["createsigningkey",{"_index":842,"title":{},"body":{"classes/DbKeyManager.html":{},"interfaces/KeyManager.html":{},"classes/VaultKeyManager.html":{}}}],["createsigningkey(id",{"_index":849,"title":{},"body":{"classes/DbKeyManager.html":{},"interfaces/KeyManager.html":{},"classes/VaultKeyManager.html":{}}}],["createuser(@args('data",{"_index":1373,"title":{},"body":{"classes/UsersResolver.html":{}}}],["createuserdto",{"_index":660,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["creator",{"_index":648,"title":{},"body":{"classes/CreateChannelDto.html":{}}}],["cryptography",{"_index":54,"title":{},"body":{"interfaces/AnonKeySet.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{}}}],["cryptography.service",{"_index":18,"title":{},"body":{"interfaces/AnonKeySet.html":{},"modules/CryptographyModule.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{}}}],["cryptography/cryptography.module",{"_index":437,"title":{},"body":{"modules/ChannelsModule.html":{},"modules/ContactsModule.html":{},"modules/DevelopmentModule.html":{},"modules/KeyManagerModule.html":{}}}],["cryptography/cryptography.service",{"_index":598,"title":{},"body":{"injectables/ContactsService.html":{},"classes/DbKeyManager.html":{},"controllers/DevelopmentController.html":{},"classes/VaultKeyManager.html":{}}}],["cryptography/dto/cryptography",{"_index":599,"title":{},"body":{"injectables/ContactsService.html":{}}}],["cryptographykeypairdto",{"_index":13,"title":{"classes/CryptographyKeyPairDto.html":{}},"body":{"interfaces/AnonKeySet.html":{},"injectables/ContactsService.html":{},"classes/CryptographyKeyPairDto.html":{},"injectables/CryptographyService.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"coverage.html":{}}}],["cryptographymodule",{"_index":432,"title":{"modules/CryptographyModule.html":{}},"body":{"modules/ChannelsModule.html":{},"modules/ContactsModule.html":{},"modules/CryptographyModule.html":{},"modules/DevelopmentModule.html":{},"modules/KeyManagerModule.html":{},"modules.html":{},"overview.html":{}}}],["cryptographypairdto",{"_index":65,"title":{},"body":{"interfaces/AnonKeySet.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"miscellaneous/variables.html":{}}}],["cryptographyservice",{"_index":17,"title":{"injectables/CryptographyService.html":{}},"body":{"interfaces/AnonKeySet.html":{},"injectables/ContactsService.html":{},"modules/CryptographyModule.html":{},"injectables/CryptographyService.html":{},"classes/DbKeyManager.html":{},"controllers/DevelopmentController.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"classes/VaultKeyManager.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["currentblock",{"_index":1568,"title":{},"body":{"injectables/Web3Service.html":{}}}],["currentblock.blocknumber",{"_index":1569,"title":{},"body":{"injectables/Web3Service.html":{}}}],["currentkey",{"_index":1310,"title":{},"body":{"interfaces/StringIndexedObject.html":{},"miscellaneous/variables.html":{}}}],["data",{"_index":696,"title":{},"body":{"injectables/CryptographyService.html":{},"classes/DbKeyManager.html":{},"controllers/IpfsController.html":{},"injectables/IpfsService.html":{},"interfaces/KeyManager.html":{},"injectables/UsersService.html":{},"classes/VaultKeyManager.html":{},"injectables/Web3Service.html":{}}}],["databse",{"_index":1786,"title":{},"body":{"index.html":{}}}],["dataencoding",{"_index":691,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["datastr",{"_index":699,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["date",{"_index":929,"title":{},"body":{"classes/EkhoEvent.html":{},"classes/Message.html":{},"injectables/MessagesService.html":{}}}],["date(0",{"_index":1875,"title":{},"body":{"miscellaneous/variables.html":{}}}],["db",{"_index":1582,"title":{},"body":{"injectables/Web3Service.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["db.entity",{"_index":861,"title":{},"body":{"classes/DbKeyManager.html":{},"modules/KeyManagerModule.html":{}}}],["db.entity.ts",{"_index":873,"title":{},"body":{"classes/DbKeyPair.html":{},"coverage.html":{}}}],["db.entity.ts:10",{"_index":875,"title":{},"body":{"classes/DbKeyPair.html":{}}}],["db.entity.ts:13",{"_index":876,"title":{},"body":{"classes/DbKeyPair.html":{}}}],["db.entity.ts:17",{"_index":878,"title":{},"body":{"classes/DbKeyPair.html":{}}}],["db.entity.ts:7",{"_index":874,"title":{},"body":{"classes/DbKeyPair.html":{}}}],["db.ts",{"_index":841,"title":{},"body":{"classes/DbKeyManager.html":{},"coverage.html":{}}}],["db.ts:13",{"_index":851,"title":{},"body":{"classes/DbKeyManager.html":{}}}],["db.ts:21",{"_index":853,"title":{},"body":{"classes/DbKeyManager.html":{}}}],["db.ts:26",{"_index":855,"title":{},"body":{"classes/DbKeyManager.html":{}}}],["db.ts:31",{"_index":859,"title":{},"body":{"classes/DbKeyManager.html":{}}}],["db.ts:36",{"_index":857,"title":{},"body":{"classes/DbKeyManager.html":{}}}],["db.ts:7",{"_index":847,"title":{},"body":{"classes/DbKeyManager.html":{}}}],["db1",{"_index":1813,"title":{},"body":{"index.html":{}}}],["db2",{"_index":1816,"title":{},"body":{"index.html":{}}}],["dbevent",{"_index":1580,"title":{},"body":{"injectables/Web3Service.html":{}}}],["dbkeymanager",{"_index":837,"title":{"classes/DbKeyManager.html":{}},"body":{"classes/DbKeyManager.html":{},"coverage.html":{}}}],["dbkeymanager(keypairrepository",{"_index":1925,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dbkeypair",{"_index":860,"title":{"classes/DbKeyPair.html":{}},"body":{"classes/DbKeyManager.html":{},"classes/DbKeyPair.html":{},"modules/KeyManagerModule.html":{},"coverage.html":{}}}],["dbuser",{"_index":1402,"title":{},"body":{"injectables/UsersService.html":{}}}],["dbuser.id",{"_index":1406,"title":{},"body":{"injectables/UsersService.html":{}}}],["dbuser.name",{"_index":1407,"title":{},"body":{"injectables/UsersService.html":{}}}],["deal",{"_index":1507,"title":{},"body":{"injectables/Web3Service.html":{}}}],["declarations",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"modules/ChannelsModule.html":{},"modules/ContactsModule.html":{},"modules/CryptographyModule.html":{},"modules/DevelopmentModule.html":{},"modules/EventsModule.html":{},"modules/IpfsModule.html":{},"modules/KeyManagerModule.html":{},"modules/MessagesModule.html":{},"modules/UsersModule.html":{},"modules/Web3Module.html":{},"overview.html":{}}}],["decoded",{"_index":1561,"title":{},"body":{"injectables/Web3Service.html":{}}}],["decorators",{"_index":152,"title":{},"body":{"classes/Block.html":{},"classes/Channel.html":{},"classes/ChannelDto.html":{},"classes/ChannelMember.html":{},"classes/ChannelMemberDto.html":{},"classes/ChannelMembersResolver.html":{},"classes/ChannelMessage.html":{},"classes/ChannelMessageDto.html":{},"classes/ChannelResolver.html":{},"controllers/ChannelsController.html":{},"classes/Contact.html":{},"classes/ContactDto.html":{},"classes/ContactHandshakeDto.html":{},"controllers/ContactsController.html":{},"classes/ContactsResolver.html":{},"classes/CreateChannelDto.html":{},"classes/CreateChannelMemberDto.html":{},"classes/CreateChannelMessageDto.html":{},"classes/CreateUserDto.html":{},"classes/DbKeyPair.html":{},"controllers/DevelopmentController.html":{},"classes/EkhoEvent.html":{},"classes/EkhoEventDto.html":{},"classes/EncodedMessageDto.html":{},"controllers/EventsController.html":{},"controllers/IpfsController.html":{},"classes/IpfsMessageDto.html":{},"classes/Message.html":{},"controllers/MessagesController.html":{},"classes/ProcessReport.html":{},"classes/RawMessageDto.html":{},"classes/SendMessageDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"classes/UsersResolver.html":{},"controllers/Web3Controller.html":{}}}],["decrypt",{"_index":674,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["decrypt(datastr",{"_index":688,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["decrypted",{"_index":703,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["decrypteddata",{"_index":826,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["decrypteddata.tostring(dataencoding",{"_index":828,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["decrypts",{"_index":695,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["deeperkeys",{"_index":1311,"title":{},"body":{"interfaces/StringIndexedObject.html":{},"miscellaneous/variables.html":{}}}],["default",{"_index":175,"title":{},"body":{"interfaces/BroadcastAccountConfig.html":{},"classes/ChannelDto.html":{},"classes/ChannelMemberDto.html":{},"classes/ChannelMessage.html":{},"classes/ChannelMessageDto.html":{},"classes/ContactDto.html":{},"classes/ContactHandshakeDto.html":{},"injectables/ContactsService.html":{},"classes/CreateChannelDto.html":{},"classes/CreateChannelMemberDto.html":{},"classes/CreateChannelMessageDto.html":{},"classes/CreateUserDto.html":{},"injectables/CryptographyService.html":{},"classes/EkhoEventDto.html":{},"interfaces/EkhoWeb3Config.html":{},"classes/EncodedMessageDto.html":{},"classes/ProcessReport.html":{},"classes/RawMessageDto.html":{},"classes/SendMessageDto.html":{},"classes/UserDto.html":{},"injectables/UsersService.html":{},"classes/VaultKeyManager.html":{},"interfaces/Web3Config.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":155,"title":{},"body":{"classes/Block.html":{},"classes/Channel.html":{},"classes/ChannelDto.html":{},"classes/ChannelMember.html":{},"classes/ChannelMemberDto.html":{},"classes/ChannelMembersResolver.html":{},"classes/ChannelMessage.html":{},"classes/ChannelMessageDto.html":{},"classes/ChannelResolver.html":{},"controllers/ChannelsController.html":{},"classes/Contact.html":{},"classes/ContactDto.html":{},"classes/ContactHandshakeDto.html":{},"controllers/ContactsController.html":{},"classes/ContactsResolver.html":{},"injectables/ContactsService.html":{},"classes/CreateChannelDto.html":{},"classes/CreateChannelMemberDto.html":{},"classes/CreateChannelMessageDto.html":{},"classes/CreateUserDto.html":{},"classes/CryptographyKeyPairDto.html":{},"injectables/CryptographyService.html":{},"classes/DbKeyManager.html":{},"classes/DbKeyPair.html":{},"controllers/DevelopmentController.html":{},"classes/EkhoEvent.html":{},"classes/EkhoEventDto.html":{},"classes/EncodedMessageDto.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/IpfsController.html":{},"classes/IpfsMessageDto.html":{},"injectables/IpfsService.html":{},"interfaces/KeyManager.html":{},"classes/Message.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"classes/ProcessReport.html":{},"classes/RawMessageDto.html":{},"classes/SendMessageDto.html":{},"interfaces/StringIndexedObject.html":{},"interfaces/TestHelper.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"classes/VaultKeyManager.html":{},"controllers/Web3Controller.html":{},"injectables/Web3Service.html":{}}}],["delete",{"_index":557,"title":{},"body":{"injectables/ContactsService.html":{},"interfaces/StringIndexedObject.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["delete(name",{"_index":576,"title":{},"body":{"injectables/ContactsService.html":{},"injectables/UsersService.html":{}}}],["depend",{"_index":1897,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dependencies",{"_index":95,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/ChannelsModule.html":{},"modules/ContactsModule.html":{},"modules/CryptographyModule.html":{},"modules/DevelopmentModule.html":{},"modules/EventsModule.html":{},"modules/IpfsModule.html":{},"modules/KeyManagerModule.html":{},"modules/MessagesModule.html":{},"modules/UsersModule.html":{},"modules/Web3Module.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":1500,"title":{},"body":{"injectables/Web3Service.html":{}}}],["deployed",{"_index":1508,"title":{},"body":{"injectables/Web3Service.html":{}}}],["derivation",{"_index":709,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["derived",{"_index":716,"title":{},"body":{"injectables/CryptographyService.html":{},"classes/VaultKeyManager.html":{}}}],["derives",{"_index":707,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["derivesymmetrickeyfromsecret",{"_index":675,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["derivesymmetrickeyfromsecret(secret",{"_index":704,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["derp",{"_index":1874,"title":{},"body":{"miscellaneous/variables.html":{}}}],["describing",{"_index":714,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["description",{"_index":233,"title":{},"body":{"classes/ChannelDto.html":{},"classes/ChannelMemberDto.html":{},"classes/ChannelMessageDto.html":{},"controllers/ChannelsController.html":{},"classes/ContactDto.html":{},"classes/CreateChannelDto.html":{},"classes/CreateChannelMemberDto.html":{},"classes/CreateChannelMessageDto.html":{},"classes/CreateUserDto.html":{},"injectables/CryptographyService.html":{},"classes/EkhoEventDto.html":{},"classes/EncodedMessageDto.html":{},"classes/IpfsMessageDto.html":{},"injectables/IpfsService.html":{},"classes/ProcessReport.html":{},"classes/RawMessageDto.html":{},"classes/SendMessageDto.html":{},"classes/UserDto.html":{},"index.html":{}}}],["detached",{"_index":772,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["detailed",{"_index":1755,"title":{},"body":{"index.html":{}}}],["dev",{"_index":907,"title":{},"body":{"controllers/DevelopmentController.html":{}}}],["development",{"_index":883,"title":{},"body":{"controllers/DevelopmentController.html":{},"index.html":{}}}],["development.controller",{"_index":916,"title":{},"body":{"modules/DevelopmentModule.html":{}}}],["development/development.module",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["developmentcontroller",{"_index":881,"title":{"controllers/DevelopmentController.html":{}},"body":{"controllers/DevelopmentController.html":{},"modules/DevelopmentModule.html":{},"coverage.html":{}}}],["developmentmodule",{"_index":105,"title":{"modules/DevelopmentModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DevelopmentModule.html":{},"modules.html":{},"overview.html":{}}}],["different",{"_index":1821,"title":{},"body":{"index.html":{}}}],["diffie",{"_index":743,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["dig",{"_index":1611,"title":{},"body":{"injectables/Web3Service.html":{}}}],["digital",{"_index":760,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["distince",{"_index":71,"title":{},"body":{"interfaces/AnonKeySet.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"miscellaneous/variables.html":{}}}],["docker",{"_index":1766,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":1638,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["documentation.sh",{"_index":1854,"title":{},"body":{"index.html":{}}}],["dot",{"_index":1298,"title":{},"body":{"interfaces/StringIndexedObject.html":{}}}],["dotseperatedpath",{"_index":1303,"title":{},"body":{"interfaces/StringIndexedObject.html":{},"miscellaneous/variables.html":{}}}],["dotseperatedpath.split",{"_index":1304,"title":{},"body":{"interfaces/StringIndexedObject.html":{},"miscellaneous/variables.html":{}}}],["down",{"_index":1810,"title":{},"body":{"index.html":{}}}],["dto",{"_index":746,"title":{},"body":{"injectables/CryptographyService.html":{},"controllers/Web3Controller.html":{}}}],["dto/contact",{"_index":520,"title":{},"body":{"controllers/ContactsController.html":{},"injectables/ContactsService.html":{}}}],["dto/contact.dto",{"_index":522,"title":{},"body":{"controllers/ContactsController.html":{}}}],["dto/create",{"_index":388,"title":{},"body":{"controllers/ChannelsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/cryptography",{"_index":19,"title":{},"body":{"interfaces/AnonKeySet.html":{},"injectables/CryptographyService.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{}}}],["dto/ekhoevent.dto",{"_index":970,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{}}}],["dto/encodedmessage.dto",{"_index":391,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["dto/ipfs",{"_index":1075,"title":{},"body":{"controllers/IpfsController.html":{},"injectables/IpfsService.html":{}}}],["dto/processreport.dto",{"_index":393,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["dto/rawmessage.dto",{"_index":394,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["dto/send",{"_index":1174,"title":{},"body":{"controllers/MessagesController.html":{}}}],["dto/user.dto",{"_index":1344,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dual",{"_index":1812,"title":{},"body":{"index.html":{}}}],["e",{"_index":1409,"title":{},"body":{"injectables/UsersService.html":{},"injectables/Web3Service.html":{}}}],["e2e",{"_index":1833,"title":{},"body":{"index.html":{}}}],["each",{"_index":63,"title":{},"body":{"interfaces/AnonKeySet.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"miscellaneous/variables.html":{}}}],["ecdh",{"_index":724,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["ed25519",{"_index":763,"title":{},"body":{"injectables/CryptographyService.html":{},"classes/VaultKeyManager.html":{}}}],["ekho",{"_index":1752,"title":{},"body":{"index.html":{}}}],["ekho1",{"_index":1814,"title":{},"body":{"index.html":{}}}],["ekho2",{"_index":1817,"title":{},"body":{"index.html":{}}}],["ekhoevent",{"_index":151,"title":{"classes/EkhoEvent.html":{}},"body":{"classes/Block.html":{},"classes/EkhoEvent.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"injectables/Web3Service.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["ekhoevent.content",{"_index":1046,"title":{},"body":{"injectables/EventsService.html":{}}}],["ekhoevent.signature",{"_index":1047,"title":{},"body":{"injectables/EventsService.html":{}}}],["ekhoeventdto",{"_index":939,"title":{"classes/EkhoEventDto.html":{}},"body":{"classes/EkhoEventDto.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"coverage.html":{}}}],["ekhoweb3config",{"_index":191,"title":{"interfaces/EkhoWeb3Config.html":{}},"body":{"interfaces/BroadcastAccountConfig.html":{},"interfaces/EkhoWeb3Config.html":{},"interfaces/Web3Config.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["emit",{"_index":1517,"title":{},"body":{"injectables/Web3Service.html":{}}}],["emitevent",{"_index":1480,"title":{},"body":{"injectables/Web3Service.html":{},"miscellaneous/variables.html":{}}}],["emitevent(channelid",{"_index":1487,"title":{},"body":{"injectables/Web3Service.html":{}}}],["encodeabi",{"_index":1599,"title":{},"body":{"injectables/Web3Service.html":{}}}],["encodedmessage.dto",{"_index":1258,"title":{},"body":{"classes/ProcessReport.html":{}}}],["encodedmessagedto",{"_index":390,"title":{"classes/EncodedMessageDto.html":{}},"body":{"controllers/ChannelsController.html":{},"classes/EncodedMessageDto.html":{},"classes/ProcessReport.html":{},"coverage.html":{}}}],["encrypt",{"_index":676,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["encrypt(datastr",{"_index":717,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["encrypted",{"_index":720,"title":{},"body":{"injectables/CryptographyService.html":{},"classes/EkhoEventDto.html":{},"classes/EncodedMessageDto.html":{}}}],["encrypteddata",{"_index":822,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["encrypteddata.tostring(encryptedencoding",{"_index":825,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["encryptedencoding",{"_index":692,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["encryptedmessagelink",{"_index":942,"title":{},"body":{"classes/EkhoEventDto.html":{},"classes/EncodedMessageDto.html":{}}}],["encryptedmessagelinksignature",{"_index":943,"title":{},"body":{"classes/EkhoEventDto.html":{},"classes/EncodedMessageDto.html":{}}}],["encryption/decryption",{"_index":739,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["encrypts",{"_index":719,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["endpoint",{"_index":1795,"title":{},"body":{"index.html":{}}}],["endpoints",{"_index":1823,"title":{},"body":{"index.html":{}}}],["entities/blocks.entity",{"_index":986,"title":{},"body":{"modules/EventsModule.html":{},"injectables/EventsService.html":{}}}],["entities/channelmembers.entity",{"_index":299,"title":{},"body":{"classes/ChannelMembersResolver.html":{},"classes/ChannelResolver.html":{},"controllers/ChannelsController.html":{},"modules/ChannelsModule.html":{}}}],["entities/channelmessages.entity",{"_index":395,"title":{},"body":{"controllers/ChannelsController.html":{},"modules/ChannelsModule.html":{}}}],["entities/channels.entity",{"_index":275,"title":{},"body":{"classes/ChannelMemberDto.html":{},"classes/ChannelResolver.html":{},"controllers/ChannelsController.html":{},"modules/ChannelsModule.html":{}}}],["entities/events.entity",{"_index":971,"title":{},"body":{"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{}}}],["entities/messages.entity",{"_index":1175,"title":{},"body":{"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{}}}],["entities/users.entity",{"_index":664,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserDto.html":{},"modules/UsersModule.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{}}}],["entity",{"_index":162,"title":{},"body":{"classes/Block.html":{},"classes/Channel.html":{},"classes/ChannelMember.html":{},"classes/ChannelMessage.html":{},"classes/Contact.html":{},"classes/DbKeyPair.html":{},"classes/EkhoEvent.html":{},"classes/Message.html":{},"classes/User.html":{}}}],["enum",{"_index":1575,"title":{},"body":{"injectables/Web3Service.html":{}}}],["env",{"_index":1759,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["err",{"_index":1631,"title":{},"body":{"injectables/Web3Service.html":{}}}],["error",{"_index":1556,"title":{},"body":{"injectables/Web3Service.html":{}}}],["error('error",{"_index":1135,"title":{},"body":{"injectables/IpfsService.html":{},"injectables/Web3Service.html":{}}}],["error('invalid",{"_index":1615,"title":{},"body":{"injectables/Web3Service.html":{}}}],["error('only",{"_index":423,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["error('signature",{"_index":642,"title":{},"body":{"injectables/ContactsService.html":{}}}],["error(`${context",{"_index":1452,"title":{},"body":{"classes/VaultKeyManager.html":{}}}],["error(`unexpected",{"_index":1929,"title":{},"body":{"miscellaneous/variables.html":{}}}],["error).message",{"_index":1626,"title":{},"body":{"injectables/Web3Service.html":{}}}],["eth",{"_index":1936,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ethereumjs",{"_index":1524,"title":{},"body":{"injectables/Web3Service.html":{},"dependencies.html":{}}}],["event",{"_index":168,"title":{},"body":{"classes/Block.html":{},"classes/EkhoEventDto.html":{},"injectables/EventsService.html":{},"injectables/Web3Service.html":{},"miscellaneous/variables.html":{}}}],["event.block",{"_index":169,"title":{},"body":{"classes/Block.html":{}}}],["eventid",{"_index":1055,"title":{},"body":{"injectables/EventsService.html":{}}}],["eventidentifier",{"_index":944,"title":{},"body":{"classes/EkhoEventDto.html":{}}}],["eventlog",{"_index":1587,"title":{},"body":{"injectables/Web3Service.html":{}}}],["events",{"_index":406,"title":{},"body":{"controllers/ChannelsController.html":{},"controllers/EventsController.html":{},"classes/ProcessReport.html":{},"injectables/Web3Service.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["events.controller",{"_index":987,"title":{},"body":{"modules/EventsModule.html":{}}}],["events.entity",{"_index":166,"title":{},"body":{"classes/Block.html":{}}}],["events.service",{"_index":973,"title":{},"body":{"controllers/EventsController.html":{},"modules/EventsModule.html":{}}}],["events/entities/blocks.entity",{"_index":1527,"title":{},"body":{"injectables/Web3Service.html":{}}}],["events/entities/events.entity",{"_index":1528,"title":{},"body":{"injectables/Web3Service.html":{}}}],["events/events.module",{"_index":438,"title":{},"body":{"modules/ChannelsModule.html":{},"modules/MessagesModule.html":{},"modules/Web3Module.html":{}}}],["events/events.service",{"_index":1215,"title":{},"body":{"injectables/MessagesService.html":{},"injectables/Web3Service.html":{}}}],["eventscontroller",{"_index":954,"title":{"controllers/EventsController.html":{}},"body":{"controllers/EventsController.html":{},"modules/EventsModule.html":{},"coverage.html":{}}}],["eventsmodule",{"_index":433,"title":{"modules/EventsModule.html":{}},"body":{"modules/ChannelsModule.html":{},"modules/EventsModule.html":{},"modules/MessagesModule.html":{},"modules/Web3Module.html":{},"modules.html":{},"overview.html":{}}}],["eventsrepository",{"_index":1001,"title":{},"body":{"injectables/EventsService.html":{}}}],["eventsservice",{"_index":972,"title":{"injectables/EventsService.html":{}},"body":{"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"injectables/MessagesService.html":{},"injectables/Web3Service.html":{},"coverage.html":{},"overview.html":{}}}],["example",{"_index":1190,"title":{},"body":{"controllers/MessagesController.html":{}}}],["exchanges",{"_index":745,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["executed",{"_index":1613,"title":{},"body":{"injectables/Web3Service.html":{}}}],["existing",{"_index":1805,"title":{},"body":{"index.html":{}}}],["expectedstatus",{"_index":1428,"title":{},"body":{"classes/VaultKeyManager.html":{}}}],["export",{"_index":21,"title":{},"body":{"interfaces/AnonKeySet.html":{},"modules/AppModule.html":{},"classes/Block.html":{},"interfaces/BroadcastAccountConfig.html":{},"classes/Channel.html":{},"classes/ChannelDto.html":{},"classes/ChannelMember.html":{},"classes/ChannelMemberDto.html":{},"classes/ChannelMembersResolver.html":{},"classes/ChannelMessage.html":{},"classes/ChannelMessageDto.html":{},"classes/ChannelResolver.html":{},"controllers/ChannelsController.html":{},"modules/ChannelsModule.html":{},"classes/Contact.html":{},"classes/ContactDto.html":{},"classes/ContactHandshakeDto.html":{},"controllers/ContactsController.html":{},"modules/ContactsModule.html":{},"classes/ContactsResolver.html":{},"injectables/ContactsService.html":{},"classes/CreateChannelDto.html":{},"classes/CreateChannelMemberDto.html":{},"classes/CreateChannelMessageDto.html":{},"classes/CreateUserDto.html":{},"classes/CryptographyKeyPairDto.html":{},"modules/CryptographyModule.html":{},"injectables/CryptographyService.html":{},"classes/DbKeyManager.html":{},"classes/DbKeyPair.html":{},"controllers/DevelopmentController.html":{},"modules/DevelopmentModule.html":{},"classes/EkhoEvent.html":{},"classes/EkhoEventDto.html":{},"interfaces/EkhoWeb3Config.html":{},"classes/EncodedMessageDto.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"controllers/IpfsController.html":{},"classes/IpfsMessageDto.html":{},"modules/IpfsModule.html":{},"injectables/IpfsService.html":{},"interfaces/KeyManager.html":{},"modules/KeyManagerModule.html":{},"classes/Message.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/ProcessReport.html":{},"classes/RawMessageDto.html":{},"classes/SendMessageDto.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/StringIndexedObject.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"classes/VaultKeyManager.html":{},"interfaces/Web3Config.html":{},"controllers/Web3Controller.html":{},"modules/Web3Module.html":{},"injectables/Web3Service.html":{}}}],["exports",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"modules/ChannelsModule.html":{},"modules/ContactsModule.html":{},"modules/CryptographyModule.html":{},"modules/DevelopmentModule.html":{},"modules/EventsModule.html":{},"modules/IpfsModule.html":{},"modules/KeyManagerModule.html":{},"modules/MessagesModule.html":{},"modules/UsersModule.html":{},"modules/Web3Module.html":{},"overview.html":{}}}],["exposed",{"_index":713,"title":{},"body":{"injectables/CryptographyService.html":{},"miscellaneous/variables.html":{}}}],["exposing",{"_index":1268,"title":{},"body":{"classes/SendMessageDto.html":{}}}],["express",{"_index":1721,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":23,"title":{},"body":{"interfaces/AnonKeySet.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{}}}],["extract",{"_index":1242,"title":{},"body":{"injectables/MessagesService.html":{}}}],["f",{"_index":1802,"title":{},"body":{"index.html":{}}}],["f46880fe",{"_index":1776,"title":{},"body":{"index.html":{}}}],["factoryprovider",{"_index":1902,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fafafafa",{"_index":1891,"title":{},"body":{"miscellaneous/variables.html":{}}}],["failed",{"_index":1443,"title":{},"body":{"classes/VaultKeyManager.html":{},"injectables/Web3Service.html":{}}}],["fails",{"_index":1612,"title":{},"body":{"injectables/Web3Service.html":{}}}],["fakechannel",{"_index":1695,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["fakechannelmember",{"_index":1696,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["fakechannelmessage",{"_index":1697,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["fakecontact",{"_index":1660,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["fakecontacthandshake",{"_index":1661,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["fakeevent",{"_index":1673,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["fakeipfsmessage",{"_index":1682,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["fakemessage",{"_index":1698,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["fakerfactory",{"_index":1318,"title":{},"body":{"interfaces/StringIndexedObject.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["fakerfactory(anonchannel",{"_index":1885,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fakerfactory(anonchannelmember",{"_index":1886,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fakerfactory(anonchannelmessage",{"_index":1887,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fakerfactory(anoncontact",{"_index":1892,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fakerfactory(anoncontacthandshakedto",{"_index":1893,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fakerfactory(anonevent",{"_index":1880,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fakerfactory(anonipfsmessage",{"_index":1894,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fakerfactory(anonmessage",{"_index":1888,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fakerfactory(anonsendmessagedto",{"_index":1889,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fakerfactory(anonuser",{"_index":1895,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fakesendmessagedto",{"_index":1699,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["fakeuser",{"_index":1703,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["false",{"_index":418,"title":{},"body":{"controllers/ChannelsController.html":{},"injectables/ContactsService.html":{},"classes/EkhoEvent.html":{},"injectables/EventsService.html":{},"injectables/UsersService.html":{},"classes/VaultKeyManager.html":{},"injectables/Web3Service.html":{},"miscellaneous/variables.html":{}}}],["false})@apiquery({name",{"_index":371,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["false})@get('message",{"_index":372,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["fetch",{"_index":43,"title":{},"body":{"interfaces/AnonKeySet.html":{},"injectables/IpfsService.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"miscellaneous/variables.html":{}}}],["ffffff7f",{"_index":1890,"title":{},"body":{"miscellaneous/variables.html":{}}}],["field",{"_index":218,"title":{},"body":{"classes/Channel.html":{},"classes/ChannelDto.html":{},"classes/ChannelMember.html":{},"classes/ChannelMemberDto.html":{},"classes/ChannelMessage.html":{},"classes/Contact.html":{},"classes/ContactDto.html":{},"classes/ContactHandshakeDto.html":{},"classes/CreateChannelDto.html":{},"classes/CreateChannelMemberDto.html":{},"classes/CreateUserDto.html":{},"classes/Message.html":{},"classes/SendMessageDto.html":{},"classes/User.html":{},"classes/UserDto.html":{}}}],["field()@apiproperty({description",{"_index":226,"title":{},"body":{"classes/ChannelDto.html":{},"classes/ChannelMemberDto.html":{},"classes/CreateChannelDto.html":{},"classes/CreateChannelMemberDto.html":{},"classes/CreateUserDto.html":{},"classes/SendMessageDto.html":{},"classes/UserDto.html":{}}}],["field()@column",{"_index":210,"title":{},"body":{"classes/Channel.html":{},"classes/ChannelMember.html":{},"classes/ChannelMessage.html":{},"classes/Contact.html":{},"classes/Message.html":{}}}],["field()@column()@generated('uuid",{"_index":456,"title":{},"body":{"classes/Contact.html":{}}}],["field()@column({length",{"_index":458,"title":{},"body":{"classes/Contact.html":{},"classes/User.html":{}}}],["field()@primarygeneratedcolumn",{"_index":1155,"title":{},"body":{"classes/Message.html":{}}}],["field(type",{"_index":222,"title":{},"body":{"classes/Channel.html":{},"classes/ChannelMember.html":{},"classes/ChannelMemberDto.html":{},"classes/ChannelMessage.html":{},"classes/Contact.html":{},"classes/User.html":{}}}],["field(undefined",{"_index":449,"title":{},"body":{"classes/Contact.html":{},"classes/User.html":{}}}],["field(undefined)@apiproperty({description",{"_index":268,"title":{},"body":{"classes/ChannelMemberDto.html":{}}}],["field(undefined)@manytoone(undefined",{"_index":240,"title":{},"body":{"classes/ChannelMember.html":{},"classes/ChannelMessage.html":{},"classes/Contact.html":{}}}],["field(undefined)@onetomany(undefined",{"_index":213,"title":{},"body":{"classes/Channel.html":{}}}],["field(undefined)@primarygeneratedcolumn",{"_index":215,"title":{},"body":{"classes/Channel.html":{},"classes/ChannelMember.html":{},"classes/ChannelMessage.html":{},"classes/Contact.html":{},"classes/User.html":{}}}],["field({nullable",{"_index":461,"title":{},"body":{"classes/Contact.html":{}}}],["fieldresolver",{"_index":296,"title":{},"body":{"classes/ChannelMembersResolver.html":{},"classes/ChannelResolver.html":{},"classes/ContactsResolver.html":{}}}],["fieldresolver(returns",{"_index":303,"title":{},"body":{"classes/ChannelMembersResolver.html":{},"classes/ChannelResolver.html":{},"classes/ContactsResolver.html":{}}}],["fieldresolver(undefined",{"_index":289,"title":{},"body":{"classes/ChannelMembersResolver.html":{},"classes/ChannelResolver.html":{},"classes/ContactsResolver.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/AnonKeySet.html":{},"modules/AppModule.html":{},"classes/Block.html":{},"interfaces/BroadcastAccountConfig.html":{},"classes/Channel.html":{},"classes/ChannelDto.html":{},"classes/ChannelMember.html":{},"classes/ChannelMemberDto.html":{},"classes/ChannelMembersResolver.html":{},"classes/ChannelMessage.html":{},"classes/ChannelMessageDto.html":{},"classes/ChannelResolver.html":{},"controllers/ChannelsController.html":{},"modules/ChannelsModule.html":{},"classes/Contact.html":{},"classes/ContactDto.html":{},"classes/ContactHandshakeDto.html":{},"controllers/ContactsController.html":{},"modules/ContactsModule.html":{},"classes/ContactsResolver.html":{},"injectables/ContactsService.html":{},"classes/CreateChannelDto.html":{},"classes/CreateChannelMemberDto.html":{},"classes/CreateChannelMessageDto.html":{},"classes/CreateUserDto.html":{},"classes/CryptographyKeyPairDto.html":{},"modules/CryptographyModule.html":{},"injectables/CryptographyService.html":{},"classes/DbKeyManager.html":{},"classes/DbKeyPair.html":{},"controllers/DevelopmentController.html":{},"modules/DevelopmentModule.html":{},"classes/EkhoEvent.html":{},"classes/EkhoEventDto.html":{},"interfaces/EkhoWeb3Config.html":{},"classes/EncodedMessageDto.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"controllers/IpfsController.html":{},"classes/IpfsMessageDto.html":{},"modules/IpfsModule.html":{},"injectables/IpfsService.html":{},"interfaces/KeyManager.html":{},"modules/KeyManagerModule.html":{},"classes/Message.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/ProcessReport.html":{},"classes/RawMessageDto.html":{},"classes/SendMessageDto.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/StringIndexedObject.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"classes/VaultKeyManager.html":{},"interfaces/Web3Config.html":{},"controllers/Web3Controller.html":{},"modules/Web3Module.html":{},"injectables/Web3Service.html":{},"coverage.html":{}}}],["files",{"_index":1112,"title":{},"body":{"injectables/IpfsService.html":{}}}],["filter",{"_index":380,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["filters",{"_index":378,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["final.json",{"_index":1844,"title":{},"body":{"index.html":{}}}],["finally",{"_index":1411,"title":{},"body":{"injectables/UsersService.html":{}}}],["find",{"_index":1287,"title":{},"body":{"interfaces/StringIndexedObject.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["find(name",{"_index":1385,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall",{"_index":558,"title":{},"body":{"injectables/ContactsService.html":{},"injectables/MessagesService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["findallchannelmembers",{"_index":347,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["findbyid",{"_index":1376,"title":{},"body":{"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["findbyid(id",{"_index":1388,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyname",{"_index":1377,"title":{},"body":{"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["findbyname(name",{"_index":1390,"title":{},"body":{"injectables/UsersService.html":{}}}],["findchannelbyid",{"_index":348,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["findchannelbyid(@query('id",{"_index":413,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["findchannelbyid(id",{"_index":363,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["findchannelmemberbyid",{"_index":349,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["findchannelmemberbyid(@param('id",{"_index":415,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["findchannelmemberbyid(id",{"_index":365,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["findchannelmessage",{"_index":350,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["findchannelmessage(userid",{"_index":368,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["findcontactbyuser",{"_index":493,"title":{},"body":{"controllers/ContactsController.html":{}}}],["findcontactbyuser(@param('userid",{"_index":526,"title":{},"body":{"controllers/ContactsController.html":{}}}],["findcontactbyuser(userid",{"_index":507,"title":{},"body":{"controllers/ContactsController.html":{}}}],["findforuser",{"_index":1205,"title":{},"body":{"injectables/MessagesService.html":{},"miscellaneous/variables.html":{}}}],["findforuser(user",{"_index":1211,"title":{},"body":{"injectables/MessagesService.html":{}}}],["findone",{"_index":559,"title":{},"body":{"injectables/ContactsService.html":{},"interfaces/StringIndexedObject.html":{},"miscellaneous/variables.html":{}}}],["findone(userid",{"_index":579,"title":{},"body":{"injectables/ContactsService.html":{}}}],["findonecontact",{"_index":560,"title":{},"body":{"injectables/ContactsService.html":{},"miscellaneous/variables.html":{}}}],["findonecontact(userid",{"_index":583,"title":{},"body":{"injectables/ContactsService.html":{}}}],["findoneorcreate",{"_index":561,"title":{},"body":{"injectables/ContactsService.html":{},"miscellaneous/variables.html":{}}}],["findoneorcreate(userid",{"_index":585,"title":{},"body":{"injectables/ContactsService.html":{}}}],["findoneorfail",{"_index":1288,"title":{},"body":{"interfaces/StringIndexedObject.html":{},"miscellaneous/variables.html":{}}}],["firstkey",{"_index":1305,"title":{},"body":{"interfaces/StringIndexedObject.html":{},"miscellaneous/variables.html":{}}}],["firstunprocessedevent",{"_index":1041,"title":{},"body":{"injectables/EventsService.html":{}}}],["firstunprocessedevent.channelid",{"_index":1060,"title":{},"body":{"injectables/EventsService.html":{}}}],["firstunprocessedevent.content",{"_index":1062,"title":{},"body":{"injectables/EventsService.html":{}}}],["firstunprocessedevent.id",{"_index":1056,"title":{},"body":{"injectables/EventsService.html":{}}}],["firstunprocessedevent.signature",{"_index":1064,"title":{},"body":{"injectables/EventsService.html":{}}}],["fixture",{"_index":1319,"title":{},"body":{"interfaces/StringIndexedObject.html":{},"miscellaneous/variables.html":{}}}],["found",{"_index":1054,"title":{},"body":{"injectables/EventsService.html":{},"injectables/Web3Service.html":{},"index.html":{}}}],["fromblock",{"_index":1551,"title":{},"body":{"injectables/Web3Service.html":{}}}],["fullsignature",{"_index":1449,"title":{},"body":{"classes/VaultKeyManager.html":{}}}],["fullsignature.split(':')[2",{"_index":1451,"title":{},"body":{"classes/VaultKeyManager.html":{}}}],["function",{"_index":1297,"title":{},"body":{"interfaces/StringIndexedObject.html":{},"injectables/Web3Service.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["functional",{"_index":397,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["functions",{"_index":1748,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["future",{"_index":1272,"title":{},"body":{"classes/SendMessageDto.html":{}}}],["gaslimit",{"_index":1602,"title":{},"body":{"injectables/Web3Service.html":{}}}],["gasprice",{"_index":1604,"title":{},"body":{"injectables/Web3Service.html":{}}}],["generate",{"_index":57,"title":{},"body":{"interfaces/AnonKeySet.html":{},"injectables/CryptographyService.html":{},"controllers/DevelopmentController.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["generatealicenbob",{"_index":36,"title":{},"body":{"interfaces/AnonKeySet.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"miscellaneous/variables.html":{}}}],["generateanonkeys",{"_index":34,"title":{},"body":{"interfaces/AnonKeySet.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"miscellaneous/variables.html":{}}}],["generated",{"_index":467,"title":{},"body":{"classes/Contact.html":{},"index.html":{}}}],["generated('uuid",{"_index":471,"title":{},"body":{"classes/Contact.html":{}}}],["generateecdhsharedsecret",{"_index":677,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["generateecdhsharedsecret(publickey",{"_index":721,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["generatehandshake",{"_index":562,"title":{},"body":{"injectables/ContactsService.html":{}}}],["generatehandshake(userid",{"_index":587,"title":{},"body":{"injectables/ContactsService.html":{}}}],["generatenoncebuffer",{"_index":678,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["generatenoncebuffer(nonce",{"_index":728,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["generateoneusekeypair",{"_index":679,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["generaterandombytes",{"_index":680,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["generaterandomnumber",{"_index":681,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["generatereplyhandshake",{"_index":494,"title":{},"body":{"controllers/ContactsController.html":{}}}],["generatereplyhandshake(userid",{"_index":510,"title":{},"body":{"controllers/ContactsController.html":{}}}],["generates",{"_index":723,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["generatesha256hash",{"_index":682,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["generatesha256hash(data",{"_index":750,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["generatesharedsecret",{"_index":37,"title":{},"body":{"interfaces/AnonKeySet.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"miscellaneous/variables.html":{}}}],["generatesharedsecret(yourpubliconetimekey",{"_index":1323,"title":{},"body":{"interfaces/TestHelper.html":{}}}],["generatesignature",{"_index":683,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["generatesignature(data",{"_index":757,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["generatesigningkeypair",{"_index":684,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["generation",{"_index":715,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["get('/:user",{"_index":1169,"title":{},"body":{"controllers/MessagesController.html":{}}}],["get(':path",{"_index":1069,"title":{},"body":{"controllers/IpfsController.html":{}}}],["get(':userid",{"_index":514,"title":{},"body":{"controllers/ContactsController.html":{}}}],["get(':userid/:contactid",{"_index":508,"title":{},"body":{"controllers/ContactsController.html":{}}}],["get('block",{"_index":963,"title":{},"body":{"controllers/EventsController.html":{}}}],["get('contact/:userid/:contactname",{"_index":887,"title":{},"body":{"controllers/DevelopmentController.html":{}}}],["get('cryptography/verify",{"_index":894,"title":{},"body":{"controllers/DevelopmentController.html":{}}}],["get('generate",{"_index":890,"title":{},"body":{"controllers/DevelopmentController.html":{}}}],["get('member",{"_index":361,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["get('member/:id",{"_index":366,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["get('message",{"_index":419,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["get('refresh",{"_index":384,"title":{},"body":{"controllers/ChannelsController.html":{},"controllers/Web3Controller.html":{}}}],["get('unprocessed",{"_index":968,"title":{},"body":{"controllers/EventsController.html":{}}}],["get(@param('path",{"_index":1080,"title":{},"body":{"controllers/IpfsController.html":{}}}],["get(@query('name",{"_index":1350,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(name",{"_index":1341,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(path",{"_index":1068,"title":{},"body":{"controllers/IpfsController.html":{}}}],["get(values",{"_index":1302,"title":{},"body":{"interfaces/StringIndexedObject.html":{},"miscellaneous/variables.html":{}}}],["getall",{"_index":990,"title":{},"body":{"injectables/EventsService.html":{},"miscellaneous/variables.html":{}}}],["getallchannels",{"_index":351,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["getallmessages",{"_index":1164,"title":{},"body":{"controllers/MessagesController.html":{}}}],["getblockchainevents",{"_index":1458,"title":{},"body":{"controllers/Web3Controller.html":{}}}],["getbyid",{"_index":956,"title":{},"body":{"controllers/EventsController.html":{}}}],["getbyid(@query('id",{"_index":976,"title":{},"body":{"controllers/EventsController.html":{}}}],["getbyid(id",{"_index":961,"title":{},"body":{"controllers/EventsController.html":{}}}],["getbytransactionhash",{"_index":991,"title":{},"body":{"injectables/EventsService.html":{},"miscellaneous/variables.html":{}}}],["getbytransactionhash(transactionhash",{"_index":1003,"title":{},"body":{"injectables/EventsService.html":{}}}],["getbyuser",{"_index":563,"title":{},"body":{"injectables/ContactsService.html":{},"miscellaneous/variables.html":{}}}],["getbyuser(userid",{"_index":589,"title":{},"body":{"injectables/ContactsService.html":{}}}],["getcontact",{"_index":884,"title":{},"body":{"controllers/DevelopmentController.html":{}}}],["getcontact(${userid",{"_index":908,"title":{},"body":{"controllers/DevelopmentController.html":{}}}],["getcontact(@param('userid",{"_index":903,"title":{},"body":{"controllers/DevelopmentController.html":{}}}],["getcontact(userid",{"_index":886,"title":{},"body":{"controllers/DevelopmentController.html":{}}}],["getcontactsforuser",{"_index":495,"title":{},"body":{"controllers/ContactsController.html":{}}}],["getcontactsforuser(@param('userid",{"_index":524,"title":{},"body":{"controllers/ContactsController.html":{}}}],["getcontactsforuser(userid",{"_index":513,"title":{},"body":{"controllers/ContactsController.html":{}}}],["getfirstunprocessedevent",{"_index":992,"title":{},"body":{"injectables/EventsService.html":{},"miscellaneous/variables.html":{}}}],["getin",{"_index":1308,"title":{},"body":{"interfaces/StringIndexedObject.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getin(val",{"_index":1317,"title":{},"body":{"interfaces/StringIndexedObject.html":{},"miscellaneous/variables.html":{}}}],["getin(values",{"_index":1307,"title":{},"body":{"interfaces/StringIndexedObject.html":{},"miscellaneous/variables.html":{}}}],["getlatestblock",{"_index":993,"title":{},"body":{"injectables/EventsService.html":{},"miscellaneous/variables.html":{}}}],["getlatestblocknumber",{"_index":957,"title":{},"body":{"controllers/EventsController.html":{}}}],["getmasterkey",{"_index":885,"title":{},"body":{"controllers/DevelopmentController.html":{}}}],["getmasterkey(@param('userid",{"_index":900,"title":{},"body":{"controllers/DevelopmentController.html":{}}}],["getmasterkey(userid",{"_index":889,"title":{},"body":{"controllers/DevelopmentController.html":{}}}],["getmessages",{"_index":1165,"title":{},"body":{"controllers/MessagesController.html":{}}}],["getmessages(@param('user",{"_index":1185,"title":{},"body":{"controllers/MessagesController.html":{}}}],["getmessages(user",{"_index":1168,"title":{},"body":{"controllers/MessagesController.html":{}}}],["getmockweb3config",{"_index":203,"title":{},"body":{"interfaces/BroadcastAccountConfig.html":{},"interfaces/EkhoWeb3Config.html":{},"interfaces/Web3Config.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getonebyid",{"_index":994,"title":{},"body":{"injectables/EventsService.html":{},"miscellaneous/variables.html":{}}}],["getonebyid(id",{"_index":1008,"title":{},"body":{"injectables/EventsService.html":{}}}],["getpublickey",{"_index":1378,"title":{},"body":{"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["getpublickey(id",{"_index":1392,"title":{},"body":{"injectables/UsersService.html":{}}}],["getrandomisedbuffer",{"_index":685,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["getrandomisedbuffer(size",{"_index":764,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["getrawone",{"_index":1031,"title":{},"body":{"injectables/EventsService.html":{}}}],["getrepository",{"_index":1018,"title":{},"body":{"injectables/EventsService.html":{}}}],["getrepository(block",{"_index":1027,"title":{},"body":{"injectables/EventsService.html":{}}}],["getrepository(ekhoevent",{"_index":1042,"title":{},"body":{"injectables/EventsService.html":{}}}],["getrepositorytoken(dbkeypair",{"_index":1933,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gets",{"_index":412,"title":{},"body":{"controllers/ChannelsController.html":{},"injectables/Web3Service.html":{}}}],["gettesthelper",{"_index":56,"title":{},"body":{"interfaces/AnonKeySet.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getting",{"_index":1232,"title":{"index.html":{}},"body":{"injectables/MessagesService.html":{},"injectables/Web3Service.html":{}}}],["gettransactionbychannelid",{"_index":995,"title":{},"body":{"injectables/EventsService.html":{},"miscellaneous/variables.html":{}}}],["gettransactionbychannelid(channelid",{"_index":1010,"title":{},"body":{"injectables/EventsService.html":{}}}],["gettransactioncount",{"_index":1481,"title":{},"body":{"injectables/Web3Service.html":{},"miscellaneous/variables.html":{}}}],["gettransactioncount(account",{"_index":1489,"title":{},"body":{"injectables/Web3Service.html":{}}}],["getzeroedbuffer",{"_index":686,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["getzeroedbuffer(size",{"_index":767,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["github",{"_index":1850,"title":{},"body":{"index.html":{}}}],["given",{"_index":1237,"title":{},"body":{"injectables/MessagesService.html":{}}}],["graphql",{"_index":220,"title":{},"body":{"classes/Channel.html":{},"classes/ChannelDto.html":{},"classes/ChannelMember.html":{},"classes/ChannelMemberDto.html":{},"classes/ChannelMembersResolver.html":{},"classes/ChannelMessage.html":{},"classes/ChannelResolver.html":{},"classes/Contact.html":{},"classes/ContactDto.html":{},"classes/ContactHandshakeDto.html":{},"classes/ContactsResolver.html":{},"classes/CreateChannelDto.html":{},"classes/CreateChannelMemberDto.html":{},"classes/CreateUserDto.html":{},"classes/Message.html":{},"classes/SendMessageDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"dependencies.html":{}}}],["graphqlmodule",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlmodule.forroot",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["groupby('ekhoevent.id",{"_index":1048,"title":{},"body":{"injectables/EventsService.html":{}}}],["gurus",{"_index":1503,"title":{},"body":{"injectables/Web3Service.html":{}}}],["gwei",{"_index":1606,"title":{},"body":{"injectables/Web3Service.html":{}}}],["handshake",{"_index":571,"title":{},"body":{"injectables/ContactsService.html":{},"miscellaneous/variables.html":{}}}],["handshake.dto",{"_index":521,"title":{},"body":{"controllers/ContactsController.html":{},"injectables/ContactsService.html":{}}}],["handshake.dto.ts",{"_index":481,"title":{},"body":{"classes/ContactHandshakeDto.html":{},"coverage.html":{}}}],["handshake.dto.ts:12",{"_index":483,"title":{},"body":{"classes/ContactHandshakeDto.html":{}}}],["handshake.dto.ts:15",{"_index":484,"title":{},"body":{"classes/ContactHandshakeDto.html":{}}}],["handshake.dto.ts:18",{"_index":486,"title":{},"body":{"classes/ContactHandshakeDto.html":{}}}],["handshake.dto.ts:21",{"_index":485,"title":{},"body":{"classes/ContactHandshakeDto.html":{}}}],["handshake.dto.ts:6",{"_index":482,"title":{},"body":{"classes/ContactHandshakeDto.html":{}}}],["handshake.dto.ts:9",{"_index":487,"title":{},"body":{"classes/ContactHandshakeDto.html":{}}}],["handshake.identifier",{"_index":633,"title":{},"body":{"injectables/ContactsService.html":{}}}],["handshake.oneusekey",{"_index":637,"title":{},"body":{"injectables/ContactsService.html":{}}}],["handshake.signature",{"_index":639,"title":{},"body":{"injectables/ContactsService.html":{}}}],["handshake.signingkey",{"_index":635,"title":{},"body":{"injectables/ContactsService.html":{}}}],["handshake/:userid/:contactname",{"_index":501,"title":{},"body":{"controllers/ContactsController.html":{}}}],["handshakeprivatekey",{"_index":446,"title":{},"body":{"classes/Contact.html":{},"controllers/DevelopmentController.html":{},"miscellaneous/variables.html":{}}}],["handshakepublickey",{"_index":447,"title":{},"body":{"classes/Contact.html":{},"controllers/DevelopmentController.html":{},"miscellaneous/variables.html":{}}}],["hardfork",{"_index":180,"title":{},"body":{"interfaces/BroadcastAccountConfig.html":{},"interfaces/EkhoWeb3Config.html":{},"interfaces/Web3Config.html":{},"injectables/Web3Service.html":{},"miscellaneous/variables.html":{}}}],["hash",{"_index":753,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["hashed",{"_index":754,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["headers",{"_index":1921,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hellman",{"_index":744,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["helper",{"_index":50,"title":{},"body":{"interfaces/AnonKeySet.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{}}}],["helpers.ts",{"_index":8,"title":{},"body":{"interfaces/AnonKeySet.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/StringIndexedObject.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["helpers.ts:27",{"_index":1322,"title":{},"body":{"interfaces/TestHelper.html":{}}}],["helpers.ts:28",{"_index":1321,"title":{},"body":{"interfaces/TestHelper.html":{}}}],["helpers.ts:29",{"_index":1324,"title":{},"body":{"interfaces/TestHelper.html":{}}}],["helpers.ts:34",{"_index":1276,"title":{},"body":{"interfaces/StringIndexedObject.html":{},"interfaces/TestHelper.html":{}}}],["helpers/cryptography.test",{"_index":7,"title":{},"body":{"interfaces/AnonKeySet.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["helpers/faker.ts",{"_index":1655,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["helpers/mock",{"_index":1662,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["here",{"_index":1846,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["hex",{"_index":702,"title":{},"body":{"injectables/CryptographyService.html":{},"injectables/Web3Service.html":{}}}],["host",{"_index":1905,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http",{"_index":1115,"title":{},"body":{"injectables/IpfsService.html":{},"dependencies.html":{}}}],["http://localhost:3000/api",{"_index":1797,"title":{},"body":{"index.html":{}}}],["http://localhost:3100/api",{"_index":1824,"title":{},"body":{"index.html":{}}}],["http://localhost:3200/api",{"_index":1825,"title":{},"body":{"index.html":{}}}],["https",{"_index":1910,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://consensys.github.io/ekho",{"_index":1847,"title":{},"body":{"index.html":{}}}],["https://github.com/ipfs/interface",{"_index":1105,"title":{},"body":{"injectables/IpfsService.html":{}}}],["huge",{"_index":1123,"title":{},"body":{"injectables/IpfsService.html":{}}}],["id",{"_index":150,"title":{},"body":{"classes/Block.html":{},"classes/Channel.html":{},"classes/ChannelDto.html":{},"classes/ChannelMember.html":{},"classes/ChannelMemberDto.html":{},"classes/ChannelMessage.html":{},"classes/ChannelResolver.html":{},"controllers/ChannelsController.html":{},"classes/Contact.html":{},"injectables/ContactsService.html":{},"classes/DbKeyManager.html":{},"classes/DbKeyPair.html":{},"controllers/DevelopmentController.html":{},"classes/EkhoEvent.html":{},"classes/EkhoEventDto.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"interfaces/KeyManager.html":{},"classes/Message.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"classes/SendMessageDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"injectables/UsersService.html":{},"classes/VaultKeyManager.html":{},"controllers/Web3Controller.html":{},"miscellaneous/variables.html":{}}}],["id.tostring",{"_index":1034,"title":{},"body":{"injectables/EventsService.html":{}}}],["id/:content/:signature",{"_index":1462,"title":{},"body":{"controllers/Web3Controller.html":{}}}],["identifier",{"_index":266,"title":{},"body":{"classes/ChannelMemberDto.html":{},"classes/ChannelMessageDto.html":{},"classes/Contact.html":{},"classes/ContactHandshakeDto.html":{},"classes/CreateChannelMemberDto.html":{},"classes/CreateChannelMessageDto.html":{},"controllers/DevelopmentController.html":{},"classes/EkhoEventDto.html":{},"classes/EncodedMessageDto.html":{},"classes/RawMessageDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["images",{"_index":1809,"title":{},"body":{"index.html":{}}}],["implementation",{"_index":1899,"title":{},"body":{"miscellaneous/variables.html":{}}}],["implementations/key",{"_index":1146,"title":{},"body":{"modules/KeyManagerModule.html":{}}}],["implements",{"_index":476,"title":{},"body":{"classes/ContactDto.html":{},"classes/CreateUserDto.html":{},"classes/DbKeyManager.html":{},"classes/UserDto.html":{},"classes/VaultKeyManager.html":{}}}],["import",{"_index":16,"title":{},"body":{"interfaces/AnonKeySet.html":{},"modules/AppModule.html":{},"classes/Block.html":{},"classes/Channel.html":{},"classes/ChannelDto.html":{},"classes/ChannelMember.html":{},"classes/ChannelMemberDto.html":{},"classes/ChannelMembersResolver.html":{},"classes/ChannelMessage.html":{},"classes/ChannelMessageDto.html":{},"classes/ChannelResolver.html":{},"controllers/ChannelsController.html":{},"modules/ChannelsModule.html":{},"classes/Contact.html":{},"classes/ContactDto.html":{},"classes/ContactHandshakeDto.html":{},"controllers/ContactsController.html":{},"modules/ContactsModule.html":{},"classes/ContactsResolver.html":{},"injectables/ContactsService.html":{},"classes/CreateChannelDto.html":{},"classes/CreateChannelMemberDto.html":{},"classes/CreateChannelMessageDto.html":{},"classes/CreateUserDto.html":{},"modules/CryptographyModule.html":{},"injectables/CryptographyService.html":{},"classes/DbKeyManager.html":{},"classes/DbKeyPair.html":{},"controllers/DevelopmentController.html":{},"modules/DevelopmentModule.html":{},"classes/EkhoEvent.html":{},"classes/EkhoEventDto.html":{},"classes/EncodedMessageDto.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"controllers/IpfsController.html":{},"classes/IpfsMessageDto.html":{},"modules/IpfsModule.html":{},"injectables/IpfsService.html":{},"interfaces/KeyManager.html":{},"modules/KeyManagerModule.html":{},"classes/Message.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/ProcessReport.html":{},"classes/RawMessageDto.html":{},"classes/SendMessageDto.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"classes/VaultKeyManager.html":{},"controllers/Web3Controller.html":{},"modules/Web3Module.html":{},"injectables/Web3Service.html":{}}}],["imports",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"modules/ChannelsModule.html":{},"modules/ContactsModule.html":{},"modules/DevelopmentModule.html":{},"modules/EventsModule.html":{},"modules/IpfsModule.html":{},"modules/KeyManagerModule.html":{},"modules/MessagesModule.html":{},"modules/UsersModule.html":{},"modules/Web3Module.html":{}}}],["include",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["including",{"_index":410,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"interfaces/AnonKeySet.html":{},"classes/Block.html":{},"interfaces/BroadcastAccountConfig.html":{},"classes/Channel.html":{},"classes/ChannelDto.html":{},"classes/ChannelMember.html":{},"classes/ChannelMemberDto.html":{},"classes/ChannelMembersResolver.html":{},"classes/ChannelMessage.html":{},"classes/ChannelMessageDto.html":{},"classes/ChannelResolver.html":{},"controllers/ChannelsController.html":{},"classes/Contact.html":{},"classes/ContactDto.html":{},"classes/ContactHandshakeDto.html":{},"controllers/ContactsController.html":{},"classes/ContactsResolver.html":{},"injectables/ContactsService.html":{},"classes/CreateChannelDto.html":{},"classes/CreateChannelMemberDto.html":{},"classes/CreateChannelMessageDto.html":{},"classes/CreateUserDto.html":{},"classes/CryptographyKeyPairDto.html":{},"injectables/CryptographyService.html":{},"classes/DbKeyManager.html":{},"classes/DbKeyPair.html":{},"controllers/DevelopmentController.html":{},"classes/EkhoEvent.html":{},"classes/EkhoEventDto.html":{},"interfaces/EkhoWeb3Config.html":{},"classes/EncodedMessageDto.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/IpfsController.html":{},"classes/IpfsMessageDto.html":{},"injectables/IpfsService.html":{},"interfaces/KeyManager.html":{},"classes/Message.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"classes/ProcessReport.html":{},"classes/RawMessageDto.html":{},"classes/SendMessageDto.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"classes/VaultKeyManager.html":{},"interfaces/Web3Config.html":{},"controllers/Web3Controller.html":{},"injectables/Web3Service.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indexable",{"_index":1275,"title":{},"body":{"interfaces/StringIndexedObject.html":{}}}],["indexed",{"_index":1940,"title":{},"body":{"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/AnonKeySet.html":{},"modules/AppModule.html":{},"classes/Block.html":{},"interfaces/BroadcastAccountConfig.html":{},"classes/Channel.html":{},"classes/ChannelDto.html":{},"classes/ChannelMember.html":{},"classes/ChannelMemberDto.html":{},"classes/ChannelMembersResolver.html":{},"classes/ChannelMessage.html":{},"classes/ChannelMessageDto.html":{},"classes/ChannelResolver.html":{},"controllers/ChannelsController.html":{},"modules/ChannelsModule.html":{},"classes/Contact.html":{},"classes/ContactDto.html":{},"classes/ContactHandshakeDto.html":{},"controllers/ContactsController.html":{},"modules/ContactsModule.html":{},"classes/ContactsResolver.html":{},"injectables/ContactsService.html":{},"classes/CreateChannelDto.html":{},"classes/CreateChannelMemberDto.html":{},"classes/CreateChannelMessageDto.html":{},"classes/CreateUserDto.html":{},"classes/CryptographyKeyPairDto.html":{},"modules/CryptographyModule.html":{},"injectables/CryptographyService.html":{},"classes/DbKeyManager.html":{},"classes/DbKeyPair.html":{},"controllers/DevelopmentController.html":{},"modules/DevelopmentModule.html":{},"classes/EkhoEvent.html":{},"classes/EkhoEventDto.html":{},"interfaces/EkhoWeb3Config.html":{},"classes/EncodedMessageDto.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"controllers/IpfsController.html":{},"classes/IpfsMessageDto.html":{},"modules/IpfsModule.html":{},"injectables/IpfsService.html":{},"interfaces/KeyManager.html":{},"modules/KeyManagerModule.html":{},"classes/Message.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/ProcessReport.html":{},"classes/RawMessageDto.html":{},"classes/SendMessageDto.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/StringIndexedObject.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"classes/VaultKeyManager.html":{},"interfaces/Web3Config.html":{},"controllers/Web3Controller.html":{},"modules/Web3Module.html":{},"injectables/Web3Service.html":{}}}],["init",{"_index":500,"title":{},"body":{"controllers/ContactsController.html":{}}}],["inithandshake",{"_index":496,"title":{},"body":{"controllers/ContactsController.html":{},"classes/ContactsResolver.html":{},"injectables/ContactsService.html":{},"miscellaneous/variables.html":{}}}],["inithandshake(userid",{"_index":516,"title":{},"body":{"controllers/ContactsController.html":{},"injectables/ContactsService.html":{}}}],["inject",{"_index":596,"title":{},"body":{"injectables/ContactsService.html":{},"controllers/DevelopmentController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["inject('keymanager",{"_index":603,"title":{},"body":{"injectables/ContactsService.html":{},"controllers/DevelopmentController.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":553,"title":{"injectables/ContactsService.html":{},"injectables/CryptographyService.html":{},"injectables/EventsService.html":{},"injectables/IpfsService.html":{},"injectables/MessagesService.html":{},"injectables/UsersService.html":{},"injectables/Web3Service.html":{}},"body":{"injectables/ContactsService.html":{},"injectables/CryptographyService.html":{},"injectables/EventsService.html":{},"injectables/IpfsService.html":{},"injectables/MessagesService.html":{},"injectables/UsersService.html":{},"injectables/Web3Service.html":{},"coverage.html":{}}}],["injectables",{"_index":554,"title":{},"body":{"injectables/ContactsService.html":{},"injectables/CryptographyService.html":{},"injectables/EventsService.html":{},"injectables/IpfsService.html":{},"injectables/MessagesService.html":{},"injectables/UsersService.html":{},"injectables/Web3Service.html":{},"overview.html":{}}}],["injectrepository",{"_index":597,"title":{},"body":{"injectables/ContactsService.html":{},"injectables/EventsService.html":{},"injectables/MessagesService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(block",{"_index":1020,"title":{},"body":{"injectables/EventsService.html":{}}}],["injectrepository(contact",{"_index":602,"title":{},"body":{"injectables/ContactsService.html":{}}}],["injectrepository(ekhoevent",{"_index":1019,"title":{},"body":{"injectables/EventsService.html":{}}}],["injectrepository(message",{"_index":1218,"title":{},"body":{"injectables/MessagesService.html":{}}}],["injectrepository(user",{"_index":1395,"title":{},"body":{"injectables/UsersService.html":{}}}],["input",{"_index":708,"title":{},"body":{"injectables/CryptographyService.html":{},"classes/VaultKeyManager.html":{}}}],["inputs",{"_index":1939,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inputtype",{"_index":232,"title":{},"body":{"classes/ChannelDto.html":{},"classes/ChannelMemberDto.html":{},"classes/ContactDto.html":{},"classes/ContactHandshakeDto.html":{},"classes/CreateChannelDto.html":{},"classes/CreateChannelMemberDto.html":{},"classes/CreateUserDto.html":{},"classes/SendMessageDto.html":{},"classes/UserDto.html":{}}}],["installation",{"_index":1756,"title":{},"body":{"index.html":{}}}],["installconfiguration",{"_index":1758,"title":{},"body":{"index.html":{}}}],["instance",{"_index":46,"title":{},"body":{"interfaces/AnonKeySet.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"index.html":{}}}],["instances",{"_index":1829,"title":{},"body":{"index.html":{}}}],["integer",{"_index":733,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["interface",{"_index":0,"title":{"interfaces/AnonKeySet.html":{},"interfaces/BroadcastAccountConfig.html":{},"interfaces/EkhoWeb3Config.html":{},"interfaces/KeyManager.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/StringIndexedObject.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"interfaces/Web3Config.html":{}},"body":{"interfaces/AnonKeySet.html":{},"interfaces/BroadcastAccountConfig.html":{},"interfaces/EkhoWeb3Config.html":{},"interfaces/KeyManager.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/StringIndexedObject.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"interfaces/Web3Config.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/AnonKeySet.html":{},"interfaces/BroadcastAccountConfig.html":{},"interfaces/EkhoWeb3Config.html":{},"interfaces/KeyManager.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/StringIndexedObject.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"interfaces/Web3Config.html":{},"overview.html":{}}}],["internally",{"_index":1271,"title":{},"body":{"classes/SendMessageDto.html":{}}}],["internaltype",{"_index":1941,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ipfs",{"_index":1067,"title":{},"body":{"controllers/IpfsController.html":{},"injectables/IpfsService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["ipfs.client.factory",{"_index":1093,"title":{},"body":{"modules/IpfsModule.html":{}}}],["ipfs.client.ts",{"_index":1684,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["ipfs.controller",{"_index":1094,"title":{},"body":{"modules/IpfsModule.html":{}}}],["ipfs.service",{"_index":1078,"title":{},"body":{"controllers/IpfsController.html":{},"modules/IpfsModule.html":{}}}],["ipfs/ipfs.configuration",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["ipfs/ipfs.module",{"_index":439,"title":{},"body":{"modules/ChannelsModule.html":{},"modules/MessagesModule.html":{}}}],["ipfs/ipfs.service",{"_index":1216,"title":{},"body":{"injectables/MessagesService.html":{}}}],["ipfs_host=ipfs.infura.io",{"_index":1760,"title":{},"body":{"index.html":{}}}],["ipfs_port=5001running",{"_index":1761,"title":{},"body":{"index.html":{}}}],["ipfsclient",{"_index":1095,"title":{},"body":{"modules/IpfsModule.html":{},"injectables/IpfsService.html":{},"miscellaneous/variables.html":{}}}],["ipfsclientfactory",{"_index":1092,"title":{},"body":{"modules/IpfsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["ipfsconfiguration",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["ipfscontroller",{"_index":1065,"title":{"controllers/IpfsController.html":{}},"body":{"controllers/IpfsController.html":{},"modules/IpfsModule.html":{},"coverage.html":{}}}],["ipfsmessagedto",{"_index":1073,"title":{"classes/IpfsMessageDto.html":{}},"body":{"controllers/IpfsController.html":{},"classes/IpfsMessageDto.html":{},"injectables/IpfsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["ipfsmodule",{"_index":434,"title":{"modules/IpfsModule.html":{}},"body":{"modules/ChannelsModule.html":{},"modules/IpfsModule.html":{},"modules/MessagesModule.html":{},"modules.html":{},"overview.html":{}}}],["ipfspath",{"_index":1108,"title":{},"body":{"injectables/IpfsService.html":{},"classes/Message.html":{},"injectables/MessagesService.html":{},"miscellaneous/variables.html":{}}}],["ipfsservice",{"_index":1077,"title":{"injectables/IpfsService.html":{}},"body":{"controllers/IpfsController.html":{},"modules/IpfsModule.html":{},"injectables/IpfsService.html":{},"injectables/MessagesService.html":{},"coverage.html":{},"overview.html":{}}}],["ireland",{"_index":1879,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isglobal",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["isolated",{"_index":1820,"title":{},"body":{"index.html":{}}}],["jest.fn",{"_index":1279,"title":{},"body":{"interfaces/StringIndexedObject.html":{},"miscellaneous/variables.html":{}}}],["jest.mock",{"_index":1896,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joincolumn",{"_index":253,"title":{},"body":{"classes/ChannelMember.html":{},"classes/DbKeyPair.html":{},"classes/EkhoEvent.html":{}}}],["js",{"_index":1106,"title":{},"body":{"injectables/IpfsService.html":{}}}],["json.parse(file.content.tostring('utf8",{"_index":1121,"title":{},"body":{"injectables/IpfsService.html":{}}}],["json.stringify(data",{"_index":1128,"title":{},"body":{"injectables/IpfsService.html":{}}}],["key",{"_index":82,"title":{},"body":{"interfaces/AnonKeySet.html":{},"modules/AppModule.html":{},"classes/ChannelDto.html":{},"classes/ChannelMemberDto.html":{},"modules/ChannelsModule.html":{},"modules/ContactsModule.html":{},"injectables/ContactsService.html":{},"classes/CreateChannelMemberDto.html":{},"injectables/CryptographyService.html":{},"classes/DbKeyManager.html":{},"controllers/DevelopmentController.html":{},"modules/DevelopmentModule.html":{},"modules/KeyManagerModule.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VaultKeyManager.html":{},"miscellaneous/variables.html":{}}}],["key/:userid/:contactname",{"_index":892,"title":{},"body":{"controllers/DevelopmentController.html":{}}}],["key_manager_type",{"_index":1932,"title":{},"body":{"miscellaneous/variables.html":{}}}],["keycontext",{"_index":812,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["keymanager",{"_index":568,"title":{"interfaces/KeyManager.html":{}},"body":{"injectables/ContactsService.html":{},"classes/DbKeyManager.html":{},"controllers/DevelopmentController.html":{},"interfaces/KeyManager.html":{},"injectables/UsersService.html":{},"classes/VaultKeyManager.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["keymanagerconfiguration",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["keymanagerfactory",{"_index":1147,"title":{},"body":{"modules/KeyManagerModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["keymanagermodule",{"_index":106,"title":{"modules/KeyManagerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ChannelsModule.html":{},"modules/ContactsModule.html":{},"modules/DevelopmentModule.html":{},"modules/KeyManagerModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["keymanagerservice",{"_index":1380,"title":{},"body":{"injectables/UsersService.html":{}}}],["keypair",{"_index":773,"title":{},"body":{"injectables/CryptographyService.html":{},"classes/DbKeyManager.html":{}}}],["keypair.dto",{"_index":20,"title":{},"body":{"interfaces/AnonKeySet.html":{},"injectables/ContactsService.html":{},"injectables/CryptographyService.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{}}}],["keypair.dto.ts",{"_index":666,"title":{},"body":{"classes/CryptographyKeyPairDto.html":{},"coverage.html":{}}}],["keypair.dto.ts:2",{"_index":668,"title":{},"body":{"classes/CryptographyKeyPairDto.html":{}}}],["keypair.dto.ts:3",{"_index":667,"title":{},"body":{"classes/CryptographyKeyPairDto.html":{}}}],["keypair.privatekey",{"_index":868,"title":{},"body":{"classes/DbKeyManager.html":{}}}],["keypair.publickey",{"_index":866,"title":{},"body":{"classes/DbKeyManager.html":{}}}],["keypairrepository",{"_index":848,"title":{},"body":{"classes/DbKeyManager.html":{},"miscellaneous/variables.html":{}}}],["keys",{"_index":726,"title":{},"body":{"injectables/CryptographyService.html":{},"classes/VaultKeyManager.html":{}}}],["keys/keys/${id",{"_index":1441,"title":{},"body":{"classes/VaultKeyManager.html":{}}}],["keys/sign/${id",{"_index":1448,"title":{},"body":{"classes/VaultKeyManager.html":{}}}],["keystr",{"_index":690,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["lalala",{"_index":1877,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lastsavedblock",{"_index":1552,"title":{},"body":{"injectables/Web3Service.html":{}}}],["later",{"_index":1125,"title":{},"body":{"injectables/IpfsService.html":{}}}],["lazy",{"_index":1467,"title":{},"body":{"controllers/Web3Controller.html":{}}}],["legend",{"_index":96,"title":{},"body":{"modules/AppModule.html":{},"modules/ChannelsModule.html":{},"modules/ContactsModule.html":{},"modules/CryptographyModule.html":{},"modules/DevelopmentModule.html":{},"modules/EventsModule.html":{},"modules/IpfsModule.html":{},"modules/KeyManagerModule.html":{},"modules/MessagesModule.html":{},"modules/UsersModule.html":{},"modules/Web3Module.html":{},"overview.html":{}}}],["length",{"_index":470,"title":{},"body":{"classes/Contact.html":{},"classes/User.html":{}}}],["link",{"_index":946,"title":{},"body":{"classes/EkhoEventDto.html":{},"classes/EncodedMessageDto.html":{}}}],["literal",{"_index":1014,"title":{},"body":{"injectables/EventsService.html":{}}}],["load",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["locally",{"_index":1830,"title":{},"body":{"index.html":{}}}],["location",{"_index":198,"title":{},"body":{"interfaces/BroadcastAccountConfig.html":{},"interfaces/EkhoWeb3Config.html":{},"interfaces/Web3Config.html":{},"miscellaneous/variables.html":{}}}],["log",{"_index":1548,"title":{},"body":{"injectables/Web3Service.html":{}}}],["log.blocknumber",{"_index":1559,"title":{},"body":{"injectables/Web3Service.html":{}}}],["log.data",{"_index":1563,"title":{},"body":{"injectables/Web3Service.html":{}}}],["log.transactionhash",{"_index":1560,"title":{},"body":{"injectables/Web3Service.html":{}}}],["logger",{"_index":897,"title":{},"body":{"controllers/DevelopmentController.html":{},"injectables/EventsService.html":{},"injectables/IpfsService.html":{},"injectables/MessagesService.html":{},"injectables/Web3Service.html":{}}}],["logger.debug",{"_index":1586,"title":{},"body":{"injectables/Web3Service.html":{}}}],["logger.debug('...transaction",{"_index":1623,"title":{},"body":{"injectables/Web3Service.html":{}}}],["logger.debug('broadcasting",{"_index":1621,"title":{},"body":{"injectables/Web3Service.html":{}}}],["logger.debug('eventlog",{"_index":1545,"title":{},"body":{"injectables/Web3Service.html":{}}}],["logger.debug('file",{"_index":1132,"title":{},"body":{"injectables/IpfsService.html":{}}}],["logger.debug('getting",{"_index":1117,"title":{},"body":{"injectables/IpfsService.html":{}}}],["logger.debug('ipfs",{"_index":1119,"title":{},"body":{"injectables/IpfsService.html":{}}}],["logger.debug('looking",{"_index":1039,"title":{},"body":{"injectables/EventsService.html":{}}}],["logger.debug('marking",{"_index":1033,"title":{},"body":{"injectables/EventsService.html":{}}}],["logger.debug('one",{"_index":1053,"title":{},"body":{"injectables/EventsService.html":{}}}],["logger.debug('transaction",{"_index":1625,"title":{},"body":{"injectables/Web3Service.html":{}}}],["logger.debug(`nonce",{"_index":1591,"title":{},"body":{"injectables/Web3Service.html":{}}}],["logger.debug(contacthandshake",{"_index":906,"title":{},"body":{"controllers/DevelopmentController.html":{}}}],["logger.debug(ipfspath",{"_index":1220,"title":{},"body":{"injectables/MessagesService.html":{}}}],["logger.debug(log",{"_index":1585,"title":{},"body":{"injectables/Web3Service.html":{}}}],["logger.debug(txhash",{"_index":1222,"title":{},"body":{"injectables/MessagesService.html":{}}}],["logger.error(result",{"_index":1557,"title":{},"body":{"injectables/Web3Service.html":{}}}],["lol",{"_index":1884,"title":{},"body":{"miscellaneous/variables.html":{}}}],["made",{"_index":1878,"title":{},"body":{"miscellaneous/variables.html":{}}}],["make",{"_index":1784,"title":{},"body":{"index.html":{}}}],["manager",{"_index":840,"title":{},"body":{"classes/DbKeyManager.html":{},"classes/DbKeyPair.html":{},"modules/KeyManagerModule.html":{},"interfaces/StringIndexedObject.html":{},"classes/VaultKeyManager.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["manager.configuration",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["manager.factory",{"_index":1148,"title":{},"body":{"modules/KeyManagerModule.html":{}}}],["manager.factory.ts",{"_index":1686,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["manager.interface",{"_index":600,"title":{},"body":{"injectables/ContactsService.html":{},"classes/DbKeyManager.html":{},"controllers/DevelopmentController.html":{},"injectables/UsersService.html":{},"classes/VaultKeyManager.html":{}}}],["manager.interface.ts",{"_index":1137,"title":{},"body":{"interfaces/KeyManager.html":{},"coverage.html":{}}}],["manager.interface.ts:4",{"_index":1138,"title":{},"body":{"interfaces/KeyManager.html":{}}}],["manager.interface.ts:5",{"_index":1139,"title":{},"body":{"interfaces/KeyManager.html":{}}}],["manager.interface.ts:6",{"_index":1140,"title":{},"body":{"interfaces/KeyManager.html":{}}}],["manager.interface.ts:7",{"_index":1142,"title":{},"body":{"interfaces/KeyManager.html":{}}}],["manager.interface.ts:8",{"_index":1141,"title":{},"body":{"interfaces/KeyManager.html":{}}}],["manager.module",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"modules/ChannelsModule.html":{},"modules/ContactsModule.html":{},"modules/DevelopmentModule.html":{},"modules/UsersModule.html":{}}}],["manager.module.ts",{"_index":1145,"title":{},"body":{"modules/KeyManagerModule.html":{}}}],["manager.type",{"_index":1930,"title":{},"body":{"miscellaneous/variables.html":{}}}],["manager/implementations/key",{"_index":839,"title":{},"body":{"classes/DbKeyManager.html":{},"classes/DbKeyPair.html":{},"classes/VaultKeyManager.html":{},"coverage.html":{}}}],["manager/key",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"modules/ChannelsModule.html":{},"modules/ContactsModule.html":{},"injectables/ContactsService.html":{},"controllers/DevelopmentController.html":{},"modules/DevelopmentModule.html":{},"interfaces/KeyManager.html":{},"modules/KeyManagerModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["manytoone",{"_index":254,"title":{},"body":{"classes/ChannelMember.html":{},"classes/ChannelMessage.html":{},"classes/Contact.html":{},"classes/EkhoEvent.html":{}}}],["manytoone(undefined",{"_index":923,"title":{},"body":{"classes/EkhoEvent.html":{}}}],["markeventasprocessed",{"_index":958,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"miscellaneous/variables.html":{}}}],["markeventasprocessed(@query('id",{"_index":979,"title":{},"body":{"controllers/EventsController.html":{}}}],["markeventasprocessed(id",{"_index":965,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{}}}],["master",{"_index":891,"title":{},"body":{"controllers/DevelopmentController.html":{}}}],["matching",{"_index":90,"title":{},"body":{"interfaces/AnonKeySet.html":{},"modules/AppModule.html":{},"classes/Block.html":{},"interfaces/BroadcastAccountConfig.html":{},"classes/Channel.html":{},"classes/ChannelDto.html":{},"classes/ChannelMember.html":{},"classes/ChannelMemberDto.html":{},"classes/ChannelMembersResolver.html":{},"classes/ChannelMessage.html":{},"classes/ChannelMessageDto.html":{},"classes/ChannelResolver.html":{},"controllers/ChannelsController.html":{},"modules/ChannelsModule.html":{},"classes/Contact.html":{},"classes/ContactDto.html":{},"classes/ContactHandshakeDto.html":{},"controllers/ContactsController.html":{},"modules/ContactsModule.html":{},"classes/ContactsResolver.html":{},"injectables/ContactsService.html":{},"classes/CreateChannelDto.html":{},"classes/CreateChannelMemberDto.html":{},"classes/CreateChannelMessageDto.html":{},"classes/CreateUserDto.html":{},"classes/CryptographyKeyPairDto.html":{},"modules/CryptographyModule.html":{},"injectables/CryptographyService.html":{},"classes/DbKeyManager.html":{},"classes/DbKeyPair.html":{},"controllers/DevelopmentController.html":{},"modules/DevelopmentModule.html":{},"classes/EkhoEvent.html":{},"classes/EkhoEventDto.html":{},"interfaces/EkhoWeb3Config.html":{},"classes/EncodedMessageDto.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"controllers/IpfsController.html":{},"classes/IpfsMessageDto.html":{},"modules/IpfsModule.html":{},"injectables/IpfsService.html":{},"interfaces/KeyManager.html":{},"modules/KeyManagerModule.html":{},"classes/Message.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/ProcessReport.html":{},"classes/RawMessageDto.html":{},"classes/SendMessageDto.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/StringIndexedObject.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"classes/VaultKeyManager.html":{},"interfaces/Web3Config.html":{},"controllers/Web3Controller.html":{},"modules/Web3Module.html":{},"injectables/Web3Service.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":1030,"title":{},"body":{"injectables/EventsService.html":{}}}],["member",{"_index":270,"title":{},"body":{"classes/ChannelMemberDto.html":{},"classes/ChannelMessageDto.html":{},"controllers/ChannelsController.html":{},"classes/CreateChannelMessageDto.html":{}}}],["members",{"_index":400,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["memory",{"_index":1516,"title":{},"body":{"injectables/Web3Service.html":{}}}],["message",{"_index":272,"title":{"classes/Message.html":{}},"body":{"classes/ChannelMemberDto.html":{},"classes/ChannelMessageDto.html":{},"controllers/ChannelsController.html":{},"classes/CreateChannelMemberDto.html":{},"classes/CreateChannelMessageDto.html":{},"classes/EkhoEventDto.html":{},"classes/EncodedMessageDto.html":{},"injectables/IpfsService.html":{},"classes/Message.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/ProcessReport.html":{},"classes/RawMessageDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["message.channelid",{"_index":1182,"title":{},"body":{"controllers/MessagesController.html":{},"injectables/MessagesService.html":{}}}],["message.content",{"_index":1183,"title":{},"body":{"controllers/MessagesController.html":{},"injectables/MessagesService.html":{}}}],["message.dto",{"_index":1076,"title":{},"body":{"controllers/IpfsController.html":{},"injectables/IpfsService.html":{},"controllers/MessagesController.html":{}}}],["message.dto.ts",{"_index":1085,"title":{},"body":{"classes/IpfsMessageDto.html":{},"classes/SendMessageDto.html":{},"coverage.html":{}}}],["message.dto.ts:12",{"_index":1267,"title":{},"body":{"classes/SendMessageDto.html":{}}}],["message.dto.ts:16",{"_index":1265,"title":{},"body":{"classes/SendMessageDto.html":{}}}],["message.dto.ts:21",{"_index":1264,"title":{},"body":{"classes/SendMessageDto.html":{}}}],["message.dto.ts:5",{"_index":1086,"title":{},"body":{"classes/IpfsMessageDto.html":{}}}],["message.dto.ts:8",{"_index":1266,"title":{},"body":{"classes/SendMessageDto.html":{}}}],["message.from",{"_index":1224,"title":{},"body":{"injectables/MessagesService.html":{}}}],["message.ipfspath",{"_index":1225,"title":{},"body":{"injectables/MessagesService.html":{}}}],["message.timestamp",{"_index":1223,"title":{},"body":{"injectables/MessagesService.html":{}}}],["message.to",{"_index":1181,"title":{},"body":{"controllers/MessagesController.html":{},"injectables/MessagesService.html":{}}}],["message.txhash",{"_index":1226,"title":{},"body":{"injectables/MessagesService.html":{}}}],["messagechainkey",{"_index":237,"title":{},"body":{"classes/ChannelMember.html":{},"classes/ChannelMemberDto.html":{},"classes/CreateChannelMemberDto.html":{},"miscellaneous/variables.html":{}}}],["messagecontents",{"_index":310,"title":{},"body":{"classes/ChannelMessage.html":{},"classes/ChannelMessageDto.html":{},"classes/CreateChannelMessageDto.html":{},"classes/RawMessageDto.html":{},"miscellaneous/variables.html":{}}}],["messagerepository",{"_index":1209,"title":{},"body":{"injectables/MessagesService.html":{}}}],["messages",{"_index":375,"title":{},"body":{"controllers/ChannelsController.html":{},"injectables/IpfsService.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"classes/ProcessReport.html":{}}}],["messages.controller",{"_index":1202,"title":{},"body":{"modules/MessagesModule.html":{}}}],["messages.push(message",{"_index":1195,"title":{},"body":{"controllers/MessagesController.html":{}}}],["messages.service",{"_index":1177,"title":{},"body":{"controllers/MessagesController.html":{},"modules/MessagesModule.html":{}}}],["messages/messages.module",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["messagescontroller",{"_index":1162,"title":{"controllers/MessagesController.html":{}},"body":{"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"coverage.html":{}}}],["messagesmodule",{"_index":107,"title":{"modules/MessagesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MessagesModule.html":{},"modules.html":{},"overview.html":{}}}],["messagesservice",{"_index":1176,"title":{"injectables/MessagesService.html":{}},"body":{"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"coverage.html":{},"overview.html":{}}}],["messageuid",{"_index":1514,"title":{},"body":{"injectables/Web3Service.html":{}}}],["metadata",{"_index":1284,"title":{},"body":{"interfaces/StringIndexedObject.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["method",{"_index":1502,"title":{},"body":{"injectables/Web3Service.html":{}}}],["methods",{"_index":51,"title":{},"body":{"interfaces/AnonKeySet.html":{},"classes/ChannelMembersResolver.html":{},"classes/ChannelResolver.html":{},"controllers/ChannelsController.html":{},"controllers/ContactsController.html":{},"classes/ContactsResolver.html":{},"injectables/ContactsService.html":{},"injectables/CryptographyService.html":{},"classes/DbKeyManager.html":{},"controllers/DevelopmentController.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/IpfsController.html":{},"injectables/IpfsService.html":{},"interfaces/KeyManager.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"controllers/UsersController.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"classes/VaultKeyManager.html":{},"controllers/Web3Controller.html":{},"injectables/Web3Service.html":{},"miscellaneous/variables.html":{}}}],["mined",{"_index":1573,"title":{},"body":{"injectables/Web3Service.html":{}}}],["miscellaneous",{"_index":1747,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mismatch",{"_index":643,"title":{},"body":{"injectables/ContactsService.html":{}}}],["missing",{"_index":1931,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mock",{"_index":1291,"title":{},"body":{"interfaces/StringIndexedObject.html":{},"miscellaneous/variables.html":{}}}],["mockconfigservice",{"_index":1300,"title":{},"body":{"interfaces/StringIndexedObject.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockcontactsservice",{"_index":1664,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mocked",{"_index":1900,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mockedconfigservicegetter",{"_index":1301,"title":{},"body":{"interfaces/StringIndexedObject.html":{},"miscellaneous/variables.html":{}}}],["mockeventsservice",{"_index":1674,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockipfsclient",{"_index":1685,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockipfsconfigvalues",{"_index":1677,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockipfsservice",{"_index":1683,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockmessagesservice",{"_index":1700,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockqueryrunner",{"_index":1277,"title":{},"body":{"interfaces/StringIndexedObject.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockrepository",{"_index":1283,"title":{},"body":{"interfaces/StringIndexedObject.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockusersservice",{"_index":1704,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockweb3",{"_index":1707,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockweb3config",{"_index":193,"title":{},"body":{"interfaces/BroadcastAccountConfig.html":{},"interfaces/EkhoWeb3Config.html":{},"interfaces/Web3Config.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockweb3service",{"_index":1708,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":1783,"title":{},"body":{"index.html":{}}}],["module",{"_index":92,"title":{"modules/AppModule.html":{},"modules/ChannelsModule.html":{},"modules/ContactsModule.html":{},"modules/CryptographyModule.html":{},"modules/DevelopmentModule.html":{},"modules/EventsModule.html":{},"modules/IpfsModule.html":{},"modules/KeyManagerModule.html":{},"modules/MessagesModule.html":{},"modules/UsersModule.html":{},"modules/Web3Module.html":{}},"body":{"modules/AppModule.html":{},"modules/ChannelsModule.html":{},"modules/ContactsModule.html":{},"modules/CryptographyModule.html":{},"modules/DevelopmentModule.html":{},"modules/EventsModule.html":{},"modules/IpfsModule.html":{},"modules/KeyManagerModule.html":{},"modules/MessagesModule.html":{},"modules/UsersModule.html":{},"modules/Web3Module.html":{},"index.html":{},"overview.html":{}}}],["modules",{"_index":94,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/ChannelsModule.html":{},"modules/ContactsModule.html":{},"modules/CryptographyModule.html":{},"modules/DevelopmentModule.html":{},"modules/EventsModule.html":{},"modules/IpfsModule.html":{},"modules/KeyManagerModule.html":{},"modules/MessagesModule.html":{},"modules/UsersModule.html":{},"modules/Web3Module.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["moment",{"_index":1731,"title":{},"body":{"dependencies.html":{}}}],["mutation(returns",{"_index":331,"title":{},"body":{"classes/ChannelResolver.html":{},"classes/ContactsResolver.html":{},"classes/UsersResolver.html":{}}}],["myevent",{"_index":1035,"title":{},"body":{"injectables/EventsService.html":{}}}],["myevent.processed",{"_index":1037,"title":{},"body":{"injectables/EventsService.html":{}}}],["mypriv1time",{"_index":83,"title":{},"body":{"interfaces/AnonKeySet.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"miscellaneous/variables.html":{}}}],["myprivateonetimekey",{"_index":39,"title":{},"body":{"interfaces/AnonKeySet.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{}}}],["myprivatesigningkey",{"_index":40,"title":{},"body":{"interfaces/AnonKeySet.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{}}}],["myprivsigning",{"_index":85,"title":{},"body":{"interfaces/AnonKeySet.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"miscellaneous/variables.html":{}}}],["name",{"_index":209,"title":{},"body":{"classes/Channel.html":{},"classes/ChannelDto.html":{},"classes/ChannelMember.html":{},"classes/ChannelMembersResolver.html":{},"classes/ChannelResolver.html":{},"controllers/ChannelsController.html":{},"classes/Contact.html":{},"classes/ContactDto.html":{},"controllers/ContactsController.html":{},"classes/ContactsResolver.html":{},"injectables/ContactsService.html":{},"classes/CreateChannelDto.html":{},"classes/CreateUserDto.html":{},"injectables/CryptographyService.html":{},"classes/DbKeyManager.html":{},"controllers/DevelopmentController.html":{},"classes/EkhoEvent.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/IpfsController.html":{},"injectables/IpfsService.html":{},"interfaces/KeyManager.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"interfaces/StringIndexedObject.html":{},"interfaces/TestHelper.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"classes/VaultKeyManager.html":{},"controllers/Web3Controller.html":{},"injectables/Web3Service.html":{},"miscellaneous/variables.html":{}}}],["native",{"_index":779,"title":{},"body":{"injectables/CryptographyService.html":{},"dependencies.html":{}}}],["need",{"_index":1227,"title":{},"body":{"injectables/MessagesService.html":{},"injectables/Web3Service.html":{}}}],["nestjs/common",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"controllers/ChannelsController.html":{},"modules/ChannelsModule.html":{},"controllers/ContactsController.html":{},"modules/ContactsModule.html":{},"injectables/ContactsService.html":{},"modules/CryptographyModule.html":{},"injectables/CryptographyService.html":{},"controllers/DevelopmentController.html":{},"modules/DevelopmentModule.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"controllers/IpfsController.html":{},"modules/IpfsModule.html":{},"injectables/IpfsService.html":{},"modules/KeyManagerModule.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/Web3Controller.html":{},"modules/Web3Module.html":{},"injectables/Web3Service.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"modules/IpfsModule.html":{},"modules/Web3Module.html":{},"injectables/Web3Service.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1718,"title":{},"body":{"dependencies.html":{}}}],["nestjs/graphql",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"classes/ChannelMembersResolver.html":{},"classes/ChannelResolver.html":{},"classes/ContactsResolver.html":{},"classes/UsersResolver.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1720,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":231,"title":{},"body":{"classes/ChannelDto.html":{},"classes/ChannelMemberDto.html":{},"classes/ChannelMessageDto.html":{},"controllers/ChannelsController.html":{},"classes/CreateChannelDto.html":{},"classes/CreateChannelMemberDto.html":{},"classes/CreateChannelMessageDto.html":{},"classes/CreateUserDto.html":{},"classes/EkhoEventDto.html":{},"classes/EncodedMessageDto.html":{},"classes/IpfsMessageDto.html":{},"classes/ProcessReport.html":{},"classes/RawMessageDto.html":{},"classes/SendMessageDto.html":{},"classes/UserDto.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":120,"title":{},"body":{"modules/AppModule.html":{},"modules/ChannelsModule.html":{},"modules/ContactsModule.html":{},"injectables/ContactsService.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"modules/KeyManagerModule.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["network1",{"_index":1815,"title":{},"body":{"index.html":{}}}],["network2",{"_index":1818,"title":{},"body":{"index.html":{}}}],["networks",{"_index":1822,"title":{},"body":{"index.html":{}}}],["new",{"_index":607,"title":{},"body":{"injectables/ContactsService.html":{},"classes/CreateUserDto.html":{},"classes/DbKeyManager.html":{},"injectables/EventsService.html":{},"injectables/IpfsService.html":{},"injectables/MessagesService.html":{},"injectables/UsersService.html":{},"injectables/Web3Service.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newevent",{"_index":1057,"title":{},"body":{"injectables/EventsService.html":{}}}],["newevent.channelidentifier",{"_index":1059,"title":{},"body":{"injectables/EventsService.html":{}}}],["newevent.encryptedmessagelink",{"_index":1061,"title":{},"body":{"injectables/EventsService.html":{}}}],["newevent.encryptedmessagelinksignature",{"_index":1063,"title":{},"body":{"injectables/EventsService.html":{}}}],["newevent.eventidentifier",{"_index":1058,"title":{},"body":{"injectables/EventsService.html":{}}}],["newuser",{"_index":1396,"title":{},"body":{"injectables/UsersService.html":{}}}],["newuser.name",{"_index":1397,"title":{},"body":{"injectables/UsersService.html":{}}}],["next",{"_index":1234,"title":{},"body":{"injectables/MessagesService.html":{}}}],["nextchannelidentifier",{"_index":238,"title":{},"body":{"classes/ChannelMember.html":{},"miscellaneous/variables.html":{}}}],["nextdeepestkey",{"_index":1312,"title":{},"body":{"interfaces/StringIndexedObject.html":{},"miscellaneous/variables.html":{}}}],["node",{"_index":1764,"title":{},"body":{"index.html":{}}}],["node.yml",{"_index":1803,"title":{},"body":{"index.html":{}}}],["nonce",{"_index":311,"title":{},"body":{"classes/ChannelMessage.html":{},"classes/ChannelMessageDto.html":{},"injectables/CryptographyService.html":{},"injectables/Web3Service.html":{},"miscellaneous/variables.html":{}}}],["noncebuffer",{"_index":735,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["noncebuffer.writeuint32be(nonce",{"_index":818,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["noncenumber",{"_index":689,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["nonpayable",{"_index":1948,"title":{},"body":{"miscellaneous/variables.html":{}}}],["note",{"_index":1819,"title":{},"body":{"index.html":{}}}],["nothing",{"_index":1241,"title":{},"body":{"injectables/MessagesService.html":{}}}],["notify",{"_index":1944,"title":{},"body":{"miscellaneous/variables.html":{}}}],["notify(string",{"_index":1515,"title":{},"body":{"injectables/Web3Service.html":{}}}],["notify(web3.utils.fromascii(channelid",{"_index":1596,"title":{},"body":{"injectables/Web3Service.html":{}}}],["notifynewmessage",{"_index":1942,"title":{},"body":{"miscellaneous/variables.html":{}}}],["notifynewmessage(messageuid",{"_index":1518,"title":{},"body":{"injectables/Web3Service.html":{}}}],["notifynewmessage(string",{"_index":1513,"title":{},"body":{"injectables/Web3Service.html":{}}}],["now",{"_index":1186,"title":{},"body":{"controllers/MessagesController.html":{},"classes/SendMessageDto.html":{},"injectables/Web3Service.html":{},"index.html":{}}}],["npm",{"_index":1757,"title":{},"body":{"index.html":{}}}],["null",{"_index":1052,"title":{},"body":{"injectables/EventsService.html":{},"injectables/MessagesService.html":{}}}],["nullable",{"_index":450,"title":{},"body":{"classes/Contact.html":{},"classes/EkhoEvent.html":{},"classes/User.html":{}}}],["number",{"_index":157,"title":{},"body":{"classes/Block.html":{},"classes/Channel.html":{},"classes/ChannelDto.html":{},"classes/ChannelMember.html":{},"classes/ChannelMemberDto.html":{},"classes/ChannelMessage.html":{},"classes/ChannelMessageDto.html":{},"controllers/ChannelsController.html":{},"classes/Contact.html":{},"controllers/ContactsController.html":{},"classes/ContactsResolver.html":{},"injectables/ContactsService.html":{},"classes/CreateChannelDto.html":{},"classes/CreateChannelMemberDto.html":{},"classes/CreateChannelMessageDto.html":{},"injectables/CryptographyService.html":{},"classes/DbKeyManager.html":{},"classes/DbKeyPair.html":{},"controllers/DevelopmentController.html":{},"classes/EkhoEvent.html":{},"classes/EkhoEventDto.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"interfaces/KeyManager.html":{},"classes/Message.html":{},"classes/ProcessReport.html":{},"classes/RawMessageDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"injectables/UsersService.html":{},"classes/VaultKeyManager.html":{},"injectables/Web3Service.html":{}}}],["nvm",{"_index":1778,"title":{},"body":{"index.html":{}}}],["obj",{"_index":1309,"title":{},"body":{"interfaces/StringIndexedObject.html":{},"miscellaneous/variables.html":{}}}],["obj[currentkey",{"_index":1315,"title":{},"body":{"interfaces/StringIndexedObject.html":{},"miscellaneous/variables.html":{}}}],["object",{"_index":48,"title":{},"body":{"interfaces/AnonKeySet.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/StringIndexedObject.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"miscellaneous/variables.html":{}}}],["objecttype",{"_index":219,"title":{},"body":{"classes/Channel.html":{},"classes/ChannelMember.html":{},"classes/ChannelMessage.html":{},"classes/Contact.html":{},"classes/Message.html":{},"classes/User.html":{}}}],["on('changed",{"_index":1584,"title":{},"body":{"injectables/Web3Service.html":{}}}],["on('data",{"_index":1558,"title":{},"body":{"injectables/Web3Service.html":{}}}],["once",{"_index":711,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["one",{"_index":61,"title":{},"body":{"interfaces/AnonKeySet.html":{},"controllers/ChannelsController.html":{},"injectables/CryptographyService.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"miscellaneous/variables.html":{}}}],["onetimepair",{"_index":11,"title":{},"body":{"interfaces/AnonKeySet.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"miscellaneous/variables.html":{}}}],["onetomany",{"_index":163,"title":{},"body":{"classes/Block.html":{},"classes/Channel.html":{},"classes/ChannelMember.html":{},"classes/Contact.html":{},"classes/User.html":{}}}],["onetomany(undefined",{"_index":153,"title":{},"body":{"classes/Block.html":{},"classes/ChannelMember.html":{}}}],["onetoone",{"_index":879,"title":{},"body":{"classes/DbKeyPair.html":{}}}],["onetoone(type",{"_index":880,"title":{},"body":{"classes/DbKeyPair.html":{}}}],["onetoone(undefined)@joincolumn",{"_index":877,"title":{},"body":{"classes/DbKeyPair.html":{}}}],["oneusekey",{"_index":448,"title":{},"body":{"classes/Contact.html":{},"classes/ContactHandshakeDto.html":{},"controllers/DevelopmentController.html":{},"miscellaneous/variables.html":{}}}],["oneusekeypair",{"_index":605,"title":{},"body":{"injectables/ContactsService.html":{}}}],["oneusekeypair.privatekey",{"_index":611,"title":{},"body":{"injectables/ContactsService.html":{}}}],["oneusekeypair.publickey",{"_index":613,"title":{},"body":{"injectables/ContactsService.html":{}}}],["onmoduleinit",{"_index":1482,"title":{},"body":{"injectables/Web3Service.html":{}}}],["open",{"_index":1837,"title":{},"body":{"index.html":{}}}],["optional",{"_index":286,"title":{},"body":{"classes/ChannelMembersResolver.html":{},"classes/ChannelResolver.html":{},"controllers/ChannelsController.html":{},"classes/Contact.html":{},"controllers/ContactsController.html":{},"classes/ContactsResolver.html":{},"injectables/ContactsService.html":{},"injectables/CryptographyService.html":{},"classes/DbKeyManager.html":{},"controllers/DevelopmentController.html":{},"classes/EkhoEvent.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/IpfsController.html":{},"injectables/IpfsService.html":{},"interfaces/KeyManager.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"controllers/UsersController.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"classes/VaultKeyManager.html":{},"controllers/Web3Controller.html":{},"injectables/Web3Service.html":{}}}],["options",{"_index":1550,"title":{},"body":{"injectables/Web3Service.html":{}}}],["options.fromblock",{"_index":1553,"title":{},"body":{"injectables/Web3Service.html":{}}}],["order",{"_index":1852,"title":{},"body":{"index.html":{}}}],["orderby('ekhoevent.id",{"_index":1050,"title":{},"body":{"injectables/EventsService.html":{}}}],["orfail",{"_index":580,"title":{},"body":{"injectables/ContactsService.html":{},"injectables/UsersService.html":{}}}],["out",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"modules/ChannelsModule.html":{},"modules/ContactsModule.html":{},"modules/CryptographyModule.html":{},"modules/DevelopmentModule.html":{},"modules/EventsModule.html":{},"modules/IpfsModule.html":{},"modules/KeyManagerModule.html":{},"modules/MessagesModule.html":{},"modules/UsersModule.html":{},"modules/Web3Module.html":{},"overview.html":{}}}],["outputhash",{"_index":806,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["outputhash.tostring('hex",{"_index":809,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["outputs",{"_index":1945,"title":{},"body":{"miscellaneous/variables.html":{}}}],["outputsymmetrickey",{"_index":810,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["outputsymmetrickey.tostring(base64",{"_index":816,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["overview",{"_index":1861,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1715,"title":{"dependencies.html":{}},"body":{}}],["padded",{"_index":736,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["pages",{"_index":1851,"title":{},"body":{"index.html":{}}}],["pair",{"_index":60,"title":{},"body":{"interfaces/AnonKeySet.html":{},"injectables/CryptographyService.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"miscellaneous/variables.html":{}}}],["param",{"_index":44,"title":{},"body":{"interfaces/AnonKeySet.html":{},"controllers/ChannelsController.html":{},"controllers/ContactsController.html":{},"injectables/CryptographyService.html":{},"controllers/DevelopmentController.html":{},"controllers/IpfsController.html":{},"injectables/IpfsService.html":{},"controllers/MessagesController.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/StringIndexedObject.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"controllers/Web3Controller.html":{},"miscellaneous/variables.html":{}}}],["param('channel",{"_index":1469,"title":{},"body":{"controllers/Web3Controller.html":{}}}],["param('contactid",{"_index":527,"title":{},"body":{"controllers/ContactsController.html":{}}}],["param('contactname",{"_index":530,"title":{},"body":{"controllers/ContactsController.html":{},"controllers/DevelopmentController.html":{}}}],["param('content",{"_index":1470,"title":{},"body":{"controllers/Web3Controller.html":{}}}],["param('oneusekey",{"_index":910,"title":{},"body":{"controllers/DevelopmentController.html":{}}}],["param('signature",{"_index":909,"title":{},"body":{"controllers/DevelopmentController.html":{},"controllers/Web3Controller.html":{}}}],["param('signingkey",{"_index":911,"title":{},"body":{"controllers/DevelopmentController.html":{}}}],["param('userid",{"_index":529,"title":{},"body":{"controllers/ContactsController.html":{}}}],["parameters",{"_index":285,"title":{},"body":{"classes/ChannelMembersResolver.html":{},"classes/ChannelResolver.html":{},"controllers/ChannelsController.html":{},"controllers/ContactsController.html":{},"classes/ContactsResolver.html":{},"injectables/ContactsService.html":{},"injectables/CryptographyService.html":{},"classes/DbKeyManager.html":{},"controllers/DevelopmentController.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/IpfsController.html":{},"injectables/IpfsService.html":{},"interfaces/KeyManager.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"interfaces/TestHelper.html":{},"controllers/UsersController.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"classes/VaultKeyManager.html":{},"controllers/Web3Controller.html":{},"injectables/Web3Service.html":{}}}],["part",{"_index":1229,"title":{},"body":{"injectables/MessagesService.html":{}}}],["partial",{"_index":204,"title":{},"body":{"interfaces/BroadcastAccountConfig.html":{},"classes/ContactDto.html":{},"classes/CreateUserDto.html":{},"interfaces/EkhoWeb3Config.html":{},"interfaces/StringIndexedObject.html":{},"classes/UserDto.html":{},"interfaces/Web3Config.html":{},"miscellaneous/variables.html":{}}}],["party",{"_index":727,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["pass",{"_index":409,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["passed",{"_index":730,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["path",{"_index":1071,"title":{},"body":{"controllers/IpfsController.html":{},"injectables/IpfsService.html":{},"interfaces/StringIndexedObject.html":{},"miscellaneous/variables.html":{}}}],["payable",{"_index":1946,"title":{},"body":{"miscellaneous/variables.html":{}}}],["payload",{"_index":1439,"title":{},"body":{"classes/VaultKeyManager.html":{}}}],["peer",{"_index":1753,"title":{},"body":{"index.html":{}}}],["perform",{"_index":742,"title":{},"body":{"injectables/CryptographyService.html":{},"injectables/IpfsService.html":{}}}],["petersburg",{"_index":182,"title":{},"body":{"interfaces/BroadcastAccountConfig.html":{},"interfaces/EkhoWeb3Config.html":{},"interfaces/Web3Config.html":{}}}],["pg",{"_index":1733,"title":{},"body":{"dependencies.html":{}}}],["place",{"_index":1901,"title":{},"body":{"miscellaneous/variables.html":{}}}],["playground",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["points",{"_index":1781,"title":{},"body":{"index.html":{}}}],["polling",{"_index":1547,"title":{},"body":{"injectables/Web3Service.html":{}}}],["port",{"_index":1907,"title":{},"body":{"miscellaneous/variables.html":{}}}],["post",{"_index":355,"title":{},"body":{"controllers/ChannelsController.html":{},"controllers/ContactsController.html":{},"controllers/IpfsController.html":{},"controllers/MessagesController.html":{},"controllers/UsersController.html":{},"controllers/Web3Controller.html":{}}}],["post(':channel",{"_index":1461,"title":{},"body":{"controllers/Web3Controller.html":{}}}],["post('accept",{"_index":499,"title":{},"body":{"controllers/ContactsController.html":{}}}],["post('generate",{"_index":511,"title":{},"body":{"controllers/ContactsController.html":{}}}],["post('message",{"_index":359,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["post(@body",{"_index":1082,"title":{},"body":{"controllers/IpfsController.html":{}}}],["post(channelid",{"_index":1460,"title":{},"body":{"controllers/Web3Controller.html":{}}}],["post(data",{"_index":1072,"title":{},"body":{"controllers/IpfsController.html":{}}}],["postgres",{"_index":1801,"title":{},"body":{"index.html":{}}}],["pragma",{"_index":1510,"title":{},"body":{"injectables/Web3Service.html":{}}}],["prefer",{"_index":1842,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":343,"title":{},"body":{"controllers/ChannelsController.html":{},"controllers/ContactsController.html":{},"controllers/DevelopmentController.html":{},"controllers/EventsController.html":{},"controllers/IpfsController.html":{},"controllers/MessagesController.html":{},"controllers/UsersController.html":{},"controllers/Web3Controller.html":{}}}],["primarygeneratedcolumn",{"_index":160,"title":{},"body":{"classes/Block.html":{},"classes/Channel.html":{},"classes/ChannelMember.html":{},"classes/ChannelMessage.html":{},"classes/Contact.html":{},"classes/DbKeyPair.html":{},"classes/EkhoEvent.html":{},"classes/Message.html":{},"classes/User.html":{}}}],["private",{"_index":84,"title":{},"body":{"interfaces/AnonKeySet.html":{},"injectables/ContactsService.html":{},"injectables/CryptographyService.html":{},"classes/DbKeyManager.html":{},"controllers/DevelopmentController.html":{},"injectables/EventsService.html":{},"injectables/MessagesService.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"injectables/UsersService.html":{},"classes/VaultKeyManager.html":{},"injectables/Web3Service.html":{},"miscellaneous/variables.html":{}}}],["privatekey",{"_index":173,"title":{},"body":{"interfaces/BroadcastAccountConfig.html":{},"classes/CryptographyKeyPairDto.html":{},"injectables/CryptographyService.html":{},"classes/DbKeyManager.html":{},"classes/DbKeyPair.html":{},"interfaces/EkhoWeb3Config.html":{},"interfaces/Web3Config.html":{},"injectables/Web3Service.html":{},"miscellaneous/variables.html":{}}}],["privateoneusekey",{"_index":788,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["privateoneusekey.tostring(base64",{"_index":792,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["privatesigningkey",{"_index":758,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["privatesigningkey.tostring(base64",{"_index":785,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["probably",{"_index":1499,"title":{},"body":{"injectables/Web3Service.html":{}}}],["process",{"_index":405,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["process.env.web3_broadcast_acc_address",{"_index":188,"title":{},"body":{"interfaces/BroadcastAccountConfig.html":{},"interfaces/EkhoWeb3Config.html":{},"interfaces/Web3Config.html":{}}}],["process.env.web3_broadcast_acc_private_key",{"_index":190,"title":{},"body":{"interfaces/BroadcastAccountConfig.html":{},"interfaces/EkhoWeb3Config.html":{},"interfaces/Web3Config.html":{}}}],["process.env.web3_broadcast_acc_public_key",{"_index":189,"title":{},"body":{"interfaces/BroadcastAccountConfig.html":{},"interfaces/EkhoWeb3Config.html":{},"interfaces/Web3Config.html":{}}}],["process.env.web3_chain",{"_index":178,"title":{},"body":{"interfaces/BroadcastAccountConfig.html":{},"interfaces/EkhoWeb3Config.html":{},"interfaces/Web3Config.html":{}}}],["process.env.web3_contract_address",{"_index":186,"title":{},"body":{"interfaces/BroadcastAccountConfig.html":{},"interfaces/EkhoWeb3Config.html":{},"interfaces/Web3Config.html":{}}}],["process.env.web3_hardfork",{"_index":181,"title":{},"body":{"interfaces/BroadcastAccountConfig.html":{},"interfaces/EkhoWeb3Config.html":{},"interfaces/Web3Config.html":{}}}],["process.env.web3_rpc_url",{"_index":184,"title":{},"body":{"interfaces/BroadcastAccountConfig.html":{},"interfaces/EkhoWeb3Config.html":{},"interfaces/Web3Config.html":{}}}],["processallevents",{"_index":352,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["processblockchainevents",{"_index":959,"title":{},"body":{"controllers/EventsController.html":{}}}],["processed",{"_index":920,"title":{},"body":{"classes/EkhoEvent.html":{},"injectables/EventsService.html":{},"classes/ProcessReport.html":{},"miscellaneous/variables.html":{}}}],["processedtotal",{"_index":1252,"title":{},"body":{"classes/ProcessReport.html":{}}}],["processreport",{"_index":392,"title":{"classes/ProcessReport.html":{}},"body":{"controllers/ChannelsController.html":{},"classes/ProcessReport.html":{},"coverage.html":{}}}],["prod",{"_index":1798,"title":{},"body":{"index.html":{}}}],["producing",{"_index":1827,"title":{},"body":{"index.html":{}}}],["production",{"_index":1793,"title":{},"body":{"index.html":{}}}],["project",{"_index":1751,"title":{},"body":{"index.html":{}}}],["promise",{"_index":35,"title":{},"body":{"interfaces/AnonKeySet.html":{},"classes/ChannelMembersResolver.html":{},"classes/ChannelResolver.html":{},"controllers/ChannelsController.html":{},"controllers/ContactsController.html":{},"classes/ContactsResolver.html":{},"injectables/ContactsService.html":{},"classes/DbKeyManager.html":{},"controllers/DevelopmentController.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/IpfsController.html":{},"injectables/IpfsService.html":{},"interfaces/KeyManager.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"controllers/UsersController.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"classes/VaultKeyManager.html":{},"controllers/Web3Controller.html":{},"injectables/Web3Service.html":{},"miscellaneous/variables.html":{}}}],["promise(async",{"_index":1628,"title":{},"body":{"injectables/Web3Service.html":{}}}],["proper",{"_index":1468,"title":{},"body":{"controllers/Web3Controller.html":{}}}],["properties",{"_index":10,"title":{},"body":{"interfaces/AnonKeySet.html":{},"classes/Block.html":{},"interfaces/BroadcastAccountConfig.html":{},"classes/Channel.html":{},"classes/ChannelDto.html":{},"classes/ChannelMember.html":{},"classes/ChannelMemberDto.html":{},"classes/ChannelMessage.html":{},"classes/ChannelMessageDto.html":{},"classes/Contact.html":{},"classes/ContactDto.html":{},"classes/ContactHandshakeDto.html":{},"classes/CreateChannelDto.html":{},"classes/CreateChannelMemberDto.html":{},"classes/CreateChannelMessageDto.html":{},"classes/CreateUserDto.html":{},"classes/CryptographyKeyPairDto.html":{},"classes/DbKeyPair.html":{},"classes/EkhoEvent.html":{},"classes/EkhoEventDto.html":{},"interfaces/EkhoWeb3Config.html":{},"classes/EncodedMessageDto.html":{},"classes/IpfsMessageDto.html":{},"classes/Message.html":{},"classes/ProcessReport.html":{},"classes/RawMessageDto.html":{},"classes/SendMessageDto.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"classes/User.html":{},"classes/UserDto.html":{},"interfaces/Web3Config.html":{},"injectables/Web3Service.html":{},"miscellaneous/variables.html":{}}}],["property",{"_index":73,"title":{},"body":{"interfaces/AnonKeySet.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/StringIndexedObject.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"miscellaneous/variables.html":{}}}],["protocol",{"_index":1909,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provide",{"_index":1903,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provided",{"_index":1849,"title":{},"body":{"index.html":{}}}],["providers",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"modules/ChannelsModule.html":{},"modules/ContactsModule.html":{},"modules/CryptographyModule.html":{},"modules/DevelopmentModule.html":{},"modules/EventsModule.html":{},"modules/IpfsModule.html":{},"modules/KeyManagerModule.html":{},"modules/MessagesModule.html":{},"modules/UsersModule.html":{},"modules/Web3Module.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["pubkey",{"_index":869,"title":{},"body":{"classes/DbKeyManager.html":{},"classes/VaultKeyManager.html":{}}}],["public",{"_index":81,"title":{},"body":{"interfaces/AnonKeySet.html":{},"classes/ChannelMembersResolver.html":{},"classes/ChannelResolver.html":{},"classes/ContactsResolver.html":{},"injectables/CryptographyService.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"classes/UsersResolver.html":{},"injectables/Web3Service.html":{},"miscellaneous/variables.html":{}}}],["publickey",{"_index":174,"title":{},"body":{"interfaces/BroadcastAccountConfig.html":{},"classes/CryptographyKeyPairDto.html":{},"injectables/CryptographyService.html":{},"classes/DbKeyManager.html":{},"classes/DbKeyPair.html":{},"interfaces/EkhoWeb3Config.html":{},"interfaces/KeyManager.html":{},"classes/VaultKeyManager.html":{},"interfaces/Web3Config.html":{},"injectables/Web3Service.html":{},"miscellaneous/variables.html":{}}}],["publiconeusekey",{"_index":786,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["publiconeusekey.tostring(base64",{"_index":791,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["publicsigningkey",{"_index":624,"title":{},"body":{"injectables/ContactsService.html":{},"injectables/CryptographyService.html":{}}}],["publicsigningkey.tostring(base64",{"_index":784,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["put",{"_index":966,"title":{},"body":{"controllers/EventsController.html":{}}}],["query",{"_index":377,"title":{},"body":{"controllers/ChannelsController.html":{},"controllers/EventsController.html":{},"controllers/UsersController.html":{},"classes/UsersResolver.html":{}}}],["query('contactid",{"_index":421,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["query('userid",{"_index":420,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["query(returns",{"_index":334,"title":{},"body":{"classes/ChannelResolver.html":{},"classes/UsersResolver.html":{}}}],["query(undefined",{"_index":1366,"title":{},"body":{"classes/UsersResolver.html":{}}}],["queryrunner",{"_index":850,"title":{},"body":{"classes/DbKeyManager.html":{},"interfaces/KeyManager.html":{},"injectables/UsersService.html":{}}}],["queryrunner.committransaction",{"_index":1405,"title":{},"body":{"injectables/UsersService.html":{}}}],["queryrunner.manager.save('db_key_pair",{"_index":864,"title":{},"body":{"classes/DbKeyManager.html":{}}}],["queryrunner.manager.save(newuser",{"_index":1403,"title":{},"body":{"injectables/UsersService.html":{}}}],["queryrunner.release",{"_index":1412,"title":{},"body":{"injectables/UsersService.html":{}}}],["queryrunner.rollbacktransaction",{"_index":1410,"title":{},"body":{"injectables/UsersService.html":{}}}],["queryrunner.starttransaction",{"_index":1400,"title":{},"body":{"injectables/UsersService.html":{}}}],["random",{"_index":731,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["raw",{"_index":1496,"title":{},"body":{"injectables/Web3Service.html":{}}}],["rawmessagedto",{"_index":358,"title":{"classes/RawMessageDto.html":{}},"body":{"controllers/ChannelsController.html":{},"classes/RawMessageDto.html":{},"coverage.html":{}}}],["readonly",{"_index":302,"title":{},"body":{"classes/ChannelMembersResolver.html":{},"classes/ChannelResolver.html":{},"controllers/ChannelsController.html":{},"controllers/ContactsController.html":{},"classes/ContactsResolver.html":{},"injectables/ContactsService.html":{},"classes/DbKeyManager.html":{},"controllers/DevelopmentController.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/IpfsController.html":{},"injectables/IpfsService.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"controllers/UsersController.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"classes/VaultKeyManager.html":{},"controllers/Web3Controller.html":{},"injectables/Web3Service.html":{}}}],["readpublicsigningkey",{"_index":843,"title":{},"body":{"classes/DbKeyManager.html":{},"interfaces/KeyManager.html":{},"classes/VaultKeyManager.html":{}}}],["readpublicsigningkey(id",{"_index":852,"title":{},"body":{"classes/DbKeyManager.html":{},"interfaces/KeyManager.html":{},"classes/VaultKeyManager.html":{}}}],["rebuild",{"_index":1808,"title":{},"body":{"index.html":{}}}],["received",{"_index":382,"title":{},"body":{"controllers/ChannelsController.html":{},"injectables/MessagesService.html":{},"classes/ProcessReport.html":{}}}],["receivedmessageevents",{"_index":1253,"title":{},"body":{"classes/ProcessReport.html":{}}}],["receivedmessages",{"_index":1254,"title":{},"body":{"classes/ProcessReport.html":{}}}],["receivehandshake",{"_index":564,"title":{},"body":{"injectables/ContactsService.html":{}}}],["receivehandshake(contact",{"_index":592,"title":{},"body":{"injectables/ContactsService.html":{}}}],["reflect",{"_index":1735,"title":{},"body":{"dependencies.html":{}}}],["refresh",{"_index":1483,"title":{},"body":{"injectables/Web3Service.html":{}}}],["reject",{"_index":1630,"title":{},"body":{"injectables/Web3Service.html":{}}}],["reject(`${err",{"_index":1632,"title":{},"body":{"injectables/Web3Service.html":{}}}],["relations",{"_index":1286,"title":{},"body":{"interfaces/StringIndexedObject.html":{},"miscellaneous/variables.html":{}}}],["release",{"_index":1282,"title":{},"body":{"interfaces/StringIndexedObject.html":{},"miscellaneous/variables.html":{}}}],["reply",{"_index":505,"title":{},"body":{"controllers/ContactsController.html":{}}}],["replyhandshake",{"_index":504,"title":{},"body":{"controllers/ContactsController.html":{},"injectables/ContactsService.html":{},"miscellaneous/variables.html":{}}}],["replyhandshake(userid",{"_index":594,"title":{},"body":{"injectables/ContactsService.html":{}}}],["report/index.html",{"_index":1839,"title":{},"body":{"index.html":{}}}],["reports",{"_index":1836,"title":{},"body":{"index.html":{}}}],["repository",{"_index":566,"title":{},"body":{"injectables/ContactsService.html":{},"classes/DbKeyManager.html":{},"injectables/EventsService.html":{},"injectables/MessagesService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["required",{"_index":370,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["requirements",{"_index":1763,"title":{},"body":{"index.html":{}}}],["reset",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"modules/ChannelsModule.html":{},"modules/ContactsModule.html":{},"modules/CryptographyModule.html":{},"modules/DevelopmentModule.html":{},"modules/EventsModule.html":{},"modules/IpfsModule.html":{},"modules/KeyManagerModule.html":{},"modules/MessagesModule.html":{},"modules/UsersModule.html":{},"modules/Web3Module.html":{},"overview.html":{}}}],["resolve",{"_index":1629,"title":{},"body":{"injectables/Web3Service.html":{}}}],["resolve(txcount",{"_index":1633,"title":{},"body":{"injectables/Web3Service.html":{}}}],["resolve(txhash",{"_index":1636,"title":{},"body":{"injectables/Web3Service.html":{}}}],["resolver",{"_index":295,"title":{},"body":{"classes/ChannelMembersResolver.html":{},"classes/ChannelResolver.html":{},"classes/ContactsResolver.html":{},"classes/UsersResolver.html":{}}}],["resolver(of",{"_index":300,"title":{},"body":{"classes/ChannelMembersResolver.html":{},"classes/ChannelResolver.html":{},"classes/ContactsResolver.html":{},"classes/UsersResolver.html":{}}}],["resolvers/channel.resolver",{"_index":442,"title":{},"body":{"modules/ChannelsModule.html":{}}}],["resolvers/channelmembers.resolver",{"_index":443,"title":{},"body":{"modules/ChannelsModule.html":{}}}],["resolvers/contacts.resolver",{"_index":542,"title":{},"body":{"modules/ContactsModule.html":{}}}],["resolvers/users.resolver",{"_index":1358,"title":{},"body":{"modules/UsersModule.html":{}}}],["responded",{"_index":1455,"title":{},"body":{"classes/VaultKeyManager.html":{}}}],["response",{"_index":1430,"title":{},"body":{"classes/VaultKeyManager.html":{}}}],["response.data.data.keys['1'].public_key",{"_index":1446,"title":{},"body":{"classes/VaultKeyManager.html":{}}}],["response.data.data.signature",{"_index":1450,"title":{},"body":{"classes/VaultKeyManager.html":{}}}],["response.status",{"_index":1453,"title":{},"body":{"classes/VaultKeyManager.html":{}}}],["rest",{"_index":1313,"title":{},"body":{"interfaces/StringIndexedObject.html":{},"miscellaneous/variables.html":{}}}],["result",{"_index":89,"title":{},"body":{"interfaces/AnonKeySet.html":{},"modules/AppModule.html":{},"classes/Block.html":{},"interfaces/BroadcastAccountConfig.html":{},"classes/Channel.html":{},"classes/ChannelDto.html":{},"classes/ChannelMember.html":{},"classes/ChannelMemberDto.html":{},"classes/ChannelMembersResolver.html":{},"classes/ChannelMessage.html":{},"classes/ChannelMessageDto.html":{},"classes/ChannelResolver.html":{},"controllers/ChannelsController.html":{},"modules/ChannelsModule.html":{},"classes/Contact.html":{},"classes/ContactDto.html":{},"classes/ContactHandshakeDto.html":{},"controllers/ContactsController.html":{},"modules/ContactsModule.html":{},"classes/ContactsResolver.html":{},"injectables/ContactsService.html":{},"classes/CreateChannelDto.html":{},"classes/CreateChannelMemberDto.html":{},"classes/CreateChannelMessageDto.html":{},"classes/CreateUserDto.html":{},"classes/CryptographyKeyPairDto.html":{},"modules/CryptographyModule.html":{},"injectables/CryptographyService.html":{},"classes/DbKeyManager.html":{},"classes/DbKeyPair.html":{},"controllers/DevelopmentController.html":{},"modules/DevelopmentModule.html":{},"classes/EkhoEvent.html":{},"classes/EkhoEventDto.html":{},"interfaces/EkhoWeb3Config.html":{},"classes/EncodedMessageDto.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"controllers/IpfsController.html":{},"classes/IpfsMessageDto.html":{},"modules/IpfsModule.html":{},"injectables/IpfsService.html":{},"interfaces/KeyManager.html":{},"modules/KeyManagerModule.html":{},"classes/Message.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/ProcessReport.html":{},"classes/RawMessageDto.html":{},"classes/SendMessageDto.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/StringIndexedObject.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"classes/VaultKeyManager.html":{},"interfaces/Web3Config.html":{},"controllers/Web3Controller.html":{},"modules/Web3Module.html":{},"injectables/Web3Service.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["result.path",{"_index":1134,"title":{},"body":{"injectables/IpfsService.html":{}}}],["results",{"_index":91,"title":{},"body":{"interfaces/AnonKeySet.html":{},"modules/AppModule.html":{},"classes/Block.html":{},"interfaces/BroadcastAccountConfig.html":{},"classes/Channel.html":{},"classes/ChannelDto.html":{},"classes/ChannelMember.html":{},"classes/ChannelMemberDto.html":{},"classes/ChannelMembersResolver.html":{},"classes/ChannelMessage.html":{},"classes/ChannelMessageDto.html":{},"classes/ChannelResolver.html":{},"controllers/ChannelsController.html":{},"modules/ChannelsModule.html":{},"classes/Contact.html":{},"classes/ContactDto.html":{},"classes/ContactHandshakeDto.html":{},"controllers/ContactsController.html":{},"modules/ContactsModule.html":{},"classes/ContactsResolver.html":{},"injectables/ContactsService.html":{},"classes/CreateChannelDto.html":{},"classes/CreateChannelMemberDto.html":{},"classes/CreateChannelMessageDto.html":{},"classes/CreateUserDto.html":{},"classes/CryptographyKeyPairDto.html":{},"modules/CryptographyModule.html":{},"injectables/CryptographyService.html":{},"classes/DbKeyManager.html":{},"classes/DbKeyPair.html":{},"controllers/DevelopmentController.html":{},"modules/DevelopmentModule.html":{},"classes/EkhoEvent.html":{},"classes/EkhoEventDto.html":{},"interfaces/EkhoWeb3Config.html":{},"classes/EncodedMessageDto.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"controllers/IpfsController.html":{},"classes/IpfsMessageDto.html":{},"modules/IpfsModule.html":{},"injectables/IpfsService.html":{},"interfaces/KeyManager.html":{},"modules/KeyManagerModule.html":{},"classes/Message.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/ProcessReport.html":{},"classes/RawMessageDto.html":{},"classes/SendMessageDto.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/StringIndexedObject.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"classes/VaultKeyManager.html":{},"interfaces/Web3Config.html":{},"controllers/Web3Controller.html":{},"modules/Web3Module.html":{},"injectables/Web3Service.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["rethink",{"_index":1228,"title":{},"body":{"injectables/MessagesService.html":{}}}],["retrieve",{"_index":1097,"title":{},"body":{"injectables/IpfsService.html":{},"miscellaneous/variables.html":{}}}],["retrieve(ipfspath",{"_index":1101,"title":{},"body":{"injectables/IpfsService.html":{}}}],["retrieved",{"_index":1120,"title":{},"body":{"injectables/IpfsService.html":{},"injectables/Web3Service.html":{}}}],["retrieves",{"_index":374,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["return",{"_index":69,"title":{},"body":{"interfaces/AnonKeySet.html":{},"interfaces/BroadcastAccountConfig.html":{},"classes/ChannelMembersResolver.html":{},"classes/ChannelResolver.html":{},"controllers/ChannelsController.html":{},"controllers/ContactsController.html":{},"classes/ContactsResolver.html":{},"injectables/ContactsService.html":{},"injectables/CryptographyService.html":{},"classes/DbKeyManager.html":{},"controllers/DevelopmentController.html":{},"interfaces/EkhoWeb3Config.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/IpfsController.html":{},"injectables/IpfsService.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/StringIndexedObject.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"controllers/UsersController.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"classes/VaultKeyManager.html":{},"interfaces/Web3Config.html":{},"controllers/Web3Controller.html":{},"injectables/Web3Service.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":47,"title":{},"body":{"interfaces/AnonKeySet.html":{},"classes/ChannelMembersResolver.html":{},"classes/ChannelResolver.html":{},"controllers/ChannelsController.html":{},"controllers/ContactsController.html":{},"classes/ContactsResolver.html":{},"injectables/ContactsService.html":{},"injectables/CryptographyService.html":{},"classes/DbKeyManager.html":{},"controllers/DevelopmentController.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/IpfsController.html":{},"injectables/IpfsService.html":{},"interfaces/KeyManager.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/StringIndexedObject.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"controllers/UsersController.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"classes/VaultKeyManager.html":{},"controllers/Web3Controller.html":{},"injectables/Web3Service.html":{},"miscellaneous/variables.html":{}}}],["retval",{"_index":802,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["reused",{"_index":712,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["reviewing",{"_index":1855,"title":{},"body":{"index.html":{}}}],["rimraf",{"_index":1737,"title":{},"body":{"dependencies.html":{}}}],["rollbacktransaction",{"_index":1281,"title":{},"body":{"interfaces/StringIndexedObject.html":{},"miscellaneous/variables.html":{}}}],["root",{"_index":297,"title":{},"body":{"classes/ChannelMembersResolver.html":{},"classes/ChannelResolver.html":{},"classes/ContactsResolver.html":{}}}],["ropsten",{"_index":179,"title":{},"body":{"interfaces/BroadcastAccountConfig.html":{},"interfaces/EkhoWeb3Config.html":{},"interfaces/Web3Config.html":{},"injectables/Web3Service.html":{}}}],["rpcurl",{"_index":183,"title":{},"body":{"interfaces/BroadcastAccountConfig.html":{},"interfaces/EkhoWeb3Config.html":{},"interfaces/Web3Config.html":{},"injectables/Web3Service.html":{},"miscellaneous/variables.html":{}}}],["run",{"_index":1789,"title":{},"body":{"index.html":{}}}],["running",{"_index":1788,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1739,"title":{},"body":{"dependencies.html":{}}}],["save",{"_index":996,"title":{},"body":{"injectables/EventsService.html":{},"injectables/MessagesService.html":{},"interfaces/StringIndexedObject.html":{},"miscellaneous/variables.html":{}}}],["save(event",{"_index":1013,"title":{},"body":{"injectables/EventsService.html":{}}}],["saveblockinfo",{"_index":997,"title":{},"body":{"injectables/EventsService.html":{},"miscellaneous/variables.html":{}}}],["saveblockinfo(block",{"_index":1016,"title":{},"body":{"injectables/EventsService.html":{}}}],["saves",{"_index":1578,"title":{},"body":{"injectables/Web3Service.html":{}}}],["saving",{"_index":1136,"title":{},"body":{"injectables/IpfsService.html":{},"injectables/Web3Service.html":{}}}],["schema.gql",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["secret",{"_index":27,"title":{},"body":{"interfaces/AnonKeySet.html":{},"injectables/CryptographyService.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"miscellaneous/variables.html":{}}}],["section",{"_index":398,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["select",{"_index":616,"title":{},"body":{"injectables/ContactsService.html":{},"classes/DbKeyManager.html":{},"injectables/UsersService.html":{}}}],["select('max(\"blocknumber",{"_index":1029,"title":{},"body":{"injectables/EventsService.html":{}}}],["select('min(ekhoevent.id",{"_index":1044,"title":{},"body":{"injectables/EventsService.html":{}}}],["sendmessage",{"_index":1166,"title":{},"body":{"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"miscellaneous/variables.html":{}}}],["sendmessage(@body",{"_index":1179,"title":{},"body":{"controllers/MessagesController.html":{}}}],["sendmessage(from",{"_index":1213,"title":{},"body":{"injectables/MessagesService.html":{}}}],["sendmessage(message",{"_index":1171,"title":{},"body":{"controllers/MessagesController.html":{}}}],["sendmessagedto",{"_index":1172,"title":{"classes/SendMessageDto.html":{}},"body":{"controllers/MessagesController.html":{},"classes/SendMessageDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sendsignertransaction",{"_index":1484,"title":{},"body":{"injectables/Web3Service.html":{},"miscellaneous/variables.html":{}}}],["sendsignertransaction(raw",{"_index":1494,"title":{},"body":{"injectables/Web3Service.html":{}}}],["sent",{"_index":381,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["separate",{"_index":1828,"title":{},"body":{"index.html":{}}}],["seperated",{"_index":1299,"title":{},"body":{"interfaces/StringIndexedObject.html":{}}}],["sequence",{"_index":1189,"title":{},"body":{"controllers/MessagesController.html":{}}}],["serializedtx",{"_index":1617,"title":{},"body":{"injectables/Web3Service.html":{}}}],["serializedtx.tostring('hex",{"_index":1620,"title":{},"body":{"injectables/Web3Service.html":{}}}],["server",{"_index":1454,"title":{},"body":{"classes/VaultKeyManager.html":{},"dependencies.html":{}}}],["service",{"_index":45,"title":{},"body":{"interfaces/AnonKeySet.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"miscellaneous/variables.html":{}}}],["service.generateecdhsharedsecret(yourpublic1time",{"_index":86,"title":{},"body":{"interfaces/AnonKeySet.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"miscellaneous/variables.html":{}}}],["service.generateoneusekeypair",{"_index":68,"title":{},"body":{"interfaces/AnonKeySet.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"miscellaneous/variables.html":{}}}],["service.generatesignature(secret",{"_index":87,"title":{},"body":{"interfaces/AnonKeySet.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"miscellaneous/variables.html":{}}}],["service.generatesigningkeypair",{"_index":67,"title":{},"body":{"interfaces/AnonKeySet.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"miscellaneous/variables.html":{}}}],["service.ts",{"_index":1663,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["sha",{"_index":755,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["sha256",{"_index":752,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["shared",{"_index":75,"title":{},"body":{"interfaces/AnonKeySet.html":{},"injectables/CryptographyService.html":{},"injectables/IpfsService.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"miscellaneous/variables.html":{}}}],["sharedsecret",{"_index":24,"title":{},"body":{"interfaces/AnonKeySet.html":{},"injectables/CryptographyService.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"miscellaneous/variables.html":{}}}],["sharedsecret.tostring(base64",{"_index":796,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["sign",{"_index":88,"title":{},"body":{"interfaces/AnonKeySet.html":{},"injectables/CryptographyService.html":{},"classes/DbKeyManager.html":{},"interfaces/KeyManager.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"injectables/UsersService.html":{},"classes/VaultKeyManager.html":{},"miscellaneous/variables.html":{}}}],["sign(id",{"_index":854,"title":{},"body":{"classes/DbKeyManager.html":{},"interfaces/KeyManager.html":{},"injectables/UsersService.html":{},"classes/VaultKeyManager.html":{}}}],["sign(secret",{"_index":41,"title":{},"body":{"interfaces/AnonKeySet.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{}}}],["signature",{"_index":28,"title":{},"body":{"interfaces/AnonKeySet.html":{},"classes/Contact.html":{},"classes/ContactHandshakeDto.html":{},"injectables/ContactsService.html":{},"injectables/CryptographyService.html":{},"classes/DbKeyManager.html":{},"controllers/DevelopmentController.html":{},"classes/EkhoEvent.html":{},"classes/EkhoEventDto.html":{},"classes/EncodedMessageDto.html":{},"interfaces/KeyManager.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"classes/VaultKeyManager.html":{},"controllers/Web3Controller.html":{},"injectables/Web3Service.html":{},"miscellaneous/variables.html":{}}}],["signature.tostring(base64",{"_index":801,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["signature/:signature/:oneusekey/:signingkey",{"_index":895,"title":{},"body":{"controllers/DevelopmentController.html":{}}}],["signed",{"_index":761,"title":{},"body":{"injectables/CryptographyService.html":{},"miscellaneous/variables.html":{}}}],["signedsharedsecret",{"_index":26,"title":{"interfaces/SignedSharedSecret.html":{}},"body":{"interfaces/AnonKeySet.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"coverage.html":{}}}],["signing",{"_index":59,"title":{},"body":{"interfaces/AnonKeySet.html":{},"injectables/CryptographyService.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"classes/VaultKeyManager.html":{},"miscellaneous/variables.html":{}}}],["signingkey",{"_index":42,"title":{},"body":{"interfaces/AnonKeySet.html":{},"classes/Contact.html":{},"classes/ContactHandshakeDto.html":{},"controllers/DevelopmentController.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"miscellaneous/variables.html":{}}}],["signingpair",{"_index":12,"title":{},"body":{"interfaces/AnonKeySet.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"miscellaneous/variables.html":{}}}],["simplicity",{"_index":1269,"title":{},"body":{"classes/SendMessageDto.html":{}}}],["simply",{"_index":1240,"title":{},"body":{"injectables/MessagesService.html":{},"index.html":{}}}],["simulating",{"_index":1188,"title":{},"body":{"controllers/MessagesController.html":{}}}],["simultaneosly",{"_index":1826,"title":{},"body":{"index.html":{}}}],["single",{"_index":1799,"title":{},"body":{"index.html":{}}}],["size",{"_index":766,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["skibbereen",{"_index":196,"title":{},"body":{"interfaces/BroadcastAccountConfig.html":{},"interfaces/EkhoWeb3Config.html":{},"interfaces/Web3Config.html":{},"miscellaneous/variables.html":{}}}],["sodium",{"_index":778,"title":{},"body":{"injectables/CryptographyService.html":{},"dependencies.html":{}}}],["sodiumnative",{"_index":777,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["sodiumnative.crypto_hash_sha256(outputhash",{"_index":808,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["sodiumnative.crypto_kdf_derive_from_key(outputsymmetrickey",{"_index":814,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["sodiumnative.crypto_scalarmult(sharedsecret",{"_index":793,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["sodiumnative.crypto_scalarmult_base(publiconeusekey",{"_index":790,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["sodiumnative.crypto_sign_detached(signature",{"_index":798,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["sodiumnative.crypto_sign_keypair(publicsigningkey",{"_index":783,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["sodiumnative.crypto_sign_verify_detached",{"_index":803,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["sodiumnative.crypto_stream_chacha20_xor(decrypteddata",{"_index":827,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["sodiumnative.crypto_stream_chacha20_xor(encrypteddata",{"_index":824,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["sodiumnative.randombytes_buf(buff",{"_index":836,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["sodiumnative.randombytes_buf(retval",{"_index":831,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["sodiumnative.randombytes_random",{"_index":829,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["sodiumnative.sodium_malloc(size",{"_index":833,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["sodiumnative.sodium_memzero(buff",{"_index":834,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["solidity",{"_index":1511,"title":{},"body":{"injectables/Web3Service.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/AnonKeySet.html":{},"modules/AppModule.html":{},"classes/Block.html":{},"interfaces/BroadcastAccountConfig.html":{},"classes/Channel.html":{},"classes/ChannelDto.html":{},"classes/ChannelMember.html":{},"classes/ChannelMemberDto.html":{},"classes/ChannelMembersResolver.html":{},"classes/ChannelMessage.html":{},"classes/ChannelMessageDto.html":{},"classes/ChannelResolver.html":{},"controllers/ChannelsController.html":{},"modules/ChannelsModule.html":{},"classes/Contact.html":{},"classes/ContactDto.html":{},"classes/ContactHandshakeDto.html":{},"controllers/ContactsController.html":{},"modules/ContactsModule.html":{},"classes/ContactsResolver.html":{},"injectables/ContactsService.html":{},"classes/CreateChannelDto.html":{},"classes/CreateChannelMemberDto.html":{},"classes/CreateChannelMessageDto.html":{},"classes/CreateUserDto.html":{},"classes/CryptographyKeyPairDto.html":{},"modules/CryptographyModule.html":{},"injectables/CryptographyService.html":{},"classes/DbKeyManager.html":{},"classes/DbKeyPair.html":{},"controllers/DevelopmentController.html":{},"modules/DevelopmentModule.html":{},"classes/EkhoEvent.html":{},"classes/EkhoEventDto.html":{},"interfaces/EkhoWeb3Config.html":{},"classes/EncodedMessageDto.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"controllers/IpfsController.html":{},"classes/IpfsMessageDto.html":{},"modules/IpfsModule.html":{},"injectables/IpfsService.html":{},"interfaces/KeyManager.html":{},"modules/KeyManagerModule.html":{},"classes/Message.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/ProcessReport.html":{},"classes/RawMessageDto.html":{},"classes/SendMessageDto.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/StringIndexedObject.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"classes/VaultKeyManager.html":{},"interfaces/Web3Config.html":{},"controllers/Web3Controller.html":{},"modules/Web3Module.html":{},"injectables/Web3Service.html":{}}}],["specified",{"_index":424,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["src/.../cryptography.service.ts",{"_index":1864,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../cryptography.test",{"_index":1867,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../faker.ts",{"_index":1863,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../ipfs.client.factory.ts",{"_index":1868,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../ipfs.configuration.ts",{"_index":1871,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../key",{"_index":1869,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1749,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../mock",{"_index":1870,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../web3.configuration.ts",{"_index":1866,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../web3.constants.ts",{"_index":1872,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../web3.factory.ts",{"_index":1873,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["src/channels/channels.controller.ts",{"_index":342,"title":{},"body":{"controllers/ChannelsController.html":{},"coverage.html":{}}}],["src/channels/channels.controller.ts:20",{"_index":356,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["src/channels/channels.controller.ts:26",{"_index":360,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["src/channels/channels.controller.ts:32",{"_index":385,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["src/channels/channels.controller.ts:41",{"_index":383,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["src/channels/channels.controller.ts:48",{"_index":364,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["src/channels/channels.controller.ts:55",{"_index":367,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["src/channels/channels.controller.ts:61",{"_index":362,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["src/channels/channels.controller.ts:74",{"_index":373,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["src/channels/channels.module.ts",{"_index":436,"title":{},"body":{"modules/ChannelsModule.html":{}}}],["src/channels/channels.service.ts",{"_index":1642,"title":{},"body":{"coverage.html":{}}}],["src/channels/dto/channel.dto.ts",{"_index":225,"title":{},"body":{"classes/ChannelDto.html":{},"coverage.html":{}}}],["src/channels/dto/channel.dto.ts:12",{"_index":229,"title":{},"body":{"classes/ChannelDto.html":{}}}],["src/channels/dto/channel.dto.ts:16",{"_index":227,"title":{},"body":{"classes/ChannelDto.html":{}}}],["src/channels/dto/channel.dto.ts:8",{"_index":228,"title":{},"body":{"classes/ChannelDto.html":{}}}],["src/channels/dto/channelmember.dto.ts",{"_index":264,"title":{},"body":{"classes/ChannelMemberDto.html":{},"coverage.html":{}}}],["src/channels/dto/channelmember.dto.ts:11",{"_index":271,"title":{},"body":{"classes/ChannelMemberDto.html":{}}}],["src/channels/dto/channelmember.dto.ts:15",{"_index":273,"title":{},"body":{"classes/ChannelMemberDto.html":{}}}],["src/channels/dto/channelmember.dto.ts:18",{"_index":267,"title":{},"body":{"classes/ChannelMemberDto.html":{}}}],["src/channels/dto/channelmember.dto.ts:22",{"_index":274,"title":{},"body":{"classes/ChannelMemberDto.html":{}}}],["src/channels/dto/channelmember.dto.ts:26",{"_index":269,"title":{},"body":{"classes/ChannelMemberDto.html":{}}}],["src/channels/dto/channelmessage.dto.ts",{"_index":320,"title":{},"body":{"classes/ChannelMessageDto.html":{},"coverage.html":{}}}],["src/channels/dto/channelmessage.dto.ts:11",{"_index":325,"title":{},"body":{"classes/ChannelMessageDto.html":{}}}],["src/channels/dto/channelmessage.dto.ts:5",{"_index":324,"title":{},"body":{"classes/ChannelMessageDto.html":{}}}],["src/channels/dto/channelmessage.dto.ts:8",{"_index":322,"title":{},"body":{"classes/ChannelMessageDto.html":{}}}],["src/channels/dto/create",{"_index":644,"title":{},"body":{"classes/CreateChannelDto.html":{},"classes/CreateChannelMemberDto.html":{},"classes/CreateChannelMessageDto.html":{},"coverage.html":{}}}],["src/channels/dto/encodedmessage.dto.ts",{"_index":950,"title":{},"body":{"classes/EncodedMessageDto.html":{},"coverage.html":{}}}],["src/channels/dto/encodedmessage.dto.ts:11",{"_index":953,"title":{},"body":{"classes/EncodedMessageDto.html":{}}}],["src/channels/dto/encodedmessage.dto.ts:5",{"_index":951,"title":{},"body":{"classes/EncodedMessageDto.html":{}}}],["src/channels/dto/encodedmessage.dto.ts:8",{"_index":952,"title":{},"body":{"classes/EncodedMessageDto.html":{}}}],["src/channels/dto/processreport.dto.ts",{"_index":1251,"title":{},"body":{"classes/ProcessReport.html":{},"coverage.html":{}}}],["src/channels/dto/processreport.dto.ts:12",{"_index":1256,"title":{},"body":{"classes/ProcessReport.html":{}}}],["src/channels/dto/processreport.dto.ts:6",{"_index":1255,"title":{},"body":{"classes/ProcessReport.html":{}}}],["src/channels/dto/processreport.dto.ts:9",{"_index":1257,"title":{},"body":{"classes/ProcessReport.html":{}}}],["src/channels/dto/rawmessage.dto.ts",{"_index":1259,"title":{},"body":{"classes/RawMessageDto.html":{},"coverage.html":{}}}],["src/channels/dto/rawmessage.dto.ts:11",{"_index":1260,"title":{},"body":{"classes/RawMessageDto.html":{}}}],["src/channels/dto/rawmessage.dto.ts:5",{"_index":1261,"title":{},"body":{"classes/RawMessageDto.html":{}}}],["src/channels/dto/rawmessage.dto.ts:8",{"_index":1262,"title":{},"body":{"classes/RawMessageDto.html":{}}}],["src/channels/entities/channelmembers.entity.ts",{"_index":234,"title":{},"body":{"classes/ChannelMember.html":{},"coverage.html":{}}}],["src/channels/entities/channelmembers.entity.ts:12",{"_index":248,"title":{},"body":{"classes/ChannelMember.html":{}}}],["src/channels/entities/channelmembers.entity.ts:20",{"_index":243,"title":{},"body":{"classes/ChannelMember.html":{}}}],["src/channels/entities/channelmembers.entity.ts:28",{"_index":252,"title":{},"body":{"classes/ChannelMember.html":{}}}],["src/channels/entities/channelmembers.entity.ts:36",{"_index":247,"title":{},"body":{"classes/ChannelMember.html":{}}}],["src/channels/entities/channelmembers.entity.ts:43",{"_index":245,"title":{},"body":{"classes/ChannelMember.html":{}}}],["src/channels/entities/channelmembers.entity.ts:47",{"_index":249,"title":{},"body":{"classes/ChannelMember.html":{}}}],["src/channels/entities/channelmembers.entity.ts:51",{"_index":250,"title":{},"body":{"classes/ChannelMember.html":{}}}],["src/channels/entities/channelmessages.entity.ts",{"_index":309,"title":{},"body":{"classes/ChannelMessage.html":{},"coverage.html":{}}}],["src/channels/entities/channelmessages.entity.ts:10",{"_index":313,"title":{},"body":{"classes/ChannelMessage.html":{}}}],["src/channels/entities/channelmessages.entity.ts:17",{"_index":312,"title":{},"body":{"classes/ChannelMessage.html":{}}}],["src/channels/entities/channelmessages.entity.ts:21",{"_index":314,"title":{},"body":{"classes/ChannelMessage.html":{}}}],["src/channels/entities/channelmessages.entity.ts:24",{"_index":317,"title":{},"body":{"classes/ChannelMessage.html":{}}}],["src/channels/entities/channels.entity.ts",{"_index":206,"title":{},"body":{"classes/Channel.html":{},"coverage.html":{}}}],["src/channels/entities/channels.entity.ts:10",{"_index":216,"title":{},"body":{"classes/Channel.html":{}}}],["src/channels/entities/channels.entity.ts:14",{"_index":217,"title":{},"body":{"classes/Channel.html":{}}}],["src/channels/entities/channels.entity.ts:18",{"_index":211,"title":{},"body":{"classes/Channel.html":{}}}],["src/channels/entities/channels.entity.ts:25",{"_index":214,"title":{},"body":{"classes/Channel.html":{}}}],["src/channels/resolvers/channel.resolver.ts",{"_index":327,"title":{},"body":{"classes/ChannelResolver.html":{},"coverage.html":{}}}],["src/channels/resolvers/channel.resolver.ts:22",{"_index":330,"title":{},"body":{"classes/ChannelResolver.html":{}}}],["src/channels/resolvers/channel.resolver.ts:8",{"_index":328,"title":{},"body":{"classes/ChannelResolver.html":{}}}],["src/channels/resolvers/channelmembers.resolver.ts",{"_index":277,"title":{},"body":{"classes/ChannelMembersResolver.html":{},"coverage.html":{}}}],["src/channels/resolvers/channelmembers.resolver.ts:13",{"_index":294,"title":{},"body":{"classes/ChannelMembersResolver.html":{}}}],["src/channels/resolvers/channelmembers.resolver.ts:18",{"_index":292,"title":{},"body":{"classes/ChannelMembersResolver.html":{}}}],["src/channels/resolvers/channelmembers.resolver.ts:23",{"_index":290,"title":{},"body":{"classes/ChannelMembersResolver.html":{}}}],["src/channels/resolvers/channelmembers.resolver.ts:9",{"_index":284,"title":{},"body":{"classes/ChannelMembersResolver.html":{}}}],["src/contacts/contacts.controller.ts",{"_index":489,"title":{},"body":{"controllers/ContactsController.html":{},"coverage.html":{}}}],["src/contacts/contacts.controller.ts:12",{"_index":515,"title":{},"body":{"controllers/ContactsController.html":{}}}],["src/contacts/contacts.controller.ts:16",{"_index":509,"title":{},"body":{"controllers/ContactsController.html":{}}}],["src/contacts/contacts.controller.ts:21",{"_index":517,"title":{},"body":{"controllers/ContactsController.html":{}}}],["src/contacts/contacts.controller.ts:29",{"_index":502,"title":{},"body":{"controllers/ContactsController.html":{}}}],["src/contacts/contacts.controller.ts:38",{"_index":512,"title":{},"body":{"controllers/ContactsController.html":{}}}],["src/contacts/contacts.controller.ts:46",{"_index":506,"title":{},"body":{"controllers/ContactsController.html":{}}}],["src/contacts/contacts.entity.ts",{"_index":445,"title":{},"body":{"classes/Contact.html":{},"coverage.html":{}}}],["src/contacts/contacts.entity.ts:12",{"_index":455,"title":{},"body":{"classes/Contact.html":{}}}],["src/contacts/contacts.entity.ts:16",{"_index":460,"title":{},"body":{"classes/Contact.html":{}}}],["src/contacts/contacts.entity.ts:21",{"_index":457,"title":{},"body":{"classes/Contact.html":{}}}],["src/contacts/contacts.entity.ts:25",{"_index":453,"title":{},"body":{"classes/Contact.html":{}}}],["src/contacts/contacts.entity.ts:29",{"_index":454,"title":{},"body":{"classes/Contact.html":{}}}],["src/contacts/contacts.entity.ts:33",{"_index":465,"title":{},"body":{"classes/Contact.html":{}}}],["src/contacts/contacts.entity.ts:37",{"_index":463,"title":{},"body":{"classes/Contact.html":{}}}],["src/contacts/contacts.entity.ts:41",{"_index":464,"title":{},"body":{"classes/Contact.html":{}}}],["src/contacts/contacts.entity.ts:48",{"_index":452,"title":{},"body":{"classes/Contact.html":{}}}],["src/contacts/contacts.entity.ts:55",{"_index":466,"title":{},"body":{"classes/Contact.html":{}}}],["src/contacts/contacts.module.ts",{"_index":539,"title":{},"body":{"modules/ContactsModule.html":{}}}],["src/contacts/contacts.service.ts",{"_index":555,"title":{},"body":{"injectables/ContactsService.html":{},"coverage.html":{}}}],["src/contacts/contacts.service.ts:103",{"_index":593,"title":{},"body":{"injectables/ContactsService.html":{}}}],["src/contacts/contacts.service.ts:12",{"_index":569,"title":{},"body":{"injectables/ContactsService.html":{}}}],["src/contacts/contacts.service.ts:22",{"_index":575,"title":{},"body":{"injectables/ContactsService.html":{}}}],["src/contacts/contacts.service.ts:33",{"_index":590,"title":{},"body":{"injectables/ContactsService.html":{}}}],["src/contacts/contacts.service.ts:40",{"_index":581,"title":{},"body":{"injectables/ContactsService.html":{}}}],["src/contacts/contacts.service.ts:48",{"_index":578,"title":{},"body":{"injectables/ContactsService.html":{}}}],["src/contacts/contacts.service.ts:52",{"_index":584,"title":{},"body":{"injectables/ContactsService.html":{}}}],["src/contacts/contacts.service.ts:58",{"_index":586,"title":{},"body":{"injectables/ContactsService.html":{}}}],["src/contacts/contacts.service.ts:67",{"_index":577,"title":{},"body":{"injectables/ContactsService.html":{}}}],["src/contacts/contacts.service.ts:71",{"_index":591,"title":{},"body":{"injectables/ContactsService.html":{}}}],["src/contacts/contacts.service.ts:76",{"_index":572,"title":{},"body":{"injectables/ContactsService.html":{}}}],["src/contacts/contacts.service.ts:81",{"_index":595,"title":{},"body":{"injectables/ContactsService.html":{}}}],["src/contacts/contacts.service.ts:86",{"_index":573,"title":{},"body":{"injectables/ContactsService.html":{}}}],["src/contacts/contacts.service.ts:91",{"_index":588,"title":{},"body":{"injectables/ContactsService.html":{}}}],["src/contacts/dto/contact",{"_index":480,"title":{},"body":{"classes/ContactHandshakeDto.html":{},"coverage.html":{}}}],["src/contacts/dto/contact.dto.ts",{"_index":475,"title":{},"body":{"classes/ContactDto.html":{},"coverage.html":{}}}],["src/contacts/dto/contact.dto.ts:7",{"_index":477,"title":{},"body":{"classes/ContactDto.html":{}}}],["src/contacts/resolvers/contacts.resolver.ts",{"_index":544,"title":{},"body":{"classes/ContactsResolver.html":{},"coverage.html":{}}}],["src/contacts/resolvers/contacts.resolver.ts:12",{"_index":548,"title":{},"body":{"classes/ContactsResolver.html":{}}}],["src/contacts/resolvers/contacts.resolver.ts:8",{"_index":546,"title":{},"body":{"classes/ContactsResolver.html":{}}}],["src/contacts/test",{"_index":1654,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/cryptography/cryptography.module.ts",{"_index":672,"title":{},"body":{"modules/CryptographyModule.html":{}}}],["src/cryptography/cryptography.service.ts",{"_index":673,"title":{},"body":{"injectables/CryptographyService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/cryptography/cryptography.service.ts:112",{"_index":706,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["src/cryptography/cryptography.service.ts:126",{"_index":729,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["src/cryptography/cryptography.service.ts:13",{"_index":762,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["src/cryptography/cryptography.service.ts:141",{"_index":718,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["src/cryptography/cryptography.service.ts:165",{"_index":694,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["src/cryptography/cryptography.service.ts:185",{"_index":749,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["src/cryptography/cryptography.service.ts:192",{"_index":748,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["src/cryptography/cryptography.service.ts:198",{"_index":768,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["src/cryptography/cryptography.service.ts:204",{"_index":765,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["src/cryptography/cryptography.service.ts:33",{"_index":740,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["src/cryptography/cryptography.service.ts:53",{"_index":722,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["src/cryptography/cryptography.service.ts:67",{"_index":759,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["src/cryptography/cryptography.service.ts:82",{"_index":770,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["src/cryptography/cryptography.service.ts:97",{"_index":751,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["src/cryptography/dto/cryptography",{"_index":665,"title":{},"body":{"classes/CryptographyKeyPairDto.html":{},"coverage.html":{}}}],["src/cryptography/test",{"_index":6,"title":{},"body":{"interfaces/AnonKeySet.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/development/development.controller.ts",{"_index":882,"title":{},"body":{"controllers/DevelopmentController.html":{},"coverage.html":{}}}],["src/development/development.controller.ts:19",{"_index":893,"title":{},"body":{"controllers/DevelopmentController.html":{}}}],["src/development/development.controller.ts:28",{"_index":888,"title":{},"body":{"controllers/DevelopmentController.html":{}}}],["src/development/development.controller.ts:45",{"_index":896,"title":{},"body":{"controllers/DevelopmentController.html":{}}}],["src/development/development.module.ts",{"_index":915,"title":{},"body":{"modules/DevelopmentModule.html":{}}}],["src/events/dto/ekhoevent.dto.ts",{"_index":940,"title":{},"body":{"classes/EkhoEventDto.html":{},"coverage.html":{}}}],["src/events/dto/ekhoevent.dto.ts:11",{"_index":947,"title":{},"body":{"classes/EkhoEventDto.html":{}}}],["src/events/dto/ekhoevent.dto.ts:14",{"_index":948,"title":{},"body":{"classes/EkhoEventDto.html":{}}}],["src/events/dto/ekhoevent.dto.ts:5",{"_index":949,"title":{},"body":{"classes/EkhoEventDto.html":{}}}],["src/events/dto/ekhoevent.dto.ts:8",{"_index":945,"title":{},"body":{"classes/EkhoEventDto.html":{}}}],["src/events/entities/blocks.entity.ts",{"_index":147,"title":{},"body":{"classes/Block.html":{},"coverage.html":{}}}],["src/events/entities/blocks.entity.ts:11",{"_index":159,"title":{},"body":{"classes/Block.html":{}}}],["src/events/entities/blocks.entity.ts:18",{"_index":156,"title":{},"body":{"classes/Block.html":{}}}],["src/events/entities/blocks.entity.ts:8",{"_index":161,"title":{},"body":{"classes/Block.html":{}}}],["src/events/entities/events.entity.ts",{"_index":917,"title":{},"body":{"classes/EkhoEvent.html":{},"coverage.html":{}}}],["src/events/entities/events.entity.ts:10",{"_index":936,"title":{},"body":{"classes/EkhoEvent.html":{}}}],["src/events/entities/events.entity.ts:13",{"_index":935,"title":{},"body":{"classes/EkhoEvent.html":{}}}],["src/events/entities/events.entity.ts:16",{"_index":927,"title":{},"body":{"classes/EkhoEvent.html":{}}}],["src/events/entities/events.entity.ts:19",{"_index":928,"title":{},"body":{"classes/EkhoEvent.html":{}}}],["src/events/entities/events.entity.ts:22",{"_index":934,"title":{},"body":{"classes/EkhoEvent.html":{}}}],["src/events/entities/events.entity.ts:25",{"_index":931,"title":{},"body":{"classes/EkhoEvent.html":{}}}],["src/events/entities/events.entity.ts:32",{"_index":925,"title":{},"body":{"classes/EkhoEvent.html":{}}}],["src/events/entities/events.entity.ts:35",{"_index":933,"title":{},"body":{"classes/EkhoEvent.html":{}}}],["src/events/entities/events.entity.ts:7",{"_index":932,"title":{},"body":{"classes/EkhoEvent.html":{}}}],["src/events/events.controller.ts",{"_index":955,"title":{},"body":{"controllers/EventsController.html":{},"coverage.html":{}}}],["src/events/events.controller.ts:11",{"_index":960,"title":{},"body":{"controllers/EventsController.html":{}}}],["src/events/events.controller.ts:16",{"_index":962,"title":{},"body":{"controllers/EventsController.html":{}}}],["src/events/events.controller.ts:21",{"_index":964,"title":{},"body":{"controllers/EventsController.html":{}}}],["src/events/events.controller.ts:26",{"_index":967,"title":{},"body":{"controllers/EventsController.html":{}}}],["src/events/events.controller.ts:31",{"_index":969,"title":{},"body":{"controllers/EventsController.html":{}}}],["src/events/events.module.ts",{"_index":985,"title":{},"body":{"modules/EventsModule.html":{}}}],["src/events/events.service.ts",{"_index":989,"title":{},"body":{"injectables/EventsService.html":{},"coverage.html":{}}}],["src/events/events.service.ts:17",{"_index":1002,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/events/events.service.ts:21",{"_index":1009,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/events/events.service.ts:25",{"_index":1011,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/events/events.service.ts:29",{"_index":1004,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/events/events.service.ts:34",{"_index":1015,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/events/events.service.ts:38",{"_index":1017,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/events/events.service.ts:42",{"_index":1007,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/events/events.service.ts:54",{"_index":1012,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/events/events.service.ts:63",{"_index":1006,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/events/events.service.ts:9",{"_index":1000,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/events/test",{"_index":1670,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/ipfs/dto/ipfs",{"_index":1084,"title":{},"body":{"classes/IpfsMessageDto.html":{},"coverage.html":{}}}],["src/ipfs/ipfs.client.factory.ts",{"_index":1675,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/ipfs/ipfs.configuration.ts",{"_index":1676,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/ipfs/ipfs.controller.ts",{"_index":1066,"title":{},"body":{"controllers/IpfsController.html":{},"coverage.html":{}}}],["src/ipfs/ipfs.controller.ts:10",{"_index":1070,"title":{},"body":{"controllers/IpfsController.html":{}}}],["src/ipfs/ipfs.controller.ts:15",{"_index":1074,"title":{},"body":{"controllers/IpfsController.html":{}}}],["src/ipfs/ipfs.module.ts",{"_index":1090,"title":{},"body":{"modules/IpfsModule.html":{}}}],["src/ipfs/ipfs.service.ts",{"_index":1096,"title":{},"body":{"injectables/IpfsService.html":{},"coverage.html":{}}}],["src/ipfs/ipfs.service.ts:14",{"_index":1102,"title":{},"body":{"injectables/IpfsService.html":{}}}],["src/ipfs/ipfs.service.ts:26",{"_index":1110,"title":{},"body":{"injectables/IpfsService.html":{}}}],["src/ipfs/ipfs.service.ts:6",{"_index":1100,"title":{},"body":{"injectables/IpfsService.html":{}}}],["src/ipfs/test",{"_index":1680,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/key",{"_index":838,"title":{},"body":{"classes/DbKeyManager.html":{},"classes/DbKeyPair.html":{},"interfaces/KeyManager.html":{},"modules/KeyManagerModule.html":{},"classes/VaultKeyManager.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":1687,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/messages/dto/send",{"_index":1263,"title":{},"body":{"classes/SendMessageDto.html":{},"coverage.html":{}}}],["src/messages/entities/messages.entity.ts",{"_index":1150,"title":{},"body":{"classes/Message.html":{},"coverage.html":{}}}],["src/messages/entities/messages.entity.ts:10",{"_index":1156,"title":{},"body":{"classes/Message.html":{}}}],["src/messages/entities/messages.entity.ts:14",{"_index":1158,"title":{},"body":{"classes/Message.html":{}}}],["src/messages/entities/messages.entity.ts:18",{"_index":1154,"title":{},"body":{"classes/Message.html":{}}}],["src/messages/entities/messages.entity.ts:22",{"_index":1159,"title":{},"body":{"classes/Message.html":{}}}],["src/messages/entities/messages.entity.ts:26",{"_index":1153,"title":{},"body":{"classes/Message.html":{}}}],["src/messages/entities/messages.entity.ts:30",{"_index":1157,"title":{},"body":{"classes/Message.html":{}}}],["src/messages/entities/messages.entity.ts:34",{"_index":1160,"title":{},"body":{"classes/Message.html":{}}}],["src/messages/entities/messages.entity.ts:38",{"_index":1152,"title":{},"body":{"classes/Message.html":{}}}],["src/messages/messages.controller.ts",{"_index":1163,"title":{},"body":{"controllers/MessagesController.html":{},"coverage.html":{}}}],["src/messages/messages.controller.ts:10",{"_index":1173,"title":{},"body":{"controllers/MessagesController.html":{}}}],["src/messages/messages.controller.ts:15",{"_index":1167,"title":{},"body":{"controllers/MessagesController.html":{}}}],["src/messages/messages.controller.ts:20",{"_index":1170,"title":{},"body":{"controllers/MessagesController.html":{}}}],["src/messages/messages.module.ts",{"_index":1201,"title":{},"body":{"modules/MessagesModule.html":{}}}],["src/messages/messages.service.ts",{"_index":1204,"title":{},"body":{"injectables/MessagesService.html":{},"coverage.html":{}}}],["src/messages/messages.service.ts:10",{"_index":1208,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/messages/messages.service.ts:19",{"_index":1214,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/messages/messages.service.ts:39",{"_index":1210,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/messages/messages.service.ts:43",{"_index":1212,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/messages/test",{"_index":1689,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/dto/create",{"_index":661,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/user.dto.ts",{"_index":1333,"title":{},"body":{"classes/UserDto.html":{},"coverage.html":{}}}],["src/users/dto/user.dto.ts:13",{"_index":1335,"title":{},"body":{"classes/UserDto.html":{}}}],["src/users/dto/user.dto.ts:9",{"_index":1334,"title":{},"body":{"classes/UserDto.html":{}}}],["src/users/entities/users.entity.ts",{"_index":1325,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/users/entities/users.entity.ts:12",{"_index":1328,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/users.entity.ts:16",{"_index":1329,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/users.entity.ts:23",{"_index":1326,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/users.entity.ts:30",{"_index":1327,"title":{},"body":{"classes/User.html":{}}}],["src/users/resolvers/users.resolver.ts",{"_index":1361,"title":{},"body":{"classes/UsersResolver.html":{},"coverage.html":{}}}],["src/users/resolvers/users.resolver.ts:10",{"_index":1367,"title":{},"body":{"classes/UsersResolver.html":{}}}],["src/users/resolvers/users.resolver.ts:15",{"_index":1368,"title":{},"body":{"classes/UsersResolver.html":{}}}],["src/users/resolvers/users.resolver.ts:6",{"_index":1364,"title":{},"body":{"classes/UsersResolver.html":{}}}],["src/users/test",{"_index":1701,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/users.controller.ts",{"_index":1337,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:11",{"_index":1340,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:16",{"_index":1342,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":1356,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":1375,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:10",{"_index":1381,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:18",{"_index":1383,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:40",{"_index":1387,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:44",{"_index":1393,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:48",{"_index":1394,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:52",{"_index":1391,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:59",{"_index":1386,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:63",{"_index":1389,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:71",{"_index":1384,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/web3/test",{"_index":1705,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/web3/web3.configuration.ts",{"_index":171,"title":{},"body":{"interfaces/BroadcastAccountConfig.html":{},"interfaces/EkhoWeb3Config.html":{},"interfaces/Web3Config.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/web3/web3.constants.ts",{"_index":1709,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/web3/web3.controller.ts",{"_index":1457,"title":{},"body":{"controllers/Web3Controller.html":{},"coverage.html":{}}}],["src/web3/web3.controller.ts:15",{"_index":1463,"title":{},"body":{"controllers/Web3Controller.html":{}}}],["src/web3/web3.controller.ts:9",{"_index":1459,"title":{},"body":{"controllers/Web3Controller.html":{}}}],["src/web3/web3.factory.ts",{"_index":1710,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/web3/web3.module.ts",{"_index":1475,"title":{},"body":{"modules/Web3Module.html":{}}}],["src/web3/web3.service.ts",{"_index":1479,"title":{},"body":{"injectables/Web3Service.html":{},"coverage.html":{}}}],["src/web3/web3.service.ts:114",{"_index":1488,"title":{},"body":{"injectables/Web3Service.html":{}}}],["src/web3/web3.service.ts:159",{"_index":1490,"title":{},"body":{"injectables/Web3Service.html":{}}}],["src/web3/web3.service.ts:171",{"_index":1495,"title":{},"body":{"injectables/Web3Service.html":{}}}],["src/web3/web3.service.ts:30",{"_index":1498,"title":{},"body":{"injectables/Web3Service.html":{}}}],["src/web3/web3.service.ts:31",{"_index":1520,"title":{},"body":{"injectables/Web3Service.html":{}}}],["src/web3/web3.service.ts:32",{"_index":1522,"title":{},"body":{"injectables/Web3Service.html":{}}}],["src/web3/web3.service.ts:33",{"_index":1519,"title":{},"body":{"injectables/Web3Service.html":{}}}],["src/web3/web3.service.ts:34",{"_index":1497,"title":{},"body":{"injectables/Web3Service.html":{}}}],["src/web3/web3.service.ts:35",{"_index":1521,"title":{},"body":{"injectables/Web3Service.html":{}}}],["src/web3/web3.service.ts:36",{"_index":1486,"title":{},"body":{"injectables/Web3Service.html":{}}}],["src/web3/web3.service.ts:52",{"_index":1492,"title":{},"body":{"injectables/Web3Service.html":{}}}],["src/web3/web3.service.ts:56",{"_index":1493,"title":{},"body":{"injectables/Web3Service.html":{}}}],["stable",{"_index":1780,"title":{},"body":{"index.html":{}}}],["stabledevelopment",{"_index":1782,"title":{},"body":{"index.html":{}}}],["start",{"_index":1790,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1792,"title":{},"body":{"index.html":{}}}],["start:prodswagger",{"_index":1794,"title":{},"body":{"index.html":{}}}],["started",{"_index":1750,"title":{"index.html":{}},"body":{}}],["starttransaction",{"_index":1278,"title":{},"body":{"interfaces/StringIndexedObject.html":{},"miscellaneous/variables.html":{}}}],["statements",{"_index":1639,"title":{},"body":{"coverage.html":{}}}],["statemutability",{"_index":1947,"title":{},"body":{"miscellaneous/variables.html":{}}}],["status",{"_index":921,"title":{},"body":{"classes/EkhoEvent.html":{},"injectables/EventsService.html":{},"miscellaneous/variables.html":{}}}],["store",{"_index":1098,"title":{},"body":{"injectables/IpfsService.html":{},"miscellaneous/variables.html":{}}}],["store(data",{"_index":1109,"title":{},"body":{"injectables/IpfsService.html":{}}}],["storedmessage",{"_index":1245,"title":{},"body":{"injectables/MessagesService.html":{}}}],["storedmessage.content",{"_index":1247,"title":{},"body":{"injectables/MessagesService.html":{}}}],["streams",{"_index":1126,"title":{},"body":{"injectables/IpfsService.html":{}}}],["string",{"_index":25,"title":{},"body":{"interfaces/AnonKeySet.html":{},"interfaces/BroadcastAccountConfig.html":{},"classes/Channel.html":{},"classes/ChannelDto.html":{},"classes/ChannelMember.html":{},"classes/ChannelMemberDto.html":{},"classes/ChannelMessage.html":{},"classes/ChannelMessageDto.html":{},"classes/Contact.html":{},"classes/ContactDto.html":{},"classes/ContactHandshakeDto.html":{},"controllers/ContactsController.html":{},"classes/ContactsResolver.html":{},"injectables/ContactsService.html":{},"classes/CreateChannelDto.html":{},"classes/CreateChannelMemberDto.html":{},"classes/CreateChannelMessageDto.html":{},"classes/CreateUserDto.html":{},"classes/CryptographyKeyPairDto.html":{},"injectables/CryptographyService.html":{},"classes/DbKeyManager.html":{},"classes/DbKeyPair.html":{},"controllers/DevelopmentController.html":{},"classes/EkhoEvent.html":{},"classes/EkhoEventDto.html":{},"interfaces/EkhoWeb3Config.html":{},"classes/EncodedMessageDto.html":{},"injectables/EventsService.html":{},"controllers/IpfsController.html":{},"classes/IpfsMessageDto.html":{},"injectables/IpfsService.html":{},"interfaces/KeyManager.html":{},"classes/Message.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"classes/RawMessageDto.html":{},"classes/SendMessageDto.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/StringIndexedObject.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"classes/VaultKeyManager.html":{},"interfaces/Web3Config.html":{},"controllers/Web3Controller.html":{},"injectables/Web3Service.html":{},"miscellaneous/variables.html":{}}}],["stringdata",{"_index":1127,"title":{},"body":{"injectables/IpfsService.html":{}}}],["stringindexedobject",{"_index":1273,"title":{"interfaces/StringIndexedObject.html":{}},"body":{"interfaces/StringIndexedObject.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["subscribe",{"_index":1937,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subscribe('logs",{"_index":1555,"title":{},"body":{"injectables/Web3Service.html":{}}}],["subscribed",{"_index":1588,"title":{},"body":{"injectables/Web3Service.html":{}}}],["subscriber",{"_index":1546,"title":{},"body":{"injectables/Web3Service.html":{}}}],["subset",{"_index":1296,"title":{},"body":{"interfaces/StringIndexedObject.html":{}}}],["successfully",{"_index":1614,"title":{},"body":{"injectables/Web3Service.html":{}}}],["such",{"_index":194,"title":{},"body":{"interfaces/BroadcastAccountConfig.html":{},"interfaces/EkhoWeb3Config.html":{},"interfaces/Web3Config.html":{},"miscellaneous/variables.html":{}}}],["suitable",{"_index":737,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["support",{"_index":1858,"title":{},"body":{"modules.html":{}}}],["supports",{"_index":376,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["sure",{"_index":1785,"title":{},"body":{"index.html":{}}}],["svg",{"_index":1859,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1742,"title":{},"body":{"dependencies.html":{}}}],["symmetric",{"_index":698,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["t",{"_index":1320,"title":{},"body":{"interfaces/StringIndexedObject.html":{},"miscellaneous/variables.html":{}}}],["table",{"_index":1714,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1713,"title":{},"body":{"coverage.html":{}}}],["takes",{"_index":1292,"title":{},"body":{"interfaces/StringIndexedObject.html":{},"miscellaneous/variables.html":{}}}],["test",{"_index":49,"title":{},"body":{"interfaces/AnonKeySet.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/StringIndexedObject.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"index.html":{}}}],["test/.../test",{"_index":1865,"title":{},"body":{"miscellaneous/variables.html":{}}}],["test/test",{"_index":1274,"title":{},"body":{"interfaces/StringIndexedObject.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["test:covdocumentation",{"_index":1845,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1834,"title":{},"body":{"index.html":{}}}],["tested",{"_index":1898,"title":{},"body":{"miscellaneous/variables.html":{}}}],["testhelper",{"_index":33,"title":{"interfaces/TestHelper.html":{}},"body":{"interfaces/AnonKeySet.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["tests",{"_index":1832,"title":{},"body":{"index.html":{}}}],["testsubject",{"_index":22,"title":{"interfaces/TestSubject.html":{}},"body":{"interfaces/AnonKeySet.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["testsubjects",{"_index":70,"title":{},"body":{"interfaces/AnonKeySet.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"miscellaneous/variables.html":{}}}],["testusers",{"_index":29,"title":{"interfaces/TestUsers.html":{}},"body":{"interfaces/AnonKeySet.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"coverage.html":{}}}],["themselves",{"_index":52,"title":{},"body":{"interfaces/AnonKeySet.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{}}}],["this.address",{"_index":1538,"title":{},"body":{"injectables/Web3Service.html":{}}}],["this.blockrepository.save(block)).blocknumber",{"_index":1025,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.chain",{"_index":1608,"title":{},"body":{"injectables/Web3Service.html":{}}}],["this.channelservice.createchannel(channel",{"_index":333,"title":{},"body":{"classes/ChannelResolver.html":{}}}],["this.channelservice.createchannelandmembers(channel",{"_index":402,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["this.channelservice.createchannelmessage(channelmessage",{"_index":404,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["this.channelservice.findallchannelmembers",{"_index":417,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["this.channelservice.findallchannelmembersbychannelid(channel.id",{"_index":338,"title":{},"body":{"classes/ChannelResolver.html":{}}}],["this.channelservice.findallchannelmembersbycontactid(contact.id",{"_index":308,"title":{},"body":{"classes/ChannelMembersResolver.html":{}}}],["this.channelservice.findallchannelmembersbyuserid(user.id",{"_index":305,"title":{},"body":{"classes/ChannelMembersResolver.html":{}}}],["this.channelservice.findallchannelmessages",{"_index":427,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["this.channelservice.findallchannels",{"_index":411,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["this.channelservice.findchannelbyid(id",{"_index":414,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["this.channelservice.findchannelmemberbyid(id",{"_index":416,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["this.channelservice.findchannelmessagebycontactid(contactid",{"_index":426,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["this.channelservice.findchannelmessagebyuserid(contactid",{"_index":425,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["this.channelservice.findonechannel",{"_index":336,"title":{},"body":{"classes/ChannelResolver.html":{}}}],["this.channelservice.processallpendingevents",{"_index":407,"title":{},"body":{"controllers/ChannelsController.html":{}}}],["this.checkresponse(response",{"_index":1442,"title":{},"body":{"classes/VaultKeyManager.html":{}}}],["this.client.get(`/v1/users",{"_index":1445,"title":{},"body":{"classes/VaultKeyManager.html":{}}}],["this.client.post(`/v1/users",{"_index":1440,"title":{},"body":{"classes/VaultKeyManager.html":{}}}],["this.configservice.get('web3.broadcastaccount.address",{"_index":1539,"title":{},"body":{"injectables/Web3Service.html":{}}}],["this.configservice.get('web3.broadcastaccount.privatekey",{"_index":1543,"title":{},"body":{"injectables/Web3Service.html":{}}}],["this.configservice.get('web3.broadcastaccount.publickey",{"_index":1541,"title":{},"body":{"injectables/Web3Service.html":{}}}],["this.configservice.get('web3.contractaddress",{"_index":1537,"title":{},"body":{"injectables/Web3Service.html":{}}}],["this.configservice.get('web3.hardfork",{"_index":1533,"title":{},"body":{"injectables/Web3Service.html":{}}}],["this.configservice.get('web3.rpcurl",{"_index":1535,"title":{},"body":{"injectables/Web3Service.html":{}}}],["this.contactsrepository.delete",{"_index":620,"title":{},"body":{"injectables/ContactsService.html":{}}}],["this.contactsrepository.find",{"_index":615,"title":{},"body":{"injectables/ContactsService.html":{}}}],["this.contactsrepository.findone",{"_index":618,"title":{},"body":{"injectables/ContactsService.html":{}}}],["this.contactsrepository.findoneorfail",{"_index":617,"title":{},"body":{"injectables/ContactsService.html":{}}}],["this.contactsrepository.save(contact",{"_index":614,"title":{},"body":{"injectables/ContactsService.html":{}}}],["this.contactsservice.acceptinithandshake(userid",{"_index":532,"title":{},"body":{"controllers/ContactsController.html":{}}}],["this.contactsservice.acceptreplyhandshake(userid",{"_index":534,"title":{},"body":{"controllers/ContactsController.html":{}}}],["this.contactsservice.findone(user.id",{"_index":901,"title":{},"body":{"controllers/DevelopmentController.html":{}}}],["this.contactsservice.findone(userid",{"_index":904,"title":{},"body":{"controllers/DevelopmentController.html":{}}}],["this.contactsservice.findonecontact(userid",{"_index":528,"title":{},"body":{"controllers/ContactsController.html":{}}}],["this.contactsservice.getbyuser(user.id",{"_index":550,"title":{},"body":{"classes/ContactsResolver.html":{}}}],["this.contactsservice.getbyuser(userid",{"_index":525,"title":{},"body":{"controllers/ContactsController.html":{}}}],["this.contactsservice.inithandshake(userid",{"_index":531,"title":{},"body":{"controllers/ContactsController.html":{},"classes/ContactsResolver.html":{}}}],["this.contactsservice.replyhandshake(userid",{"_index":533,"title":{},"body":{"controllers/ContactsController.html":{}}}],["this.contractaddress",{"_index":1536,"title":{},"body":{"injectables/Web3Service.html":{}}}],["this.createcontact(userid",{"_index":619,"title":{},"body":{"injectables/ContactsService.html":{}}}],["this.cryptographyservice.generateecdhsharedsecret(contact.oneusekey",{"_index":902,"title":{},"body":{"controllers/DevelopmentController.html":{}}}],["this.cryptographyservice.generateoneusekeypair",{"_index":606,"title":{},"body":{"injectables/ContactsService.html":{}}}],["this.cryptographyservice.generatesignature(data",{"_index":867,"title":{},"body":{"classes/DbKeyManager.html":{}}}],["this.cryptographyservice.generatesigningkeypair",{"_index":862,"title":{},"body":{"classes/DbKeyManager.html":{}}}],["this.cryptographyservice.validatesignature(signature",{"_index":872,"title":{},"body":{"classes/DbKeyManager.html":{},"classes/VaultKeyManager.html":{}}}],["this.eventsrepository.find",{"_index":1021,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.eventsrepository.findone",{"_index":1023,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.eventsrepository.findoneorfail",{"_index":1022,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.eventsrepository.save(event",{"_index":1024,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.eventsservice.getall",{"_index":975,"title":{},"body":{"controllers/EventsController.html":{}}}],["this.eventsservice.getbytransactionhash(transactionhash",{"_index":1567,"title":{},"body":{"injectables/Web3Service.html":{}}}],["this.eventsservice.getbytransactionhash(tx.txhash",{"_index":1581,"title":{},"body":{"injectables/Web3Service.html":{}}}],["this.eventsservice.getfirstunprocessedevent",{"_index":981,"title":{},"body":{"controllers/EventsController.html":{}}}],["this.eventsservice.getlatestblock",{"_index":978,"title":{},"body":{"controllers/EventsController.html":{},"injectables/Web3Service.html":{}}}],["this.eventsservice.getonebyid(id",{"_index":977,"title":{},"body":{"controllers/EventsController.html":{}}}],["this.eventsservice.gettransactionbychannelid(channelid",{"_index":1244,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.eventsservice.markeventasprocessed(id",{"_index":980,"title":{},"body":{"controllers/EventsController.html":{}}}],["this.eventsservice.save(tx",{"_index":1583,"title":{},"body":{"injectables/Web3Service.html":{}}}],["this.eventsservice.saveblockinfo(currentblock",{"_index":1579,"title":{},"body":{"injectables/Web3Service.html":{}}}],["this.findoneorcreate(userid",{"_index":621,"title":{},"body":{"injectables/ContactsService.html":{}}}],["this.generatehandshake(userid",{"_index":622,"title":{},"body":{"injectables/ContactsService.html":{}}}],["this.generatenoncebuffer(noncenumber",{"_index":820,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["this.getonebyid(id",{"_index":1036,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.getrandomisedbuffer(sodiumnative.crypto_scalarmult_scalarbytes",{"_index":789,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["this.gettransactioncount(this.address",{"_index":1590,"title":{},"body":{"injectables/Web3Service.html":{}}}],["this.getzeroedbuffer(data.length",{"_index":823,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["this.getzeroedbuffer(size",{"_index":835,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["this.getzeroedbuffer(sodiumnative.crypto_hash_sha256_bytes",{"_index":807,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["this.getzeroedbuffer(sodiumnative.crypto_kdf_keybytes",{"_index":811,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["this.getzeroedbuffer(sodiumnative.crypto_scalarmult_bytes",{"_index":787,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["this.getzeroedbuffer(sodiumnative.crypto_sign_bytes",{"_index":797,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["this.getzeroedbuffer(sodiumnative.crypto_sign_publickeybytes",{"_index":781,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["this.getzeroedbuffer(sodiumnative.crypto_sign_secretkeybytes",{"_index":782,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["this.getzeroedbuffer(sodiumnative.crypto_stream_chacha20_noncebytes",{"_index":817,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["this.hardfork",{"_index":1532,"title":{},"body":{"injectables/Web3Service.html":{}}}],["this.ipfs.add(buffereddata",{"_index":1131,"title":{},"body":{"injectables/IpfsService.html":{}}}],["this.ipfs.get(ipfspath",{"_index":1118,"title":{},"body":{"injectables/IpfsService.html":{}}}],["this.ipfsservice.retrieve(path",{"_index":1081,"title":{},"body":{"controllers/IpfsController.html":{}}}],["this.ipfsservice.retrieve(tx.content",{"_index":1246,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.ipfsservice.store",{"_index":1219,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.ipfsservice.store(data",{"_index":1083,"title":{},"body":{"controllers/IpfsController.html":{}}}],["this.keymanager.verifysignature(contact.signature",{"_index":641,"title":{},"body":{"injectables/ContactsService.html":{}}}],["this.keymanager.verifysignature(signature",{"_index":912,"title":{},"body":{"controllers/DevelopmentController.html":{}}}],["this.keymanagerservice.createsigningkey(dbuser.id",{"_index":1404,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.keymanagerservice.readpublicsigningkey(id",{"_index":1414,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.keymanagerservice.sign(id",{"_index":1415,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.keypairrepository.findoneorfail",{"_index":865,"title":{},"body":{"classes/DbKeyManager.html":{}}}],["this.messagerepository.find",{"_index":1231,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.messagerepository.findone",{"_index":1236,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.messagerepository.save(message",{"_index":1230,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.messagesservice.findall",{"_index":1184,"title":{},"body":{"controllers/MessagesController.html":{}}}],["this.messagesservice.findforuser(user",{"_index":1194,"title":{},"body":{"controllers/MessagesController.html":{}}}],["this.messagesservice.sendmessage(message.from",{"_index":1180,"title":{},"body":{"controllers/MessagesController.html":{}}}],["this.privatekey",{"_index":1542,"title":{},"body":{"injectables/Web3Service.html":{}}}],["this.publickey",{"_index":1540,"title":{},"body":{"injectables/Web3Service.html":{}}}],["this.readpublicsigningkey(id",{"_index":870,"title":{},"body":{"classes/DbKeyManager.html":{},"classes/VaultKeyManager.html":{}}}],["this.receivehandshake(contact",{"_index":623,"title":{},"body":{"injectables/ContactsService.html":{}}}],["this.refresh",{"_index":1544,"title":{},"body":{"injectables/Web3Service.html":{}}}],["this.rpcurl",{"_index":1534,"title":{},"body":{"injectables/Web3Service.html":{}}}],["this.save(myevent",{"_index":1038,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.sendsignertransaction(raw",{"_index":1622,"title":{},"body":{"injectables/Web3Service.html":{}}}],["this.userrepository.delete",{"_index":1419,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.find",{"_index":1413,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findone",{"_index":1416,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findone(id",{"_index":1418,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findoneorfail(id",{"_index":1417,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.manager.connection.createqueryrunner",{"_index":1399,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userservice.create(user",{"_index":1349,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.findbyname(name",{"_index":1351,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.create(user",{"_index":1374,"title":{},"body":{"classes/UsersResolver.html":{}}}],["this.usersservice.findall",{"_index":1372,"title":{},"body":{"classes/UsersResolver.html":{}}}],["this.usersservice.findbyid(userid",{"_index":604,"title":{},"body":{"injectables/ContactsService.html":{},"controllers/DevelopmentController.html":{}}}],["this.usersservice.findbyname(name",{"_index":1371,"title":{},"body":{"classes/UsersResolver.html":{}}}],["this.usersservice.getpublickey(userid",{"_index":625,"title":{},"body":{"injectables/ContactsService.html":{}}}],["this.usersservice.sign(userid",{"_index":626,"title":{},"body":{"injectables/ContactsService.html":{}}}],["this.verifysignature(signature",{"_index":871,"title":{},"body":{"classes/DbKeyManager.html":{},"classes/VaultKeyManager.html":{}}}],["this.web3.eth",{"_index":1554,"title":{},"body":{"injectables/Web3Service.html":{}}}],["this.web3.eth.abi.decodeparameters(['string",{"_index":1562,"title":{},"body":{"injectables/Web3Service.html":{}}}],["this.web3.eth.contract(web3constants.abi",{"_index":1594,"title":{},"body":{"injectables/Web3Service.html":{}}}],["this.web3.eth.gettransactioncount(account",{"_index":1627,"title":{},"body":{"injectables/Web3Service.html":{}}}],["this.web3.eth.sendsignedtransaction(raw",{"_index":1634,"title":{},"body":{"injectables/Web3Service.html":{}}}],["this.web3.utils.tohex(800000",{"_index":1603,"title":{},"body":{"injectables/Web3Service.html":{}}}],["this.web3.utils.tohex(this.web3.utils.towei('15",{"_index":1605,"title":{},"body":{"injectables/Web3Service.html":{}}}],["this.web3.utils.tohex(txcount",{"_index":1601,"title":{},"body":{"injectables/Web3Service.html":{}}}],["this.web3service.emitevent(channelid",{"_index":1221,"title":{},"body":{"injectables/MessagesService.html":{},"controllers/Web3Controller.html":{}}}],["this.web3service.refresh",{"_index":1466,"title":{},"body":{"controllers/Web3Controller.html":{}}}],["throw",{"_index":422,"title":{},"body":{"controllers/ChannelsController.html":{},"injectables/ContactsService.html":{},"injectables/IpfsService.html":{},"injectables/UsersService.html":{},"classes/VaultKeyManager.html":{},"injectables/Web3Service.html":{},"miscellaneous/variables.html":{}}}],["time",{"_index":62,"title":{},"body":{"interfaces/AnonKeySet.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"miscellaneous/variables.html":{}}}],["timeout",{"_index":1915,"title":{},"body":{"miscellaneous/variables.html":{}}}],["timestamp",{"_index":1151,"title":{},"body":{"classes/Message.html":{},"miscellaneous/variables.html":{}}}],["todo",{"_index":408,"title":{},"body":{"controllers/ChannelsController.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"classes/SendMessageDto.html":{},"controllers/Web3Controller.html":{},"injectables/Web3Service.html":{}}}],["token",{"_index":1923,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tools",{"_index":1728,"title":{},"body":{"dependencies.html":{}}}],["transaction",{"_index":1523,"title":{},"body":{"injectables/Web3Service.html":{}}}],["transactionhash",{"_index":1005,"title":{},"body":{"injectables/EventsService.html":{},"injectables/Web3Service.html":{}}}],["transactions",{"_index":1238,"title":{},"body":{"injectables/MessagesService.html":{},"injectables/Web3Service.html":{}}}],["transactionsfound",{"_index":1549,"title":{},"body":{"injectables/Web3Service.html":{}}}],["trudy",{"_index":32,"title":{},"body":{"interfaces/AnonKeySet.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"miscellaneous/variables.html":{}}}],["true",{"_index":137,"title":{},"body":{"modules/AppModule.html":{},"classes/Block.html":{},"classes/Contact.html":{},"injectables/ContactsService.html":{},"controllers/DevelopmentController.html":{},"classes/EkhoEvent.html":{},"injectables/EventsService.html":{},"controllers/MessagesController.html":{},"classes/User.html":{}}}],["true/false",{"_index":775,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["true})@column({nullable",{"_index":462,"title":{},"body":{"classes/Contact.html":{}}}],["true})@onetomany(undefined",{"_index":451,"title":{},"body":{"classes/Contact.html":{},"classes/User.html":{}}}],["try",{"_index":1401,"title":{},"body":{"injectables/UsersService.html":{},"injectables/Web3Service.html":{}}}],["tx",{"_index":1243,"title":{},"body":{"injectables/MessagesService.html":{},"injectables/Web3Service.html":{},"dependencies.html":{}}}],["tx(txobject",{"_index":1607,"title":{},"body":{"injectables/Web3Service.html":{}}}],["tx.block",{"_index":1576,"title":{},"body":{"injectables/Web3Service.html":{}}}],["tx.channelid",{"_index":1570,"title":{},"body":{"injectables/Web3Service.html":{}}}],["tx.content",{"_index":1248,"title":{},"body":{"injectables/MessagesService.html":{},"injectables/Web3Service.html":{}}}],["tx.createddate",{"_index":1250,"title":{},"body":{"injectables/MessagesService.html":{}}}],["tx.processed",{"_index":1577,"title":{},"body":{"injectables/Web3Service.html":{}}}],["tx.serialize",{"_index":1618,"title":{},"body":{"injectables/Web3Service.html":{}}}],["tx.sign(bufferedprivatekey",{"_index":1616,"title":{},"body":{"injectables/Web3Service.html":{}}}],["tx.signature",{"_index":1571,"title":{},"body":{"injectables/Web3Service.html":{}}}],["tx.status",{"_index":1572,"title":{},"body":{"injectables/Web3Service.html":{}}}],["tx.txhash",{"_index":1249,"title":{},"body":{"injectables/MessagesService.html":{},"injectables/Web3Service.html":{}}}],["tx.validate",{"_index":1609,"title":{},"body":{"injectables/Web3Service.html":{}}}],["txcount",{"_index":1589,"title":{},"body":{"injectables/Web3Service.html":{}}}],["txhash",{"_index":922,"title":{},"body":{"classes/EkhoEvent.html":{},"injectables/EventsService.html":{},"classes/Message.html":{},"injectables/MessagesService.html":{},"injectables/Web3Service.html":{},"miscellaneous/variables.html":{}}}],["txhash.transactionhash",{"_index":1635,"title":{},"body":{"injectables/Web3Service.html":{}}}],["txobject",{"_index":1600,"title":{},"body":{"injectables/Web3Service.html":{}}}],["type",{"_index":14,"title":{},"body":{"interfaces/AnonKeySet.html":{},"classes/Block.html":{},"interfaces/BroadcastAccountConfig.html":{},"classes/Channel.html":{},"classes/ChannelDto.html":{},"classes/ChannelMember.html":{},"classes/ChannelMemberDto.html":{},"classes/ChannelMembersResolver.html":{},"classes/ChannelMessage.html":{},"classes/ChannelMessageDto.html":{},"classes/ChannelResolver.html":{},"controllers/ChannelsController.html":{},"classes/Contact.html":{},"classes/ContactDto.html":{},"classes/ContactHandshakeDto.html":{},"controllers/ContactsController.html":{},"classes/ContactsResolver.html":{},"injectables/ContactsService.html":{},"classes/CreateChannelDto.html":{},"classes/CreateChannelMemberDto.html":{},"classes/CreateChannelMessageDto.html":{},"classes/CreateUserDto.html":{},"classes/CryptographyKeyPairDto.html":{},"injectables/CryptographyService.html":{},"classes/DbKeyManager.html":{},"classes/DbKeyPair.html":{},"controllers/DevelopmentController.html":{},"classes/EkhoEvent.html":{},"classes/EkhoEventDto.html":{},"interfaces/EkhoWeb3Config.html":{},"classes/EncodedMessageDto.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/IpfsController.html":{},"classes/IpfsMessageDto.html":{},"injectables/IpfsService.html":{},"interfaces/KeyManager.html":{},"classes/Message.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"classes/ProcessReport.html":{},"classes/RawMessageDto.html":{},"classes/SendMessageDto.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"classes/VaultKeyManager.html":{},"interfaces/Web3Config.html":{},"controllers/Web3Controller.html":{},"injectables/Web3Service.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeof",{"_index":1316,"title":{},"body":{"interfaces/StringIndexedObject.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":165,"title":{},"body":{"classes/Block.html":{},"classes/Channel.html":{},"classes/ChannelMember.html":{},"classes/ChannelMessage.html":{},"classes/Contact.html":{},"injectables/ContactsService.html":{},"classes/DbKeyManager.html":{},"classes/DbKeyPair.html":{},"classes/EkhoEvent.html":{},"injectables/EventsService.html":{},"interfaces/KeyManager.html":{},"classes/Message.html":{},"injectables/MessagesService.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"modules/ChannelsModule.html":{},"modules/ContactsModule.html":{},"modules/EventsModule.html":{},"modules/KeyManagerModule.html":{},"modules/MessagesModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([channel",{"_index":444,"title":{},"body":{"modules/ChannelsModule.html":{}}}],["typeormmodule.forfeature([contact",{"_index":543,"title":{},"body":{"modules/ContactsModule.html":{}}}],["typeormmodule.forfeature([dbkeypair",{"_index":1149,"title":{},"body":{"modules/KeyManagerModule.html":{}}}],["typeormmodule.forfeature([ekhoevent",{"_index":988,"title":{},"body":{"modules/EventsModule.html":{}}}],["typeormmodule.forfeature([message",{"_index":1203,"title":{},"body":{"modules/MessagesModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":1360,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forroot",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["ui",{"_index":1743,"title":{},"body":{"dependencies.html":{}}}],["undefined",{"_index":72,"title":{},"body":{"interfaces/AnonKeySet.html":{},"classes/Block.html":{},"classes/Channel.html":{},"classes/ChannelMember.html":{},"classes/ChannelMessage.html":{},"classes/Contact.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["undefined)@joincolumn({name",{"_index":241,"title":{},"body":{"classes/ChannelMember.html":{},"classes/EkhoEvent.html":{}}}],["unique",{"_index":164,"title":{},"body":{"classes/Block.html":{},"classes/Contact.html":{},"classes/Message.html":{},"classes/User.html":{}}}],["unique('uq_blocknumber",{"_index":167,"title":{},"body":{"classes/Block.html":{}}}],["unique('uq_contact_user_name",{"_index":469,"title":{},"body":{"classes/Contact.html":{}}}],["unique('uq_name",{"_index":1330,"title":{},"body":{"classes/User.html":{}}}],["unique('uq_user_channelid",{"_index":1161,"title":{},"body":{"classes/Message.html":{}}}],["unit",{"_index":1831,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["unprocessed",{"_index":1040,"title":{},"body":{"injectables/EventsService.html":{}}}],["up",{"_index":1787,"title":{},"body":{"index.html":{}}}],["update",{"_index":1804,"title":{},"body":{"index.html":{}}}],["upswagger",{"_index":1811,"title":{},"body":{"index.html":{}}}],["use",{"_index":725,"title":{},"body":{"injectables/CryptographyService.html":{},"injectables/IpfsService.html":{},"controllers/Web3Controller.html":{},"index.html":{}}}],["used",{"_index":710,"title":{},"body":{"injectables/CryptographyService.html":{},"interfaces/StringIndexedObject.html":{}}}],["usefactory",{"_index":1904,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user",{"_index":239,"title":{"classes/User.html":{}},"body":{"classes/ChannelMember.html":{},"classes/ChannelMemberDto.html":{},"classes/ChannelMembersResolver.html":{},"controllers/ChannelsController.html":{},"modules/ChannelsModule.html":{},"classes/Contact.html":{},"classes/ContactsResolver.html":{},"injectables/ContactsService.html":{},"classes/CreateChannelMemberDto.html":{},"classes/CreateUserDto.html":{},"injectables/CryptographyService.html":{},"classes/DbKeyManager.html":{},"classes/DbKeyPair.html":{},"controllers/DevelopmentController.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"classes/RawMessageDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"classes/VaultKeyManager.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.channelmembers",{"_index":260,"title":{},"body":{"classes/ChannelMember.html":{}}}],["user.contacts",{"_index":473,"title":{},"body":{"classes/Contact.html":{}}}],["user.dto",{"_index":1343,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":662,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:9",{"_index":663,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.id",{"_index":863,"title":{},"body":{"classes/DbKeyManager.html":{}}}],["user.name",{"_index":1398,"title":{},"body":{"injectables/UsersService.html":{}}}],["userbyname",{"_index":1362,"title":{},"body":{"classes/UsersResolver.html":{}}}],["userbyname(@args('name",{"_index":1370,"title":{},"body":{"classes/UsersResolver.html":{}}}],["userbyname(name",{"_index":1365,"title":{},"body":{"classes/UsersResolver.html":{}}}],["userchannelmemberships",{"_index":279,"title":{},"body":{"classes/ChannelMembersResolver.html":{}}}],["userchannelmemberships(@root",{"_index":306,"title":{},"body":{"classes/ChannelMembersResolver.html":{}}}],["userchannelmemberships(user",{"_index":291,"title":{},"body":{"classes/ChannelMembersResolver.html":{}}}],["userdto",{"_index":1332,"title":{"classes/UserDto.html":{}},"body":{"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userid",{"_index":251,"title":{},"body":{"classes/ChannelMember.html":{},"controllers/ChannelsController.html":{},"controllers/ContactsController.html":{},"classes/ContactsResolver.html":{},"injectables/ContactsService.html":{},"classes/CreateChannelDto.html":{},"classes/CreateChannelMemberDto.html":{},"controllers/DevelopmentController.html":{},"classes/RawMessageDto.html":{}}}],["userrepository",{"_index":1382,"title":{},"body":{"injectables/UsersService.html":{}}}],["users",{"_index":280,"title":{},"body":{"classes/ChannelMembersResolver.html":{},"controllers/UsersController.html":{},"classes/UsersResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["users(@root",{"_index":304,"title":{},"body":{"classes/ChannelMembersResolver.html":{}}}],["users(user",{"_index":293,"title":{},"body":{"classes/ChannelMembersResolver.html":{}}}],["users.controller",{"_index":1359,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":1345,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/UsersResolver.html":{}}}],["users/entities/users.entity",{"_index":256,"title":{},"body":{"classes/ChannelMember.html":{},"classes/ChannelMemberDto.html":{},"classes/ChannelMembersResolver.html":{},"modules/ChannelsModule.html":{},"classes/Contact.html":{},"classes/ContactsResolver.html":{},"classes/DbKeyManager.html":{},"classes/DbKeyPair.html":{},"controllers/DevelopmentController.html":{}}}],["users/users.module",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"modules/ChannelsModule.html":{},"modules/ContactsModule.html":{},"modules/DevelopmentModule.html":{}}}],["users/users.service",{"_index":601,"title":{},"body":{"injectables/ContactsService.html":{},"controllers/DevelopmentController.html":{}}}],["userscontroller",{"_index":1336,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":1347,"title":{},"body":{"controllers/UsersController.html":{}}}],["usersmodule",{"_index":108,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ChannelsModule.html":{},"modules/ContactsModule.html":{},"modules/DevelopmentModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersresolver",{"_index":1357,"title":{"classes/UsersResolver.html":{}},"body":{"modules/UsersModule.html":{},"classes/UsersResolver.html":{},"coverage.html":{}}}],["usersservice",{"_index":567,"title":{"injectables/UsersService.html":{}},"body":{"injectables/ContactsService.html":{},"controllers/DevelopmentController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":697,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["utf",{"_index":700,"title":{},"body":{"injectables/CryptographyService.html":{},"injectables/IpfsService.html":{}}}],["util",{"_index":1526,"title":{},"body":{"injectables/Web3Service.html":{}}}],["v1",{"_index":1774,"title":{},"body":{"index.html":{}}}],["v11.9.0",{"_index":1765,"title":{},"body":{"index.html":{}}}],["v19",{"_index":1767,"title":{},"body":{"index.html":{}}}],["val",{"_index":1314,"title":{},"body":{"interfaces/StringIndexedObject.html":{},"miscellaneous/variables.html":{}}}],["valid",{"_index":1104,"title":{},"body":{"injectables/IpfsService.html":{}}}],["valid/invalid",{"_index":776,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["validates",{"_index":771,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["validatesignature",{"_index":687,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["validatesignature(signature",{"_index":769,"title":{},"body":{"injectables/CryptographyService.html":{}}}],["value",{"_index":582,"title":{},"body":{"injectables/ContactsService.html":{},"injectables/CryptographyService.html":{},"injectables/UsersService.html":{},"classes/VaultKeyManager.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":1294,"title":{},"body":{"interfaces/StringIndexedObject.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":1656,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1862,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vault",{"_index":1912,"title":{},"body":{"miscellaneous/variables.html":{}}}],["vault.ts",{"_index":1421,"title":{},"body":{"classes/VaultKeyManager.html":{},"coverage.html":{}}}],["vault.ts:17",{"_index":1434,"title":{},"body":{"classes/VaultKeyManager.html":{}}}],["vault.ts:23",{"_index":1435,"title":{},"body":{"classes/VaultKeyManager.html":{}}}],["vault.ts:34",{"_index":1437,"title":{},"body":{"classes/VaultKeyManager.html":{}}}],["vault.ts:39",{"_index":1436,"title":{},"body":{"classes/VaultKeyManager.html":{}}}],["vault.ts:43",{"_index":1429,"title":{},"body":{"classes/VaultKeyManager.html":{}}}],["vault.ts:5",{"_index":1425,"title":{},"body":{"classes/VaultKeyManager.html":{}}}],["vault.ts:8",{"_index":1433,"title":{},"body":{"classes/VaultKeyManager.html":{}}}],["vaultkeymanager",{"_index":1420,"title":{"classes/VaultKeyManager.html":{}},"body":{"classes/VaultKeyManager.html":{},"coverage.html":{}}}],["vaultkeymanager(axiosclient",{"_index":1924,"title":{},"body":{"miscellaneous/variables.html":{}}}],["vaulttoken",{"_index":1917,"title":{},"body":{"miscellaneous/variables.html":{}}}],["verify",{"_index":640,"title":{},"body":{"injectables/ContactsService.html":{}}}],["verifysignature",{"_index":844,"title":{},"body":{"classes/DbKeyManager.html":{},"controllers/DevelopmentController.html":{},"interfaces/KeyManager.html":{},"classes/VaultKeyManager.html":{}}}],["verifysignature(signature",{"_index":856,"title":{},"body":{"classes/DbKeyManager.html":{},"controllers/DevelopmentController.html":{},"interfaces/KeyManager.html":{},"classes/VaultKeyManager.html":{}}}],["verifysignaturebyid",{"_index":845,"title":{},"body":{"classes/DbKeyManager.html":{},"interfaces/KeyManager.html":{},"classes/VaultKeyManager.html":{}}}],["verifysignaturebyid(id",{"_index":858,"title":{},"body":{"classes/DbKeyManager.html":{},"interfaces/KeyManager.html":{},"classes/VaultKeyManager.html":{}}}],["version",{"_index":1769,"title":{},"body":{"index.html":{}}}],["via",{"_index":1133,"title":{},"body":{"injectables/IpfsService.html":{},"injectables/Web3Service.html":{}}}],["view",{"_index":1840,"title":{},"body":{"index.html":{}}}],["void",{"_index":1432,"title":{},"body":{"classes/VaultKeyManager.html":{}}}],["watch",{"_index":1791,"title":{},"body":{"index.html":{}}}],["way",{"_index":1506,"title":{},"body":{"injectables/Web3Service.html":{}}}],["we're",{"_index":1187,"title":{},"body":{"controllers/MessagesController.html":{}}}],["web3",{"_index":176,"title":{},"body":{"interfaces/BroadcastAccountConfig.html":{},"interfaces/EkhoWeb3Config.html":{},"interfaces/Web3Config.html":{},"controllers/Web3Controller.html":{},"injectables/Web3Service.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["web3(new",{"_index":1950,"title":{},"body":{"miscellaneous/variables.html":{}}}],["web3.chain",{"_index":1531,"title":{},"body":{"injectables/Web3Service.html":{}}}],["web3.constants",{"_index":1530,"title":{},"body":{"injectables/Web3Service.html":{}}}],["web3.controller",{"_index":1476,"title":{},"body":{"modules/Web3Module.html":{}}}],["web3.factory",{"_index":1478,"title":{},"body":{"modules/Web3Module.html":{}}}],["web3.providers.websocketprovider(rpcurl",{"_index":1951,"title":{},"body":{"miscellaneous/variables.html":{}}}],["web3.service",{"_index":1464,"title":{},"body":{"controllers/Web3Controller.html":{},"modules/Web3Module.html":{}}}],["web3.ts",{"_index":1706,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["web3.utils.fromascii(content",{"_index":1597,"title":{},"body":{"injectables/Web3Service.html":{}}}],["web3.utils.fromascii(signature",{"_index":1598,"title":{},"body":{"injectables/Web3Service.html":{}}}],["web3.utils.toutf8(decoded[0",{"_index":1564,"title":{},"body":{"injectables/Web3Service.html":{}}}],["web3.utils.toutf8(decoded[1",{"_index":1565,"title":{},"body":{"injectables/Web3Service.html":{}}}],["web3.utils.toutf8(decoded[2",{"_index":1566,"title":{},"body":{"injectables/Web3Service.html":{}}}],["web3/web3.configuration",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["web3/web3.module",{"_index":440,"title":{},"body":{"modules/ChannelsModule.html":{},"modules/MessagesModule.html":{}}}],["web3/web3.service",{"_index":1217,"title":{},"body":{"injectables/MessagesService.html":{}}}],["web3config",{"_index":192,"title":{"interfaces/Web3Config.html":{}},"body":{"interfaces/BroadcastAccountConfig.html":{},"interfaces/EkhoWeb3Config.html":{},"interfaces/Web3Config.html":{},"coverage.html":{}}}],["web3configuration",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["web3constants",{"_index":1529,"title":{},"body":{"injectables/Web3Service.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["web3controller",{"_index":1456,"title":{"controllers/Web3Controller.html":{}},"body":{"controllers/Web3Controller.html":{},"modules/Web3Module.html":{},"coverage.html":{}}}],["web3factory",{"_index":1477,"title":{},"body":{"modules/Web3Module.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["web3module",{"_index":435,"title":{"modules/Web3Module.html":{}},"body":{"modules/ChannelsModule.html":{},"modules/MessagesModule.html":{},"modules/Web3Module.html":{},"modules.html":{},"overview.html":{}}}],["web3service",{"_index":1207,"title":{"injectables/Web3Service.html":{}},"body":{"injectables/MessagesService.html":{},"controllers/Web3Controller.html":{},"modules/Web3Module.html":{},"injectables/Web3Service.html":{},"coverage.html":{},"overview.html":{}}}],["whats",{"_index":1504,"title":{},"body":{"injectables/Web3Service.html":{}}}],["where('ekhoevent.processed",{"_index":1049,"title":{},"body":{"injectables/EventsService.html":{}}}],["within",{"_index":1295,"title":{},"body":{"interfaces/StringIndexedObject.html":{},"miscellaneous/variables.html":{}}}],["working",{"_index":1768,"title":{},"body":{"index.html":{}}}],["wrap",{"_index":53,"title":{},"body":{"interfaces/AnonKeySet.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"injectables/Web3Service.html":{}}}],["write",{"_index":1835,"title":{},"body":{"index.html":{}}}],["writing",{"_index":1624,"title":{},"body":{"injectables/Web3Service.html":{}}}],["wss://no",{"_index":197,"title":{},"body":{"interfaces/BroadcastAccountConfig.html":{},"interfaces/EkhoWeb3Config.html":{},"interfaces/Web3Config.html":{},"miscellaneous/variables.html":{}}}],["x",{"_index":1922,"title":{},"body":{"miscellaneous/variables.html":{}}}],["xxx",{"_index":1882,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yes",{"_index":379,"title":{},"body":{"controllers/ChannelsController.html":{},"interfaces/KeyManager.html":{},"injectables/MessagesService.html":{}}}],["yourpublic1time",{"_index":76,"title":{},"body":{"interfaces/AnonKeySet.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{},"miscellaneous/variables.html":{}}}],["yourpubliconetimekey",{"_index":38,"title":{},"body":{"interfaces/AnonKeySet.html":{},"interfaces/SignedSharedSecret.html":{},"interfaces/TestHelper.html":{},"interfaces/TestSubject.html":{},"interfaces/TestUsers.html":{}}}],["zoom",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"modules/ChannelsModule.html":{},"modules/ContactsModule.html":{},"modules/CryptographyModule.html":{},"modules/DevelopmentModule.html":{},"modules/EventsModule.html":{},"modules/IpfsModule.html":{},"modules/KeyManagerModule.html":{},"modules/MessagesModule.html":{},"modules/UsersModule.html":{},"modules/Web3Module.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/AnonKeySet.html":{"url":"interfaces/AnonKeySet.html","title":"interface - AnonKeySet","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  AnonKeySet\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cryptography/test-helpers/cryptography.test-helpers.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        oneTimePair\n                                \n                                \n                                        signingPair\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        oneTimePair\n                                    \n                                \n                                \n                                    \n                                        oneTimePair:         CryptographyKeyPairDto\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CryptographyKeyPairDto\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        signingPair\n                                    \n                                \n                                \n                                    \n                                        signingPair:         CryptographyKeyPairDto\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CryptographyKeyPairDto\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { CryptographyService } from '../cryptography.service';\nimport { CryptographyKeyPairDto } from '../dto/cryptography-keypair.dto';\n\nexport interface AnonKeySet {\n  signingPair: CryptographyKeyPairDto;\n  oneTimePair: CryptographyKeyPairDto;\n}\n\nexport interface TestSubject extends AnonKeySet {\n  signingPair: CryptographyKeyPairDto;\n  oneTimePair: CryptographyKeyPairDto;\n  sharedSecret?: string;\n}\n\nexport interface SignedSharedSecret {\n  secret: string;\n  signature: string;\n}\n\nexport interface TestUsers {\n  alice: TestSubject;\n  bob: TestSubject;\n  trudy: TestSubject;\n}\n\nexport interface TestHelper {\n  generateAnonKeys(): Promise;\n  generateAlicenBob(): Promise;\n  generateSharedSecret(\n    yourPublicOneTimeKey: string,\n    myPrivateOneTimeKey: string,\n    myPrivateSigningKey: string,\n  ): Promise;\n  sign(secret: string, signingKey: string): Promise;\n}\n\n/**\n * Fetch a TestHelper for the CryptographyService.\n * @param service CryptographyService instance\n * @returns Object with test helper methods, which themselves wrap cryptography-service methods.\n */\nexport const getTestHelper = (service: CryptographyService): TestHelper => {\n  /**\n   * Generate an anonymous signing pair, and one-time pair.\n   * @returns Object with signingPair and oneTimePair. Each being a CryptographyPairDto\n   */\n  const generateAnonKeys = async (): Promise => {\n    const signingPair = service.generateSigningKeyPair();\n    const oneTimePair = service.generateOneUseKeyPair();\n\n    return {\n      signingPair,\n      oneTimePair,\n    };\n  };\n\n  /**\n   * Generate TestSubjects alice, bob and trudy, each with a distince signing pair and one-time pair and an undefined sharedSecret property.\n   * @returns Object with properties alice, bob and trudy. Each a TestSubject.\n   */\n  const generateAlicenBob = async (): Promise => {\n    const alice = await generateAnonKeys();\n    const bob = await generateAnonKeys();\n    const trudy = await generateAnonKeys();\n    return {\n      alice,\n      bob,\n      trudy,\n    };\n  };\n\n  /**\n   * Generate a shared secret and its signature\n   * @param yourPublic1time A 32 byte buffer containing 'my public one-time key..\n   * @param myPriv1time A 32 byte buffer containing 'your' private one-time key.\n   * @param myPrivSigning A 32 byte buffer containing 'my' private signing key.\n   * @returns Object with properties secret, and signature, being 'my' shared secret with 'you' and my signature of that secret. Each a Buffer.\n   */\n  const generateSharedSecret = async (\n    yourPublic1time: string,\n    myPriv1time: string,\n    myPrivSigning: string,\n  ): Promise => {\n    const secret = await service.generateECDHSharedSecret(yourPublic1time, myPriv1time);\n    const signature = await service.generateSignature(secret, myPrivSigning);\n\n    return { signature, secret };\n  };\n\n  const sign = async (secret: string, signingKey: string): Promise => {\n    const signature = service.generateSignature(secret, signingKey);\n    return signature;\n  };\n\n  return {\n    generateAnonKeys,\n    generateAlicenBob,\n    generateSharedSecret,\n    sign,\n  };\n};\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nChannelsModule\n\nChannelsModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nChannelsModule->AppModule\n\n\n\n\n\nContactsModule\n\nContactsModule\n\nAppModule -->\n\nContactsModule->AppModule\n\n\n\n\n\nDevelopmentModule\n\nDevelopmentModule\n\nAppModule -->\n\nDevelopmentModule->AppModule\n\n\n\n\n\nKeyManagerModule\n\nKeyManagerModule\n\nAppModule -->\n\nKeyManagerModule->AppModule\n\n\n\n\n\nMessagesModule\n\nMessagesModule\n\nAppModule -->\n\nMessagesModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            ChannelsModule\n                        \n                        \n                            ContactsModule\n                        \n                        \n                            DevelopmentModule\n                        \n                        \n                            KeyManagerModule\n                        \n                        \n                            MessagesModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { GraphQLModule } from '@nestjs/graphql';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ChannelsModule } from './channels/channels.module';\nimport { ContactsModule } from './contacts/contacts.module';\nimport { DevelopmentModule } from './development/development.module';\nimport ipfsConfiguration from './ipfs/ipfs.configuration';\nimport keyManagerConfiguration from './key-manager/key-manager.configuration';\nimport { KeyManagerModule } from './key-manager/key-manager.module';\nimport { MessagesModule } from './messages/messages.module';\nimport { UsersModule } from './users/users.module';\nimport web3Configuration from './web3/web3.configuration';\n\n@Module({\n  imports: [\n    GraphQLModule.forRoot({\n      include: [UsersModule, ContactsModule],\n      playground: true,\n      autoSchemaFile: 'schema.gql',\n    }),\n    TypeOrmModule.forRoot(),\n    ConfigModule.forRoot({\n      isGlobal: true,\n      load: [ipfsConfiguration, web3Configuration, keyManagerConfiguration],\n    }),\n    UsersModule,\n    MessagesModule,\n    ContactsModule,\n    ChannelsModule,\n    DevelopmentModule,\n    KeyManagerModule,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Block.html":{"url":"classes/Block.html","title":"class - Block","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Block\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/events/entities/blocks.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                blockevents\n                            \n                            \n                                blockNumber\n                            \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            blockevents\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         EkhoEvent[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined, {cascade: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/events/entities/blocks.entity.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            blockNumber\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/events/entities/blocks.entity.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/events/entities/blocks.entity.ts:8\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, OneToMany, PrimaryGeneratedColumn, Unique } from 'typeorm';\nimport { EkhoEvent } from './events.entity';\n\n@Entity()\n@Unique('UQ_BLOCKNUMBER', ['blockNumber'])\nexport class Block {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  blockNumber: number;\n\n  @OneToMany(\n    type => EkhoEvent,\n    event => event.block,\n    { cascade: true },\n  )\n  blockevents: EkhoEvent[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BroadcastAccountConfig.html":{"url":"interfaces/BroadcastAccountConfig.html","title":"interface - BroadcastAccountConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  BroadcastAccountConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/web3/web3.configuration.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        address\n                                \n                                \n                                        privateKey\n                                \n                                \n                                        publicKey\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        address\n                                    \n                                \n                                \n                                    \n                                        address:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        privateKey\n                                    \n                                \n                                \n                                    \n                                        privateKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        publicKey\n                                    \n                                \n                                \n                                    \n                                        publicKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export default () => ({\n  web3: {\n    chain: process.env.WEB3_CHAIN || 'ropsten',\n    hardfork: process.env.WEB3_HARDFORK || 'petersburg',\n    rpcUrl: process.env.WEB3_RPC_URL,\n    contractAddress: process.env.WEB3_CONTRACT_ADDRESS,\n    broadcastAccount: {\n      address: process.env.WEB3_BROADCAST_ACC_ADDRESS,\n      publicKey: process.env.WEB3_BROADCAST_ACC_PUBLIC_KEY,\n      privateKey: process.env.WEB3_BROADCAST_ACC_PRIVATE_KEY,\n    },\n  },\n});\n\nexport interface EkhoWeb3Config {\n  web3: Web3Config;\n}\n\ninterface Web3Config {\n  chain: string;\n  hardFork: string;\n  rpcUrl: string;\n  contractAddress: string;\n  broadcastAccount: BroadcastAccountConfig;\n}\n\ninterface BroadcastAccountConfig {\n  address: string;\n  publicKey: string;\n  privateKey: string;\n}\n\nexport const mockWeb3Config: EkhoWeb3Config = {\n  web3: {\n    chain: 'no-such-blockchain',\n    hardFork: 'skibbereen',\n    rpcUrl: 'wss://no-such-location',\n    contractAddress: '0xffffff7f',\n    broadcastAccount: {\n      address: '0x0',\n      publicKey: '0x123',\n      privateKey: '0x456',\n    },\n  },\n};\n\nexport const getMockWeb3Config = (partial?: Partial): EkhoWeb3Config => {\n  if (!partial) {\n    partial = {};\n  }\n  return { ...mockWeb3Config, ...partial };\n};\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Channel.html":{"url":"classes/Channel.html","title":"class - Channel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Channel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/channels/entities/channels.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                channelKey\n                            \n                            \n                                channelmembers\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            channelKey\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field()@Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/channels/entities/channels.entity.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            channelmembers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ChannelMember[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined)@OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/channels/entities/channels.entity.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined)@PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/channels/entities/channels.entity.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field()@Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/channels/entities/channels.entity.ts:14\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, ID, ObjectType } from 'type-graphql';\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\nimport { ChannelMember } from './channelmembers.entity';\n\n@Entity()\n@ObjectType()\nexport class Channel {\n  @Field(type => ID)\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Field()\n  @Column()\n  name: string;\n\n  @Field()\n  @Column()\n  channelKey: string;\n\n  @Field(type => [ChannelMember])\n  @OneToMany(\n    type => ChannelMember,\n    channelmember => channelmember.channel,\n  )\n  channelmembers: ChannelMember[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChannelDto.html":{"url":"classes/ChannelDto.html","title":"class - ChannelDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChannelDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/channels/dto/channel.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                channelKey\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            channelKey\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field()@ApiProperty({description: 'Channel key'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/channels/dto/channel.dto.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field()@ApiProperty({description: 'Channel Id'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/channels/dto/channel.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field()@ApiProperty({description: 'Channel name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/channels/dto/channel.dto.ts:12\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Field, InputType } from 'type-graphql';\n\n@InputType()\nexport default class ChannelDto {\n  @Field()\n  @ApiProperty({ description: 'Channel Id' })\n  id: number;\n\n  @Field()\n  @ApiProperty({ description: 'Channel name' })\n  name: string;\n\n  @Field()\n  @ApiProperty({ description: 'Channel key' })\n  channelKey: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChannelMember.html":{"url":"classes/ChannelMember.html","title":"class - ChannelMember","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChannelMember\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/channels/entities/channelmembers.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                channel\n                            \n                            \n                                channelmessages\n                            \n                            \n                                contact\n                            \n                            \n                                id\n                            \n                            \n                                messageChainKey\n                            \n                            \n                                nextChannelIdentifier\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            channel\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Channel\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined)@ManyToOne(undefined, undefined)@JoinColumn({name: 'channelId'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/channels/entities/channelmembers.entity.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            channelmessages\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ChannelMessage[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/channels/entities/channelmembers.entity.ts:43\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            contact\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Contact\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined)@ManyToOne(undefined, undefined)@JoinColumn({name: 'contactId'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/channels/entities/channelmembers.entity.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined)@PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/channels/entities/channelmembers.entity.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            messageChainKey\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field()@Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/channels/entities/channelmembers.entity.ts:47\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            nextChannelIdentifier\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field()@Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/channels/entities/channelmembers.entity.ts:51\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined)@ManyToOne(undefined, undefined)@JoinColumn({name: 'userId'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/channels/entities/channelmembers.entity.ts:28\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, ID, ObjectType } from 'type-graphql';\nimport { Column, Entity, JoinColumn, ManyToOne, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\nimport { Contact } from '../../contacts/contacts.entity';\nimport { User } from '../../users/entities/users.entity';\nimport { ChannelMessage } from './channelmessages.entity';\nimport { Channel } from './channels.entity';\n@Entity()\n@ObjectType()\nexport class ChannelMember {\n  @Field(type => ID)\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Field(type => Channel)\n  @ManyToOne(\n    type => Channel,\n    channel => channel.channelmembers,\n  )\n  @JoinColumn({ name: 'channelId' })\n  channel: Channel;\n\n  @Field(type => User)\n  @ManyToOne(\n    type => User,\n    user => user.channelmembers,\n  )\n  @JoinColumn({ name: 'userId' })\n  user: User;\n\n  @Field(type => Contact)\n  @ManyToOne(\n    type => Contact,\n    contact => contact.channelmembers,\n  )\n  @JoinColumn({ name: 'contactId' })\n  contact: Contact;\n\n  // @Field(type => [ChannelMessage])\n  @OneToMany(\n    type => ChannelMessage,\n    channelmessage => channelmessage.channelMember,\n  )\n  channelmessages: ChannelMessage[];\n\n  @Field()\n  @Column()\n  messageChainKey: string;\n\n  @Field()\n  @Column()\n  nextChannelIdentifier: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChannelMemberDto.html":{"url":"classes/ChannelMemberDto.html","title":"class - ChannelMemberDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChannelMemberDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/channels/dto/channelmember.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                channel\n                            \n                            \n                                contact\n                            \n                            \n                                id\n                            \n                            \n                                messageChainKey\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            channel\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Channel\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'Channel identifier'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/channels/dto/channelmember.dto.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            contact\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Contact\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined)@ApiProperty({description: 'Contact identifier'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/channels/dto/channelmember.dto.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined)@ApiProperty({description: 'Channel member Id'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/channels/dto/channelmember.dto.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            messageChainKey\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field()@ApiProperty({description: 'Message Chain Key'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/channels/dto/channelmember.dto.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined)@ApiProperty({description: 'User identifier'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/channels/dto/channelmember.dto.ts:22\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Field, ID, InputType } from 'type-graphql';\nimport { Contact } from '../../contacts/contacts.entity';\nimport { User } from '../../users/entities/users.entity';\nimport { Channel } from '../entities/channels.entity';\n\n@InputType()\nexport default class ChannelMemberDto {\n  @Field(type => ID)\n  @ApiProperty({ description: 'Channel member Id' })\n  id: number;\n\n  @Field()\n  @ApiProperty({ description: 'Message Chain Key' })\n  messageChainKey: string;\n\n  @ApiProperty({ description: 'Channel identifier' })\n  channel: Channel;\n\n  @Field(type => User)\n  @ApiProperty({ description: 'User identifier' })\n  user: User;\n\n  @Field(type => Contact)\n  @ApiProperty({ description: 'Contact identifier' })\n  contact: Contact;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChannelMembersResolver.html":{"url":"classes/ChannelMembersResolver.html","title":"class - ChannelMembersResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChannelMembersResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/channels/resolvers/channelmembers.resolver.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                ContactChannelMemberships\n                            \n                            \n                                    Public\n                                    Async\n                                UserChannelMemberships\n                            \n                            \n                                    Public\n                                    Async\n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(channelService: ChannelsService)\n                    \n                \n                        \n                            \n                                Defined in src/channels/resolvers/channelmembers.resolver.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        channelService\n                                                  \n                                                        \n                                                                        ChannelsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            ContactChannelMemberships\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    ContactChannelMemberships(contact: Contact)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @FieldResolver(undefined)\n                \n            \n\n            \n                \n                    Defined in src/channels/resolvers/channelmembers.resolver.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    contact\n                                    \n                                                Contact\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            UserChannelMemberships\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    UserChannelMemberships(user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @FieldResolver(undefined)\n                \n            \n\n            \n                \n                    Defined in src/channels/resolvers/channelmembers.resolver.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            users\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    users(user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @FieldResolver(undefined)\n                \n            \n\n            \n                \n                    Defined in src/channels/resolvers/channelmembers.resolver.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Resolver } from '@nestjs/graphql';\nimport { FieldResolver, Root } from 'type-graphql';\nimport { Contact } from '../../contacts/contacts.entity';\nimport { User } from '../../users/entities/users.entity';\nimport { ChannelsService } from '../channels.service';\nimport { ChannelMember } from '../entities/channelmembers.entity';\n\n@Resolver(of => ChannelMember)\nexport class ChannelMembersResolver {\n  constructor(private readonly channelService: ChannelsService) {}\n\n  @FieldResolver(returns => [ChannelMember])\n  public async users(@Root() user: User): Promise {\n    return this.channelService.findAllChannelMembersByUserId(user.id);\n  }\n\n  @FieldResolver(returns => [ChannelMember])\n  public async UserChannelMemberships(@Root() user: User): Promise {\n    return this.channelService.findAllChannelMembersByUserId(user.id);\n  }\n\n  @FieldResolver(returns => [ChannelMember])\n  public async ContactChannelMemberships(@Root() contact: Contact): Promise {\n    return this.channelService.findAllChannelMembersByContactId(contact.id);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChannelMessage.html":{"url":"classes/ChannelMessage.html","title":"class - ChannelMessage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChannelMessage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/channels/entities/channelmessages.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                channelMember\n                            \n                            \n                                id\n                            \n                            \n                                messageContents\n                            \n                            \n                                nonce\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            channelMember\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ChannelMember\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined)@ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/channels/entities/channelmessages.entity.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined)@PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/channels/entities/channelmessages.entity.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            messageContents\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field()@Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/channels/entities/channelmessages.entity.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            nonce\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({default: 0})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/channels/entities/channelmessages.entity.ts:24\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, ID, ObjectType } from 'type-graphql';\nimport { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { ChannelMember } from './channelmembers.entity';\n\n@Entity()\n@ObjectType()\nexport class ChannelMessage {\n  @Field(type => ID)\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Field(type => ChannelMember)\n  @ManyToOne(\n    type => ChannelMember,\n    channelMember => channelMember.channelmessages,\n  )\n  channelMember: ChannelMember;\n\n  @Field()\n  @Column()\n  messageContents: string;\n\n  @Column({ default: 0 })\n  nonce: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChannelMessageDto.html":{"url":"classes/ChannelMessageDto.html","title":"class - ChannelMessageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChannelMessageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/channels/dto/channelmessage.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                channelMemberId\n                            \n                            \n                                messageContents\n                            \n                            \n                                nonce\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            channelMemberId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'Channel member identifier'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/channels/dto/channelmessage.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            messageContents\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'Message contents'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/channels/dto/channelmessage.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            nonce\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'Message nonce'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/channels/dto/channelmessage.dto.ts:11\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport default class ChannelMessageDto {\n  @ApiProperty({ description: 'Message contents' })\n  messageContents: string;\n\n  @ApiProperty({ description: 'Channel member identifier' })\n  channelMemberId: string;\n\n  @ApiProperty({ description: 'Message nonce' })\n  nonce: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChannelResolver.html":{"url":"classes/ChannelResolver.html","title":"class - ChannelResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChannelResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/channels/resolvers/channel.resolver.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                channelmembers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(channelService: ChannelsService)\n                    \n                \n                        \n                            \n                                Defined in src/channels/resolvers/channel.resolver.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        channelService\n                                                  \n                                                        \n                                                                        ChannelsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            channelmembers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    channelmembers(channel: Channel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @FieldResolver(undefined)\n                \n            \n\n            \n                \n                    Defined in src/channels/resolvers/channel.resolver.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    channel\n                                    \n                                                Channel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Resolver } from '@nestjs/graphql';\nimport { FieldResolver, Root } from 'type-graphql';\nimport { ChannelsService } from '../channels.service';\nimport { ChannelMember } from '../entities/channelmembers.entity';\nimport { Channel } from '../entities/channels.entity';\n\n@Resolver(of => Channel)\nexport class ChannelResolver {\n  constructor(private readonly channelService: ChannelsService) {}\n\n  // @Mutation(returns => ID)\n  // public async createChannel(@Args('data') channel: Channel): Promise {\n  //   return this.channelService.createChannel(channel);\n  // }\n\n  // @Query(returns => Channel)\n  // public async channel(@Args('data') channel: Channel): Promise {\n  //   return this.channelService.findOneChannel({ where: channel })\n  // }\n\n  @FieldResolver(returns => [ChannelMember])\n  async channelmembers(@Root() channel: Channel): Promise {\n    return this.channelService.findAllChannelMembersByChannelId(channel.id);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ChannelsController.html":{"url":"controllers/ChannelsController.html","title":"controller - ChannelsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ChannelsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/channels/channels.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                channels\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createChannel\n                            \n                            \n                                    Async\n                                createChannelMessage\n                            \n                            \n                                    Async\n                                findAllChannelMembers\n                            \n                            \n                                    Async\n                                findChannelById\n                            \n                            \n                                    Async\n                                findChannelMemberById\n                            \n                            \n                                    Async\n                                findChannelMessage\n                            \n                            \n                                    Async\n                                getAllChannels\n                            \n                            \n                                    Async\n                                processAllEvents\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createChannel\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createChannel(channel: CreateChannelDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/channels/channels.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    channel\n                                    \n                                                CreateChannelDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createChannelMessage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createChannelMessage(channelMessage: RawMessageDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('message')\n                \n            \n\n            \n                \n                    Defined in src/channels/channels.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    channelMessage\n                                    \n                                                RawMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAllChannelMembers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllChannelMembers()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('member')\n                \n            \n\n            \n                \n                    Defined in src/channels/channels.controller.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findChannelById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findChannelById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/channels/channels.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findChannelMemberById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findChannelMemberById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('member/:id')\n                \n            \n\n            \n                \n                    Defined in src/channels/channels.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findChannelMessage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findChannelMessage(userId?: number, contactId?: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiQuery({name: 'userId', required: false})@ApiQuery({name: 'contactId', required: false})@Get('message')\n                \n            \n\n            \n                \n                    Defined in src/channels/channels.controller.ts:74\n                \n            \n\n\n            \n                \n                    Retrieves channel messages. Supports query filters. No filters will return all messages\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        filter to only return messages sent by user ID\n\n                                    \n                                \n                                \n                                    contactId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        filter to return only return messages received from contact ID\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getAllChannels\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllChannels()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/channels/channels.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            processAllEvents\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processAllEvents()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('refresh')\n                \n            \n\n            \n                \n                    Defined in src/channels/channels.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Post, Query } from '@nestjs/common';\nimport { ApiQuery } from '@nestjs/swagger';\nimport { ChannelsService } from './channels.service';\nimport CreateChannelDto from './dto/create-channel.dto';\nimport EncodedMessageDto from './dto/encodedmessage.dto';\nimport ProcessReport from './dto/processreport.dto';\nimport RawMessageDto from './dto/rawmessage.dto';\nimport { ChannelMember } from './entities/channelmembers.entity';\nimport { ChannelMessage } from './entities/channelmessages.entity';\nimport { Channel } from './entities/channels.entity';\n\n@Controller('channels')\nexport class ChannelsController {\n  constructor(private readonly channelService: ChannelsService) {}\n\n  // functional methods section\n\n  // Creates a channel and members\n  @Post()\n  async createChannel(@Body() channel: CreateChannelDto): Promise {\n    return this.channelService.createChannelAndMembers(channel);\n  }\n\n  // Creates a channel message\n  @Post('message')\n  async createChannelMessage(@Body() channelMessage: RawMessageDto): Promise {\n    return this.channelService.createChannelMessage(channelMessage);\n  }\n\n  // process all received blockchain events\n  @Get('refresh')\n  async processAllEvents(): Promise {\n    return this.channelService.processAllPendingEvents();\n  }\n\n  // query methods section\n\n  // TODO pass and filter by userid\n  // Returns all channels (including channel members)\n  @Get()\n  async getAllChannels(): Promise {\n    return this.channelService.findAllChannels();\n  }\n\n  // TODO pass and filter by userid\n  // Gets channel by id\n  @Get()\n  async findChannelById(@Query('id') id: number): Promise {\n    return this.channelService.findChannelById(id);\n  }\n\n  // TODO pass and filter by userid\n  // gets channel member by id\n  @Get('member/:id')\n  async findChannelMemberById(@Param('id') id: number): Promise {\n    return this.channelService.findChannelMemberById(id);\n  }\n  // TODO pass and filter by userid\n  // gets all channel members\n  @Get('member')\n  async findAllChannelMembers(): Promise {\n    return this.channelService.findAllChannelMembers();\n  }\n\n  // Retrieves a channel messages\n  /**\n   * Retrieves channel messages. Supports query filters. No filters will return all messages\n   * @param userId filter to only return messages sent by user ID\n   * @param contactId filter to return only return messages received from contact ID\n   */\n  @ApiQuery({ name: 'userId', required: false })\n  @ApiQuery({ name: 'contactId', required: false })\n  @Get('message')\n  async findChannelMessage(\n    @Query('userId') userId?: number,\n    @Query('contactId') contactId?: number,\n  ): Promise {\n    if (userId && contactId) {\n      throw Error('Only one filter can be specified');\n    }\n    if (userId) {\n      return this.channelService.findChannelMessageByUserId(contactId);\n    }\n    if (contactId) {\n      return this.channelService.findChannelMessageByContactId(contactId);\n    }\n    return this.channelService.findAllChannelMessages();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ChannelsModule.html":{"url":"modules/ChannelsModule.html","title":"module - ChannelsModule","body":"\n                   \n\n\n\n\n    Modules\n    ChannelsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ChannelsModule\n\n\n\ncluster_ChannelsModule_imports\n\n\n\ncluster_ChannelsModule_exports\n\n\n\ncluster_ChannelsModule_providers\n\n\n\n\nContactsModule\n\nContactsModule\n\n\n\nChannelsModule\n\nChannelsModule\n\nChannelsModule -->\n\nContactsModule->ChannelsModule\n\n\n\n\n\nCryptographyModule\n\nCryptographyModule\n\nChannelsModule -->\n\nCryptographyModule->ChannelsModule\n\n\n\n\n\nEventsModule\n\nEventsModule\n\nChannelsModule -->\n\nEventsModule->ChannelsModule\n\n\n\n\n\nIpfsModule\n\nIpfsModule\n\nChannelsModule -->\n\nIpfsModule->ChannelsModule\n\n\n\n\n\nKeyManagerModule\n\nKeyManagerModule\n\nChannelsModule -->\n\nKeyManagerModule->ChannelsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nChannelsModule -->\n\nUsersModule->ChannelsModule\n\n\n\n\n\nWeb3Module\n\nWeb3Module\n\nChannelsModule -->\n\nWeb3Module->ChannelsModule\n\n\n\n\n\nChannelsService \n\nChannelsService \n\nChannelsService  -->\n\nChannelsModule->ChannelsService \n\n\n\n\n\nChannelsService\n\nChannelsService\n\nChannelsModule -->\n\nChannelsService->ChannelsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/channels/channels.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ChannelsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ChannelsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ContactsModule\n                        \n                        \n                            CryptographyModule\n                        \n                        \n                            EventsModule\n                        \n                        \n                            IpfsModule\n                        \n                        \n                            KeyManagerModule\n                        \n                        \n                            UsersModule\n                        \n                        \n                            Web3Module\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ChannelsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Contact } from '../contacts/contacts.entity';\nimport { ContactsModule } from '../contacts/contacts.module';\nimport { CryptographyModule } from '../cryptography/cryptography.module';\nimport { EventsModule } from '../events/events.module';\nimport { IpfsModule } from '../ipfs/ipfs.module';\nimport { KeyManagerModule } from '../key-manager/key-manager.module';\nimport { User } from '../users/entities/users.entity';\nimport { UsersModule } from '../users/users.module';\nimport { Web3Module } from '../web3/web3.module';\nimport { ChannelsController } from './channels.controller';\nimport { ChannelsService } from './channels.service';\nimport { ChannelMember } from './entities/channelmembers.entity';\nimport { ChannelMessage } from './entities/channelmessages.entity';\nimport { Channel } from './entities/channels.entity';\nimport { ChannelResolver } from './resolvers/channel.resolver';\nimport { ChannelMembersResolver } from './resolvers/channelmembers.resolver';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Channel, ChannelMember, ChannelMessage, User, Contact]),\n    CryptographyModule,\n    UsersModule,\n    ContactsModule,\n    IpfsModule,\n    Web3Module,\n    EventsModule,\n    KeyManagerModule,\n  ],\n  exports: [ChannelsService],\n  providers: [ChannelsService, ChannelResolver, ChannelMembersResolver],\n  controllers: [ChannelsController],\n})\nexport class ChannelsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Contact.html":{"url":"classes/Contact.html","title":"class - Contact","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Contact\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contacts/contacts.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                channelmembers\n                            \n                            \n                                handshakePrivateKey\n                            \n                            \n                                handshakePublicKey\n                            \n                            \n                                id\n                            \n                            \n                                identifier\n                            \n                            \n                                name\n                            \n                            \n                                    Optional\n                                oneuseKey\n                            \n                            \n                                    Optional\n                                signature\n                            \n                            \n                                    Optional\n                                signingKey\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            channelmembers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ChannelMember[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {nullable: true})@OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/contacts/contacts.entity.ts:48\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            handshakePrivateKey\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field()@Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/contacts/contacts.entity.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            handshakePublicKey\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field()@Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/contacts/contacts.entity.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined)@PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/contacts/contacts.entity.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            identifier\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field()@Column()@Generated('uuid')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/contacts/contacts.entity.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field()@Column({length: 500})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/contacts/contacts.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            oneuseKey\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field({nullable: true})@Column({nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/contacts/contacts.entity.ts:37\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            signature\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field({nullable: true})@Column({nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/contacts/contacts.entity.ts:41\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            signingKey\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field({nullable: true})@Column({nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/contacts/contacts.entity.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined)@ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/contacts/contacts.entity.ts:55\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, ID, ObjectType } from 'type-graphql';\nimport { Column, Entity, Generated, ManyToOne, OneToMany, PrimaryGeneratedColumn, Unique } from 'typeorm';\nimport { ChannelMember } from '../channels/entities/channelmembers.entity';\nimport { User } from '../users/entities/users.entity';\n\n@Entity()\n@ObjectType()\n@Unique('UQ_CONTACT_USER_NAME', ['user', 'name'])\nexport class Contact {\n  @Field(type => ID)\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Field()\n  @Column({ length: 500 })\n  name: string;\n\n  @Field()\n  @Column()\n  @Generated('uuid')\n  identifier: string;\n\n  @Field()\n  @Column()\n  handshakePrivateKey: string;\n\n  @Field()\n  @Column()\n  handshakePublicKey: string;\n\n  @Field({ nullable: true })\n  @Column({ nullable: true })\n  signingKey?: string;\n\n  @Field({ nullable: true })\n  @Column({ nullable: true })\n  oneuseKey?: string;\n\n  @Field({ nullable: true })\n  @Column({ nullable: true })\n  signature?: string;\n\n  @Field(type => [ChannelMember], { nullable: true })\n  @OneToMany(\n    type => ChannelMember,\n    channelmember => channelmember.contact,\n  )\n  channelmembers: ChannelMember[];\n\n  @Field(type => User)\n  @ManyToOne(\n    type => User,\n    user => user.contacts,\n  )\n  user: User;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ContactDto.html":{"url":"classes/ContactDto.html","title":"class - ContactDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ContactDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contacts/dto/contact.dto.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Partial\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/contacts/dto/contact.dto.ts:7\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, InputType } from 'type-graphql';\nimport { Contact } from '../contacts.entity';\n\n@InputType({ description: 'Contact name' })\nexport default class ContactDto implements Partial {\n  @Field()\n  name: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ContactHandshakeDto.html":{"url":"classes/ContactHandshakeDto.html","title":"class - ContactHandshakeDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ContactHandshakeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contacts/dto/contact-handshake.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                from\n                            \n                            \n                                identifier\n                            \n                            \n                                oneuseKey\n                            \n                            \n                                signature\n                            \n                            \n                                signingKey\n                            \n                            \n                                to\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            from\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/contacts/dto/contact-handshake.dto.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            identifier\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/contacts/dto/contact-handshake.dto.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            oneuseKey\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/contacts/dto/contact-handshake.dto.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            signature\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/contacts/dto/contact-handshake.dto.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            signingKey\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/contacts/dto/contact-handshake.dto.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            to\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/contacts/dto/contact-handshake.dto.ts:9\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, InputType } from 'type-graphql';\n\n@InputType()\nexport default class ContactHandshakeDto {\n  @Field()\n  from: string;\n\n  @Field()\n  to: string;\n\n  @Field()\n  identifier: string;\n\n  @Field()\n  oneuseKey: string;\n\n  @Field()\n  signingKey: string;\n\n  @Field()\n  signature: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ContactsController.html":{"url":"controllers/ContactsController.html","title":"controller - ContactsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ContactsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contacts/contacts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                contacts\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                acceptInitHandshake\n                            \n                            \n                                    Async\n                                acceptReplyHandshake\n                            \n                            \n                                    Async\n                                findContactByUser\n                            \n                            \n                                    Async\n                                generateReplyHandshake\n                            \n                            \n                                    Async\n                                getContactsForUser\n                            \n                            \n                                    Async\n                                initHandshake\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            acceptInitHandshake\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    acceptInitHandshake(userId: number, contactName: string, initHandshake: ContactHandshakeDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('accept-init-handshake/:userId/:contactName')\n                \n            \n\n            \n                \n                    Defined in src/contacts/contacts.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    contactName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    initHandshake\n                                    \n                                                ContactHandshakeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            acceptReplyHandshake\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    acceptReplyHandshake(userId: number, contactName: string, replyHandshake: ContactHandshakeDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('accept-reply-handshake/:userId/:contactName')\n                \n            \n\n            \n                \n                    Defined in src/contacts/contacts.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    contactName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    replyHandshake\n                                    \n                                                ContactHandshakeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findContactByUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findContactByUser(userId: number, contactId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':userId/:contactId')\n                \n            \n\n            \n                \n                    Defined in src/contacts/contacts.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    contactId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            generateReplyHandshake\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    generateReplyHandshake(userId: number, contactName: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('generate-reply-handshake/:userId/:contactName')\n                \n            \n\n            \n                \n                    Defined in src/contacts/contacts.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    contactName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getContactsForUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getContactsForUser(userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':userId')\n                \n            \n\n            \n                \n                    Defined in src/contacts/contacts.controller.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            initHandshake\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initHandshake(userId: number, contactName: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('generate-init-handshake/:userId/:contactName')\n                \n            \n\n            \n                \n                    Defined in src/contacts/contacts.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    contactName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Post } from '@nestjs/common';\nimport { Contact } from './contacts.entity';\nimport { ContactsService } from './contacts.service';\nimport ContactHandshakeDto from './dto/contact-handshake.dto';\nimport ContactDto from './dto/contact.dto';\n\n@Controller('contacts')\nexport class ContactsController {\n  constructor(private readonly contactsService: ContactsService) {}\n\n  @Get(':userId')\n  async getContactsForUser(@Param('userId') userId: number): Promise {\n    return this.contactsService.getByUser(userId);\n  }\n  @Get(':userId/:contactId')\n  async findContactByUser(@Param('userId') userId: number, @Param('contactId') contactId: number): Promise {\n    return this.contactsService.findOneContact(userId, contactId);\n  }\n\n  @Post('generate-init-handshake/:userId/:contactName')\n  async initHandshake(\n    @Param('userId') userId: number,\n    @Param('contactName') contactName: string,\n  ): Promise {\n    return this.contactsService.initHandshake(userId, contactName);\n  }\n\n  @Post('accept-init-handshake/:userId/:contactName')\n  async acceptInitHandshake(\n    @Param('userId') userId: number,\n    @Param('contactName') contactName: string,\n    @Body() initHandshake: ContactHandshakeDto,\n  ): Promise {\n    await this.contactsService.acceptInitHandshake(userId, contactName, initHandshake);\n  }\n\n  @Post('generate-reply-handshake/:userId/:contactName')\n  async generateReplyHandshake(\n    @Param('userId') userId: number,\n    @Param('contactName') contactName: string,\n  ): Promise {\n    return this.contactsService.replyHandshake(userId, contactName);\n  }\n\n  @Post('accept-reply-handshake/:userId/:contactName')\n  async acceptReplyHandshake(\n    @Param('userId') userId: number,\n    @Param('contactName') contactName: string,\n    @Body() replyHandshake: ContactHandshakeDto,\n  ): Promise {\n    await this.contactsService.acceptReplyHandshake(userId, contactName, replyHandshake);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ContactsModule.html":{"url":"modules/ContactsModule.html","title":"module - ContactsModule","body":"\n                   \n\n\n\n\n    Modules\n    ContactsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ContactsModule\n\n\n\ncluster_ContactsModule_imports\n\n\n\ncluster_ContactsModule_exports\n\n\n\ncluster_ContactsModule_providers\n\n\n\n\nCryptographyModule\n\nCryptographyModule\n\n\n\nContactsModule\n\nContactsModule\n\nContactsModule -->\n\nCryptographyModule->ContactsModule\n\n\n\n\n\nKeyManagerModule\n\nKeyManagerModule\n\nContactsModule -->\n\nKeyManagerModule->ContactsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nContactsModule -->\n\nUsersModule->ContactsModule\n\n\n\n\n\nContactsService \n\nContactsService \n\nContactsService  -->\n\nContactsModule->ContactsService \n\n\n\n\n\nContactsService\n\nContactsService\n\nContactsModule -->\n\nContactsService->ContactsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/contacts/contacts.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ContactsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ContactsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptographyModule\n                        \n                        \n                            KeyManagerModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ContactsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { CryptographyModule } from '../cryptography/cryptography.module';\nimport { KeyManagerModule } from '../key-manager/key-manager.module';\nimport { UsersModule } from '../users/users.module';\nimport { ContactsController } from './contacts.controller';\nimport { Contact } from './contacts.entity';\nimport { ContactsService } from './contacts.service';\nimport { ContactsResolver } from './resolvers/contacts.resolver';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Contact]), UsersModule, CryptographyModule, KeyManagerModule],\n  exports: [ContactsService],\n  providers: [ContactsService, ContactsResolver],\n  controllers: [ContactsController],\n})\nexport class ContactsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ContactsResolver.html":{"url":"classes/ContactsResolver.html","title":"class - ContactsResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ContactsResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contacts/resolvers/contacts.resolver.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                contacts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(contactsService: ContactsService)\n                    \n                \n                        \n                            \n                                Defined in src/contacts/resolvers/contacts.resolver.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        contactsService\n                                                  \n                                                        \n                                                                        ContactsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            contacts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    contacts(user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @FieldResolver(undefined)\n                \n            \n\n            \n                \n                    Defined in src/contacts/resolvers/contacts.resolver.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Resolver } from '@nestjs/graphql';\nimport { FieldResolver, Root } from 'type-graphql';\nimport { User } from '../../users/entities/users.entity';\nimport { Contact } from '../contacts.entity';\nimport { ContactsService } from '../contacts.service';\n\n@Resolver(of => Contact)\nexport class ContactsResolver {\n  constructor(private readonly contactsService: ContactsService) {}\n\n  @FieldResolver(returns => [Contact])\n  public async contacts(@Root() user: User): Promise {\n    return this.contactsService.getByUser(user.id);\n  }\n\n  // @Mutation(returns => ContactHandshakeDto)\n  // public async initHandshake(\n  //   @Arg('userId') userId: number,\n  //   @Arg('contactName') contactName: string): Promise {\n  //     return this.contactsService.initHandshake(userId, contactName);\n  // }\n\n  // @Mutation(returns => ContactHandshakeDto)\n  // public async acceptInitHandshake(\n  //   @Arg('userId') userId: number,\n  //   @Arg('contactName') contactName: string): Promise {\n  //     return this.contactsService.initHandshake(userId, contactName);\n  // }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ContactsService.html":{"url":"injectables/ContactsService.html","title":"injectable - ContactsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ContactsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contacts/contacts.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                acceptInitHandshake\n                            \n                            \n                                    Async\n                                acceptReplyHandshake\n                            \n                            \n                                    Async\n                                createContact\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findOneContact\n                            \n                            \n                                    Async\n                                findOneOrCreate\n                            \n                            \n                                    Private\n                                    Async\n                                generateHandshake\n                            \n                            \n                                    Async\n                                getByUser\n                            \n                            \n                                    Async\n                                initHandshake\n                            \n                            \n                                    Private\n                                    Async\n                                receiveHandshake\n                            \n                            \n                                    Async\n                                replyHandshake\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(contactsRepository: Repository, cryptographyService: CryptographyService, usersService: UsersService, keyManager: KeyManager)\n                    \n                \n                        \n                            \n                                Defined in src/contacts/contacts.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        contactsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptographyService\n                                                  \n                                                        \n                                                                        CryptographyService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        keyManager\n                                                  \n                                                        \n                                                                        KeyManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            acceptInitHandshake\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    acceptInitHandshake(userId: number, contactName: string, handshake: ContactHandshakeDto)\n                \n            \n\n\n            \n                \n                    Defined in src/contacts/contacts.service.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    contactName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    handshake\n                                    \n                                                ContactHandshakeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            acceptReplyHandshake\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    acceptReplyHandshake(userId: number, name: string, handshake: ContactHandshakeDto)\n                \n            \n\n\n            \n                \n                    Defined in src/contacts/contacts.service.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    handshake\n                                    \n                                                ContactHandshakeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createContact\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createContact(userId: number, name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/contacts/contacts.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/contacts/contacts.service.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/contacts/contacts.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(userId: number, name: string, orFail)\n                \n            \n\n\n            \n                \n                    Defined in src/contacts/contacts.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    orFail\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneContact\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneContact(userId: number, contactId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/contacts/contacts.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    contactId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneOrCreate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneOrCreate(userId: number, name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/contacts/contacts.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            generateHandshake\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    generateHandshake(userId: number, contact: Contact)\n                \n            \n\n\n            \n                \n                    Defined in src/contacts/contacts.service.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    contact\n                                    \n                                                Contact\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getByUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getByUser(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/contacts/contacts.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            initHandshake\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initHandshake(userId: number, contactName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/contacts/contacts.service.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    contactName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            receiveHandshake\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    receiveHandshake(contact: Contact, handshake: ContactHandshakeDto)\n                \n            \n\n\n            \n                \n                    Defined in src/contacts/contacts.service.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    contact\n                                    \n                                                Contact\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    handshake\n                                    \n                                                ContactHandshakeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            replyHandshake\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    replyHandshake(userId: number, name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/contacts/contacts.service.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CryptographyService } from '../cryptography/cryptography.service';\nimport { CryptographyKeyPairDto } from '../cryptography/dto/cryptography-keypair.dto';\nimport { KeyManager } from '../key-manager/key-manager.interface';\nimport { UsersService } from '../users/users.service';\nimport { Contact } from './contacts.entity';\nimport ContactHandshakeDto from './dto/contact-handshake.dto';\n\n@Injectable()\nexport class ContactsService {\n  constructor(\n    @InjectRepository(Contact)\n    private readonly contactsRepository: Repository,\n    private readonly cryptographyService: CryptographyService,\n    private readonly usersService: UsersService,\n    @Inject('KeyManager')\n    private readonly keyManager: KeyManager,\n  ) {}\n\n  async createContact(userId: number, name: string): Promise {\n    const user = await this.usersService.findById(userId, true);\n    const oneUseKeyPair: CryptographyKeyPairDto = this.cryptographyService.generateOneUseKeyPair();\n    const contact = new Contact();\n    contact.name = name;\n    contact.user = user;\n    contact.handshakePrivateKey = oneUseKeyPair.privateKey;\n    contact.handshakePublicKey = oneUseKeyPair.publicKey;\n    return this.contactsRepository.save(contact);\n  }\n\n  async getByUser(userId: number): Promise {\n    return this.contactsRepository.find({\n      select: ['name'],\n      where: { user: { id: userId } },\n    });\n  }\n\n  async findOne(userId: number, name: string, orFail = false): Promise {\n    if (orFail) {\n      return this.contactsRepository.findOneOrFail({ where: { user: { id: userId }, name } });\n    } else {\n      return this.contactsRepository.findOne({ where: { user: { id: userId }, name } });\n    }\n  }\n\n  async findAll(): Promise {\n    return this.contactsRepository.find();\n  }\n\n  async findOneContact(userId: number, contactId: number): Promise {\n    return this.contactsRepository.findOneOrFail({\n      where: { id: contactId, user: userId },\n    });\n  }\n\n  async findOneOrCreate(userId: number, name: string): Promise {\n    const contact = await this.contactsRepository.findOne({ where: { user: { id: userId }, name } });\n    if (contact) {\n      return contact;\n    } else {\n      return this.createContact(userId, name);\n    }\n  }\n\n  async delete(name: string): Promise {\n    await this.contactsRepository.delete({ name });\n  }\n\n  async initHandshake(userId: number, contactName: string): Promise {\n    const contact = await this.findOneOrCreate(userId, contactName);\n    return this.generateHandshake(userId, contact);\n  }\n\n  async acceptInitHandshake(userId: number, contactName: string, handshake: ContactHandshakeDto): Promise {\n    const contact = await this.findOneOrCreate(userId, contactName);\n    await this.receiveHandshake(contact, handshake);\n  }\n\n  async replyHandshake(userId: number, name: string): Promise {\n    const contact = await this.contactsRepository.findOneOrFail({ where: { user: { id: userId }, name } });\n    return this.generateHandshake(userId, contact);\n  }\n\n  async acceptReplyHandshake(userId: number, name: string, handshake: ContactHandshakeDto): Promise {\n    const contact = await this.contactsRepository.findOneOrFail({ where: { user: { id: userId }, name } });\n    await this.receiveHandshake(contact, handshake);\n  }\n\n  private async generateHandshake(userId: number, contact: Contact): Promise {\n    const publicSigningKey = await this.usersService.getPublicKey(userId);\n    const signature = await this.usersService.sign(userId, contact.handshakePublicKey);\n    const contactHandshake = new ContactHandshakeDto();\n    contactHandshake.identifier = contact.identifier;\n    contactHandshake.oneuseKey = contact.handshakePublicKey;\n    contactHandshake.signingKey = publicSigningKey;\n    contactHandshake.signature = signature;\n\n    return contactHandshake;\n  }\n\n  private async receiveHandshake(contact: Contact, handshake: ContactHandshakeDto): Promise {\n    contact.identifier = handshake.identifier;\n    contact.signingKey = handshake.signingKey;\n    contact.oneuseKey = handshake.oneuseKey;\n    contact.signature = handshake.signature;\n\n    // verify signature\n    if (!this.keyManager.verifySignature(contact.signature, contact.oneuseKey, contact.signingKey)) {\n      throw Error('signature mismatch');\n    }\n\n    await this.contactsRepository.save(contact);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateChannelDto.html":{"url":"classes/CreateChannelDto.html","title":"class - CreateChannelDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateChannelDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/channels/dto/create-channel.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                contactId\n                            \n                            \n                                name\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            contactId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'Contact name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/channels/dto/create-channel.dto.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field()@ApiProperty({description: 'Channel name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/channels/dto/create-channel.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'Channel creator'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/channels/dto/create-channel.dto.ts:10\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Field, InputType } from 'type-graphql';\n\n@InputType()\nexport default class CreateChannelDto {\n  @Field()\n  @ApiProperty({ description: 'Channel name' })\n  name: string;\n  @ApiProperty({ description: 'Channel creator' })\n  userId: number;\n  @ApiProperty({ description: 'Contact name' })\n  contactId: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateChannelMemberDto.html":{"url":"classes/CreateChannelMemberDto.html","title":"class - CreateChannelMemberDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateChannelMemberDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/channels/dto/create-channelmember.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                channelId\n                            \n                            \n                                contactId\n                            \n                            \n                                messageChainKey\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            channelId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'Channel identifier'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/channels/dto/create-channelmember.dto.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            contactId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field()@ApiProperty({description: 'Contact identifier'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/channels/dto/create-channelmember.dto.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            messageChainKey\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field()@ApiProperty({description: 'Message Chain Key'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/channels/dto/create-channelmember.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field()@ApiProperty({description: 'User identifier'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/channels/dto/create-channelmember.dto.ts:15\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Field, InputType } from 'type-graphql';\n\n@InputType()\nexport default class CreateChannelMemberDto {\n  @Field()\n  @ApiProperty({ description: 'Message Chain Key' })\n  messageChainKey: string;\n\n  @ApiProperty({ description: 'Channel identifier' })\n  channelId: number;\n\n  @Field()\n  @ApiProperty({ description: 'User identifier' })\n  userId: number;\n\n  @Field()\n  @ApiProperty({ description: 'Contact identifier' })\n  contactId: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateChannelMessageDto.html":{"url":"classes/CreateChannelMessageDto.html","title":"class - CreateChannelMessageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateChannelMessageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/channels/dto/create-channelmessage.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                channelMemberId\n                            \n                            \n                                messageContents\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            channelMemberId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'Channel member identifier'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/channels/dto/create-channelmessage.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            messageContents\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'Message contents'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/channels/dto/create-channelmessage.dto.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport default class CreateChannelMessageDto {\n  @ApiProperty({ description: 'Message contents' })\n  messageContents: string;\n\n  @ApiProperty({ description: 'Channel member identifier' })\n  channelMemberId: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Partial\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field()@ApiProperty({description: 'User name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:9\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Field, InputType } from 'type-graphql';\nimport { User } from '../entities/users.entity';\n\n@InputType({ description: 'New user name' })\nexport default class CreateUserDto implements Partial {\n  @Field()\n  @ApiProperty({ description: 'User name' })\n  name: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CryptographyKeyPairDto.html":{"url":"classes/CryptographyKeyPairDto.html","title":"class - CryptographyKeyPairDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CryptographyKeyPairDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cryptography/dto/cryptography-keypair.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                privateKey\n                            \n                            \n                                publicKey\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            privateKey\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/cryptography/dto/cryptography-keypair.dto.ts:3\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            publicKey\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/cryptography/dto/cryptography-keypair.dto.ts:2\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CryptographyKeyPairDto {\n  publicKey: string;\n  privateKey: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CryptographyModule.html":{"url":"modules/CryptographyModule.html","title":"module - CryptographyModule","body":"\n                   \n\n\n\n\n    Modules\n    CryptographyModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CryptographyModule\n\n\n\ncluster_CryptographyModule_exports\n\n\n\ncluster_CryptographyModule_providers\n\n\n\n\nCryptographyService \n\nCryptographyService \n\n\n\nCryptographyModule\n\nCryptographyModule\n\nCryptographyService  -->\n\nCryptographyModule->CryptographyService \n\n\n\n\n\nCryptographyService\n\nCryptographyService\n\nCryptographyModule -->\n\nCryptographyService->CryptographyModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/cryptography/cryptography.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CryptographyService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CryptographyService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CryptographyService } from './cryptography.service';\n\n@Module({\n  providers: [CryptographyService],\n  exports: [CryptographyService],\n})\nexport class CryptographyModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CryptographyService.html":{"url":"injectables/CryptographyService.html","title":"injectable - CryptographyService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CryptographyService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cryptography/cryptography.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                decrypt\n                            \n                            \n                                deriveSymmetricKeyfromSecret\n                            \n                            \n                                encrypt\n                            \n                            \n                                generateECDHSharedSecret\n                            \n                            \n                                generateNonceBuffer\n                            \n                            \n                                generateOneUseKeyPair\n                            \n                            \n                                generateRandomBytes\n                            \n                            \n                                generateRandomNumber\n                            \n                            \n                                generateSHA256Hash\n                            \n                            \n                                generateSignature\n                            \n                            \n                                generateSigningKeyPair\n                            \n                            \n                                getRandomisedBuffer\n                            \n                            \n                                getZeroedBuffer\n                            \n                            \n                                validateSignature\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            decrypt\n                        \n                        \n                    \n                \n            \n            \n                \ndecrypt(dataStr: string, nonceNumber: number, keyStr: string, dataEncoding: string, encryptedEncoding: BufferEncoding)\n                \n            \n\n\n            \n                \n                    Defined in src/cryptography/cryptography.service.ts:165\n                \n            \n\n\n            \n                \n                    Decrypts data using a symmetric key and nonce\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    dataStr\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    nonceNumber\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    keyStr\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    dataEncoding\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'utf-8'\n                                    \n\n                                \n                                \n                                    encryptedEncoding\n                                    \n                                            BufferEncoding\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'hex'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        buffer containing decrypted data\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deriveSymmetricKeyfromSecret\n                        \n                        \n                    \n                \n            \n            \n                \nderiveSymmetricKeyfromSecret(secret: string, nonce: number, context: string)\n                \n            \n\n\n            \n                \n                    Defined in src/cryptography/cryptography.service.ts:112\n                \n            \n\n\n            \n                \n                    Derives a symmetric key from secret\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    secret\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        input buffer containing key derivation secret\n\n                                    \n                                \n                                \n                                    nonce\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        number used once - must not be reused or secret will be exposed!\n\n                                    \n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        string describing context of key generation\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        buffer containing the derived 32-byte symmetric key\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            encrypt\n                        \n                        \n                    \n                \n            \n            \n                \nencrypt(dataStr: string, nonceNumber: number, keyStr: string, dataEncoding: BufferEncoding, encryptedEncoding: BufferEncoding)\n                \n            \n\n\n            \n                \n                    Defined in src/cryptography/cryptography.service.ts:141\n                \n            \n\n\n            \n                \n                    Encrypts data using a symmetric key and nonce\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    dataStr\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    nonceNumber\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    keyStr\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    dataEncoding\n                                    \n                                            BufferEncoding\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'utf-8'\n                                    \n\n                                \n                                \n                                    encryptedEncoding\n                                    \n                                            BufferEncoding\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'hex'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        buffer containing encrypted data\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            generateECDHSharedSecret\n                        \n                        \n                    \n                \n            \n            \n                \ngenerateECDHSharedSecret(publicKey: string, privateKey: string)\n                \n            \n\n\n            \n                \n                    Defined in src/cryptography/cryptography.service.ts:53\n                \n            \n\n\n            \n                \n                    Generates an ECDH shared secret from one-use keys\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    publicKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        other party public one-use key\n\n                                    \n                                \n                                \n                                    privateKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        user private one-use key\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        sharedSecret buffer containing ECDH shared secret\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            generateNonceBuffer\n                        \n                        \n                    \n                \n            \n            \n                \ngenerateNonceBuffer(nonce: number)\n                \n            \n\n\n            \n                \n                    Defined in src/cryptography/cryptography.service.ts:126\n                \n            \n\n\n            \n                \n                    Generates an 8-byte buffer from nonce\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    nonce\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        number passed in - either random 32-bit integer or counter\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Buffer\n\n                    \n                    \n                        nonceBuffer padded noncebuffer suitable for use in chacha20 encryption/decryption\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            generateOneUseKeyPair\n                        \n                        \n                    \n                \n            \n            \n                \ngenerateOneUseKeyPair()\n                \n            \n\n\n            \n                \n                    Defined in src/cryptography/cryptography.service.ts:33\n                \n            \n\n\n            \n                \n                    Generate a public and private one-use key pair (c25519)\nThis is used to perform Diffie-Hellman secret exchanges\nnot for signing!\n\n\n                    \n                    \n                    \n                        Returns :         CryptographyKeyPairDto\n\n                    \n                    \n                        dto containing public and private key buffers\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            generateRandomBytes\n                        \n                        \n                    \n                \n            \n            \n                \ngenerateRandomBytes()\n                \n            \n\n\n            \n                \n                    Defined in src/cryptography/cryptography.service.ts:192\n                \n            \n\n\n            \n                \n                    Generates a random 32-byte buffer\n\n\n                    \n                        Returns :     Buffer\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            generateRandomNumber\n                        \n                        \n                    \n                \n            \n            \n                \ngenerateRandomNumber()\n                \n            \n\n\n            \n                \n                    Defined in src/cryptography/cryptography.service.ts:185\n                \n            \n\n\n            \n                \n                    Generates 32-bit random number\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            generateSHA256Hash\n                        \n                        \n                    \n                \n            \n            \n                \ngenerateSHA256Hash(data: string)\n                \n            \n\n\n            \n                \n                    Defined in src/cryptography/cryptography.service.ts:97\n                \n            \n\n\n            \n                \n                    Generates a SHA256 hash\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        input buffer to be hashed\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        buffer containing the 32-byte SHA-256 hash\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            generateSignature\n                        \n                        \n                    \n                \n            \n            \n                \ngenerateSignature(data: string, privateSigningKey: string)\n                \n            \n\n\n            \n                \n                    Defined in src/cryptography/cryptography.service.ts:67\n                \n            \n\n\n            \n                \n                    Generates a digital signature of data using the private signing key\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        data to be signed\n\n                                    \n                                \n                                \n                                    privateSigningKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        key used to sign data\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        buffer containing signature\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            generateSigningKeyPair\n                        \n                        \n                    \n                \n            \n            \n                \ngenerateSigningKeyPair()\n                \n            \n\n\n            \n                \n                    Defined in src/cryptography/cryptography.service.ts:13\n                \n            \n\n\n            \n                \n                    Generates a public and private signing key pair (ed25519)\n\n\n                    \n                    \n                    \n                        Returns :         CryptographyKeyPairDto\n\n                    \n                    \n                        dto containing public and private key buffers\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getRandomisedBuffer\n                        \n                        \n                    \n                \n            \n            \n                \ngetRandomisedBuffer(size: number)\n                \n            \n\n\n            \n                \n                    Defined in src/cryptography/cryptography.service.ts:204\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    size\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Buffer\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getZeroedBuffer\n                        \n                        \n                    \n                \n            \n            \n                \ngetZeroedBuffer(size: number)\n                \n            \n\n\n            \n                \n                    Defined in src/cryptography/cryptography.service.ts:198\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    size\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Buffer\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            validateSignature\n                        \n                        \n                    \n                \n            \n            \n                \nvalidateSignature(signature: string, data: string, publicSigningKey: string)\n                \n            \n\n\n            \n                \n                    Defined in src/cryptography/cryptography.service.ts:82\n                \n            \n\n\n            \n                \n                    Validates a digital signature of data using the public signing key\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    signature\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        detached signature of data param\n\n                                    \n                                \n                                \n                                    data\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        data that has been signed\n\n                                    \n                                \n                                \n                                    publicSigningKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        public key of signing keypair used to sign data\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        boolean true/false if signature valid/invalid\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport SodiumNative from 'sodium-native';\nimport { CryptographyKeyPairDto } from './dto/cryptography-keypair.dto';\n\nconst BASE64 = 'base64';\n\n@Injectable()\nexport class CryptographyService {\n  /**\n   * Generates a public and private signing key pair (ed25519)\n   * @returns dto containing public and private key buffers\n   */\n  generateSigningKeyPair(): CryptographyKeyPairDto {\n    const publicSigningKey: Buffer = this.getZeroedBuffer(SodiumNative.crypto_sign_PUBLICKEYBYTES);\n    const privateSigningKey: Buffer = this.getZeroedBuffer(SodiumNative.crypto_sign_SECRETKEYBYTES);\n\n    SodiumNative.crypto_sign_keypair(publicSigningKey, privateSigningKey);\n\n    const keyPair: CryptographyKeyPairDto = {\n      publicKey: publicSigningKey.toString(BASE64),\n      privateKey: privateSigningKey.toString(BASE64),\n    };\n\n    return keyPair;\n  }\n\n  /**\n   * Generate a public and private one-use key pair (c25519)\n   * This is used to perform Diffie-Hellman secret exchanges\n   * not for signing!\n   * @returns dto containing public and private key buffers\n   */\n  generateOneUseKeyPair(): CryptographyKeyPairDto {\n    const publicOneUseKey: Buffer = this.getZeroedBuffer(SodiumNative.crypto_scalarmult_BYTES);\n    const privateOneUseKey: Buffer = this.getRandomisedBuffer(SodiumNative.crypto_scalarmult_SCALARBYTES);\n\n    SodiumNative.crypto_scalarmult_base(publicOneUseKey, privateOneUseKey);\n\n    const keyPair: CryptographyKeyPairDto = {\n      publicKey: publicOneUseKey.toString(BASE64),\n      privateKey: privateOneUseKey.toString(BASE64),\n    };\n\n    return keyPair;\n  }\n\n  /**\n   * Generates an ECDH shared secret from one-use keys\n   * @param publicKey other party public one-use key\n   * @param privateKey user private one-use key\n   * @returns sharedSecret buffer containing ECDH shared secret\n   */\n  generateECDHSharedSecret(publicKey: string, privateKey: string): string {\n    const sharedSecret: Buffer = this.getZeroedBuffer(SodiumNative.crypto_scalarmult_BYTES);\n\n    SodiumNative.crypto_scalarmult(sharedSecret, Buffer.from(privateKey, BASE64), Buffer.from(publicKey, BASE64));\n\n    return sharedSecret.toString(BASE64);\n  }\n\n  /**\n   * Generates a digital signature of data using the private signing key\n   * @param data data to be signed\n   * @param privateSigningKey key used to sign data\n   * @returns buffer containing signature\n   */\n  generateSignature(data: string, privateSigningKey: string): string {\n    const signature: Buffer = this.getZeroedBuffer(SodiumNative.crypto_sign_BYTES);\n\n    SodiumNative.crypto_sign_detached(signature, Buffer.from(data, BASE64), Buffer.from(privateSigningKey, BASE64));\n\n    return signature.toString(BASE64);\n  }\n\n  /**\n   * Validates a digital signature of data using the public signing key\n   * @param signature detached signature of data param\n   * @param data data that has been signed\n   * @param publicSigningKey public key of signing keypair used to sign data\n   * @returns boolean true/false if signature valid/invalid\n   */\n  validateSignature(signature: string, data: string, publicSigningKey: string): boolean {\n    const retval: boolean = SodiumNative.crypto_sign_verify_detached(\n      Buffer.from(signature, BASE64),\n      Buffer.from(data, BASE64),\n      Buffer.from(publicSigningKey, BASE64),\n    );\n\n    return retval;\n  }\n\n  /**\n   * Generates a SHA256 hash\n   * @param data input buffer to be hashed\n   * @returns buffer containing the 32-byte SHA-256 hash\n   */\n  generateSHA256Hash(data: string): string {\n    const outputHash: Buffer = this.getZeroedBuffer(SodiumNative.crypto_hash_sha256_BYTES);\n\n    SodiumNative.crypto_hash_sha256(outputHash, Buffer.from(data));\n\n    return outputHash.toString('hex');\n  }\n\n  /**\n   * Derives a symmetric key from secret\n   * @param secret input buffer containing key derivation secret\n   * @param nonce number used once - must not be reused or secret will be exposed!\n   * @param context string describing context of key generation\n   * @returns buffer containing the derived 32-byte symmetric key\n   */\n  deriveSymmetricKeyfromSecret(secret: string, nonce: number, context: string): string {\n    const outputSymmetricKey: Buffer = this.getZeroedBuffer(SodiumNative.crypto_kdf_KEYBYTES);\n    const keyContext: Buffer = Buffer.from(context);\n\n    SodiumNative.crypto_kdf_derive_from_key(outputSymmetricKey, nonce, keyContext, Buffer.from(secret, BASE64));\n\n    return outputSymmetricKey.toString(BASE64);\n  }\n\n  /**\n   * Generates an 8-byte buffer from nonce\n   * @param nonce number passed in - either random 32-bit integer or counter\n   * @returns nonceBuffer padded noncebuffer suitable for use in chacha20 encryption/decryption\n   */\n  generateNonceBuffer(nonce: number): Buffer {\n    const nonceBuffer = this.getZeroedBuffer(SodiumNative.crypto_stream_chacha20_NONCEBYTES);\n\n    nonceBuffer.writeUInt32BE(nonce, 0);\n\n    return nonceBuffer;\n  }\n\n  /**\n   * Encrypts data using a symmetric key and nonce\n   * @param data data buffer to be encrypted\n   * @param nonce number used once - must not be reused or secret will be exposed\n   * @param key symmetric key used to encrypt data\n   * @returns buffer containing encrypted data\n   */\n  encrypt(\n    dataStr: string,\n    nonceNumber: number,\n    keyStr: string,\n    dataEncoding: BufferEncoding = 'utf-8',\n    encryptedEncoding: BufferEncoding = 'hex',\n  ): string {\n    const data = Buffer.from(dataStr, dataEncoding);\n    const nonce = this.generateNonceBuffer(nonceNumber);\n    const key = Buffer.from(keyStr);\n    const encryptedData: Buffer = this.getZeroedBuffer(data.length);\n\n    SodiumNative.crypto_stream_chacha20_xor(encryptedData, data, nonce, key);\n\n    return encryptedData.toString(encryptedEncoding);\n  }\n\n  /**\n   * Decrypts data using a symmetric key and nonce\n   * @param data data buffer to be decrypted\n   * @param nonce number used once - must not be reused or secret will be exposed\n   * @param key symmetric key used to decrypt data\n   * @returns buffer containing decrypted data\n   */\n  decrypt(\n    dataStr: string,\n    nonceNumber: number,\n    keyStr: string,\n    dataEncoding = 'utf-8',\n    encryptedEncoding: BufferEncoding = 'hex',\n  ): string {\n    const data = Buffer.from(dataStr, encryptedEncoding);\n    const nonce = this.generateNonceBuffer(nonceNumber);\n    const key = Buffer.from(keyStr);\n    const decryptedData: Buffer = this.getZeroedBuffer(data.length);\n\n    SodiumNative.crypto_stream_chacha20_xor(decryptedData, data, nonce, key);\n\n    return decryptedData.toString(dataEncoding);\n  }\n\n  /**\n   * Generates 32-bit random number\n   */\n  generateRandomNumber(): number {\n    return SodiumNative.randombytes_random();\n  }\n\n  /**\n   * Generates a random 32-byte buffer\n   */\n  generateRandomBytes(): Buffer {\n    const retval = Buffer.alloc(32);\n    SodiumNative.randombytes_buf(retval);\n    return retval;\n  }\n\n  getZeroedBuffer(size: number): Buffer {\n    const buff = SodiumNative.sodium_malloc(size);\n    SodiumNative.sodium_memzero(buff);\n    return buff;\n  }\n\n  getRandomisedBuffer(size: number): Buffer {\n    const buff = this.getZeroedBuffer(size);\n    SodiumNative.randombytes_buf(buff);\n    return buff;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DbKeyManager.html":{"url":"classes/DbKeyManager.html","title":"class - DbKeyManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DbKeyManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/key-manager/implementations/key-manager-db.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            KeyManager\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createSigningKey\n                            \n                            \n                                    Async\n                                readPublicSigningKey\n                            \n                            \n                                    Async\n                                sign\n                            \n                            \n                                    Async\n                                verifySignature\n                            \n                            \n                                    Async\n                                verifySignatureById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(keypairRepository: Repository, cryptographyService: CryptographyService)\n                    \n                \n                        \n                            \n                                Defined in src/key-manager/implementations/key-manager-db.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        keypairRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptographyService\n                                                  \n                                                        \n                                                                        CryptographyService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createSigningKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createSigningKey(id: number, queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/key-manager/implementations/key-manager-db.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            readPublicSigningKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    readPublicSigningKey(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/key-manager/implementations/key-manager-db.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            sign\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sign(id: number, data: string)\n                \n            \n\n\n            \n                \n                    Defined in src/key-manager/implementations/key-manager-db.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            verifySignature\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    verifySignature(signature: string, data: string, publicKey: string)\n                \n            \n\n\n            \n                \n                    Defined in src/key-manager/implementations/key-manager-db.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signature\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    publicKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            verifySignatureById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    verifySignatureById(id: number, signature: string, data: string)\n                \n            \n\n\n            \n                \n                    Defined in src/key-manager/implementations/key-manager-db.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    signature\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { QueryRunner, Repository } from 'typeorm';\nimport { CryptographyService } from '../../cryptography/cryptography.service';\nimport { User } from '../../users/entities/users.entity';\nimport { KeyManager } from '../key-manager.interface';\nimport { DbKeyPair } from './key-manager-db.entity';\n\nexport class DbKeyManager implements KeyManager {\n  constructor(\n    private readonly keypairRepository: Repository,\n    private readonly cryptographyService: CryptographyService,\n  ) {}\n\n  async createSigningKey(id: number, queryRunner: QueryRunner): Promise {\n    const { privateKey, publicKey } = this.cryptographyService.generateSigningKeyPair();\n    const user = new User();\n    user.id = id;\n    const keypair: DbKeyPair = { id, privateKey, publicKey, user };\n    await queryRunner.manager.save('db_key_pair', keypair);\n  }\n\n  async readPublicSigningKey(id: number): Promise {\n    const keyPair = await this.keypairRepository.findOneOrFail({ select: ['publicKey'], where: { user: { id } } });\n    return keyPair.publicKey;\n  }\n\n  async sign(id: number, data: string): Promise {\n    const keyPair = await this.keypairRepository.findOneOrFail({ select: ['privateKey'], where: { user: { id } } });\n    return this.cryptographyService.generateSignature(data, keyPair.privateKey);\n  }\n\n  async verifySignatureById(id: number, signature: string, data: string): Promise {\n    const pubKey: string = await this.readPublicSigningKey(id);\n    return this.verifySignature(signature, data, pubKey);\n  }\n\n  async verifySignature(signature: string, data: string, publicKey: string): Promise {\n    return this.cryptographyService.validateSignature(signature, data, publicKey);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DbKeyPair.html":{"url":"classes/DbKeyPair.html","title":"class - DbKeyPair","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DbKeyPair\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/key-manager/implementations/key-manager-db.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                privateKey\n                            \n                            \n                                publicKey\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/key-manager/implementations/key-manager-db.entity.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            privateKey\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/key-manager/implementations/key-manager-db.entity.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            publicKey\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/key-manager/implementations/key-manager-db.entity.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToOne(undefined)@JoinColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/key-manager/implementations/key-manager-db.entity.ts:17\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, JoinColumn, OneToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { User } from '../../users/entities/users.entity';\n\n@Entity()\nexport class DbKeyPair {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  privateKey: string;\n\n  @Column()\n  publicKey: string;\n\n  @OneToOne(type => User)\n  @JoinColumn()\n  user: User;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/DevelopmentController.html":{"url":"controllers/DevelopmentController.html","title":"controller - DevelopmentController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  DevelopmentController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/development/development.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                development\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getContact\n                            \n                            \n                                    Async\n                                getMasterKey\n                            \n                            \n                                    Async\n                                verifySignature\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getContact\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getContact(userId: number, contactName: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('contact/:userId/:contactName')\n                \n            \n\n            \n                \n                    Defined in src/development/development.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    contactName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getMasterKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMasterKey(userId: number, contactName: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('generate-master-key/:userId/:contactName')\n                \n            \n\n            \n                \n                    Defined in src/development/development.controller.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    contactName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            verifySignature\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    verifySignature(signature: string, oneuseKey: string, signingKey: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('cryptography/verify-signature/:signature/:oneUseKey/:signingKey')\n                \n            \n\n            \n                \n                    Defined in src/development/development.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signature\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    oneuseKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    signingKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Inject, Logger, Param } from '@nestjs/common';\nimport { ContactsService } from '../contacts/contacts.service';\nimport { CryptographyService } from '../cryptography/cryptography.service';\nimport { KeyManager } from '../key-manager/key-manager.interface';\nimport { User } from '../users/entities/users.entity';\nimport { UsersService } from '../users/users.service';\n\n@Controller('development')\nexport class DevelopmentController {\n  constructor(\n    private readonly contactsService: ContactsService,\n    private readonly usersService: UsersService,\n    private readonly cryptographyService: CryptographyService,\n    @Inject('KeyManager')\n    private readonly keyManager: KeyManager,\n  ) {}\n\n  @Get('generate-master-key/:userId/:contactName')\n  async getMasterKey(@Param('userId') userId: number, @Param('contactName') contactName: string): Promise {\n    const user: User = await this.usersService.findById(userId);\n    const contact = await this.contactsService.findOne(user.id, contactName, true);\n\n    // generate the master key\n    return this.cryptographyService.generateECDHSharedSecret(contact.oneuseKey, contact.handshakePrivateKey);\n  }\n\n  @Get('contact/:userId/:contactName')\n  async getContact(@Param('userId') userId: number, @Param('contactName') contactName: string): Promise {\n    const contact = await this.contactsService.findOne(userId, contactName, true);\n    const contactHandshake = {\n      id: contact.id,\n      name: contact.name,\n      identifier: contact.identifier,\n      handshakePublicKey: contact.handshakePublicKey,\n      handshakePrivateKey: contact.handshakePrivateKey,\n      oneuseKey: contact.oneuseKey,\n      signingKey: contact.signingKey,\n      signature: contact.signature,\n    };\n    Logger.debug(contactHandshake, `[dev] getContact(${userId}, ${contactName})`);\n    return contactHandshake;\n  }\n\n  @Get('cryptography/verify-signature/:signature/:oneUseKey/:signingKey')\n  async verifySignature(\n    @Param('signature') signature: string,\n    @Param('oneUseKey') oneuseKey: string,\n    @Param('signingKey') signingKey: string,\n  ): Promise {\n    const result = await this.keyManager.verifySignature(signature, oneuseKey, signingKey);\n    return { result };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DevelopmentModule.html":{"url":"modules/DevelopmentModule.html","title":"module - DevelopmentModule","body":"\n                   \n\n\n\n\n    Modules\n    DevelopmentModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_DevelopmentModule\n\n\n\ncluster_DevelopmentModule_imports\n\n\n\n\nContactsModule\n\nContactsModule\n\n\n\nDevelopmentModule\n\nDevelopmentModule\n\nDevelopmentModule -->\n\nContactsModule->DevelopmentModule\n\n\n\n\n\nCryptographyModule\n\nCryptographyModule\n\nDevelopmentModule -->\n\nCryptographyModule->DevelopmentModule\n\n\n\n\n\nKeyManagerModule\n\nKeyManagerModule\n\nDevelopmentModule -->\n\nKeyManagerModule->DevelopmentModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nDevelopmentModule -->\n\nUsersModule->DevelopmentModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/development/development.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            DevelopmentController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ContactsModule\n                        \n                        \n                            CryptographyModule\n                        \n                        \n                            KeyManagerModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ContactsModule } from '../contacts/contacts.module';\nimport { CryptographyModule } from '../cryptography/cryptography.module';\nimport { KeyManagerModule } from '../key-manager/key-manager.module';\nimport { UsersModule } from '../users/users.module';\nimport { DevelopmentController } from './development.controller';\n\n@Module({\n  imports: [CryptographyModule, ContactsModule, UsersModule, KeyManagerModule],\n  controllers: [DevelopmentController],\n})\nexport class DevelopmentModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EkhoEvent.html":{"url":"classes/EkhoEvent.html","title":"class - EkhoEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EkhoEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/events/entities/events.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                block\n                            \n                            \n                                    Optional\n                                channelId\n                            \n                            \n                                    Optional\n                                content\n                            \n                            \n                                createdDate\n                            \n                            \n                                id\n                            \n                            \n                                processed\n                            \n                            \n                                    Optional\n                                signature\n                            \n                            \n                                status\n                            \n                            \n                                txHash\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            block\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Block\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)@JoinColumn({name: 'blockId'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/events/entities/events.entity.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            channelId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/events/entities/events.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            content\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/events/entities/events.entity.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/events/entities/events.entity.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/events/entities/events.entity.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            processed\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({nullable: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/events/entities/events.entity.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            signature\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/events/entities/events.entity.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/events/entities/events.entity.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            txHash\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/events/entities/events.entity.ts:10\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, CreateDateColumn, Entity, JoinColumn, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { Block } from './blocks.entity';\n\n@Entity()\nexport class EkhoEvent {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  txHash: string;\n\n  @Column()\n  status: string;\n\n  @Column({ nullable: true })\n  channelId?: string;\n\n  @Column({ nullable: true })\n  content?: string;\n\n  @Column({ nullable: true })\n  signature?: string;\n\n  @CreateDateColumn()\n  createdDate: Date;\n\n  @ManyToOne(\n    type => Block,\n    block => block.blockevents,\n  )\n  @JoinColumn({ name: 'blockId' })\n  block: Block;\n\n  @Column({ nullable: false })\n  processed: boolean;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EkhoEventDto.html":{"url":"classes/EkhoEventDto.html","title":"class - EkhoEventDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EkhoEventDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/events/dto/ekhoevent.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                channelIdentifier\n                            \n                            \n                                encryptedMessageLink\n                            \n                            \n                                encryptedMessageLinkSignature\n                            \n                            \n                                eventIdentifier\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            channelIdentifier\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'Channel Identifier'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/events/dto/ekhoevent.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            encryptedMessageLink\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'Encrypted Message Link'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/events/dto/ekhoevent.dto.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            encryptedMessageLinkSignature\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'Message Link Signature'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/events/dto/ekhoevent.dto.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            eventIdentifier\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'Event ID'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/events/dto/ekhoevent.dto.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport default class EkhoEventDto {\n  @ApiProperty({ description: 'Event ID' })\n  eventIdentifier: number;\n\n  @ApiProperty({ description: 'Channel Identifier' })\n  channelIdentifier: string;\n\n  @ApiProperty({ description: 'Encrypted Message Link' })\n  encryptedMessageLink: string;\n\n  @ApiProperty({ description: 'Message Link Signature' })\n  encryptedMessageLinkSignature: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EkhoWeb3Config.html":{"url":"interfaces/EkhoWeb3Config.html","title":"interface - EkhoWeb3Config","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  EkhoWeb3Config\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/web3/web3.configuration.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        web3\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        web3\n                                    \n                                \n                                \n                                    \n                                        web3:         Web3Config\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Web3Config\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export default () => ({\n  web3: {\n    chain: process.env.WEB3_CHAIN || 'ropsten',\n    hardfork: process.env.WEB3_HARDFORK || 'petersburg',\n    rpcUrl: process.env.WEB3_RPC_URL,\n    contractAddress: process.env.WEB3_CONTRACT_ADDRESS,\n    broadcastAccount: {\n      address: process.env.WEB3_BROADCAST_ACC_ADDRESS,\n      publicKey: process.env.WEB3_BROADCAST_ACC_PUBLIC_KEY,\n      privateKey: process.env.WEB3_BROADCAST_ACC_PRIVATE_KEY,\n    },\n  },\n});\n\nexport interface EkhoWeb3Config {\n  web3: Web3Config;\n}\n\ninterface Web3Config {\n  chain: string;\n  hardFork: string;\n  rpcUrl: string;\n  contractAddress: string;\n  broadcastAccount: BroadcastAccountConfig;\n}\n\ninterface BroadcastAccountConfig {\n  address: string;\n  publicKey: string;\n  privateKey: string;\n}\n\nexport const mockWeb3Config: EkhoWeb3Config = {\n  web3: {\n    chain: 'no-such-blockchain',\n    hardFork: 'skibbereen',\n    rpcUrl: 'wss://no-such-location',\n    contractAddress: '0xffffff7f',\n    broadcastAccount: {\n      address: '0x0',\n      publicKey: '0x123',\n      privateKey: '0x456',\n    },\n  },\n};\n\nexport const getMockWeb3Config = (partial?: Partial): EkhoWeb3Config => {\n  if (!partial) {\n    partial = {};\n  }\n  return { ...mockWeb3Config, ...partial };\n};\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EncodedMessageDto.html":{"url":"classes/EncodedMessageDto.html","title":"class - EncodedMessageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EncodedMessageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/channels/dto/encodedmessage.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                channelIdentifier\n                            \n                            \n                                encryptedMessageLink\n                            \n                            \n                                encryptedMessageLinkSignature\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            channelIdentifier\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'Channel Identifier'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/channels/dto/encodedmessage.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            encryptedMessageLink\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'Encrypted Message Link'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/channels/dto/encodedmessage.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            encryptedMessageLinkSignature\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'Message Link Signature'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/channels/dto/encodedmessage.dto.ts:11\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport default class EncodedMessageDto {\n  @ApiProperty({ description: 'Channel Identifier' })\n  channelIdentifier: string;\n\n  @ApiProperty({ description: 'Encrypted Message Link' })\n  encryptedMessageLink: string;\n\n  @ApiProperty({ description: 'Message Link Signature' })\n  encryptedMessageLinkSignature: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EventsController.html":{"url":"controllers/EventsController.html","title":"controller - EventsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EventsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/events/events.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                events\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                getLatestBlockNumber\n                            \n                            \n                                    Async\n                                markEventAsProcessed\n                            \n                            \n                                    Async\n                                processBlockchainEvents\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            get\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    get()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/events/events.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/events/events.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getLatestBlockNumber\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLatestBlockNumber()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('block')\n                \n            \n\n            \n                \n                    Defined in src/events/events.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            markEventAsProcessed\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    markEventAsProcessed(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put()\n                \n            \n\n            \n                \n                    Defined in src/events/events.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            processBlockchainEvents\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processBlockchainEvents()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('unprocessed')\n                \n            \n\n            \n                \n                    Defined in src/events/events.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Put, Query } from '@nestjs/common';\nimport EkhoEventDto from './dto/ekhoevent.dto';\nimport { EkhoEvent } from './entities/events.entity';\nimport { EventsService } from './events.service';\n\n@Controller('events')\nexport class EventsController {\n  constructor(private readonly eventsService: EventsService) {}\n\n  @Get()\n  async get(): Promise {\n    return this.eventsService.getAll();\n  }\n\n  @Get()\n  async getById(@Query('id') id: number): Promise {\n    return this.eventsService.getOneById(id);\n  }\n\n  @Get('block')\n  async getLatestBlockNumber(): Promise {\n    return this.eventsService.getLatestBlock();\n  }\n\n  @Put()\n  async markEventAsProcessed(@Query('id') id: number): Promise {\n    return this.eventsService.markEventAsProcessed(id);\n  }\n\n  @Get('unprocessed')\n  async processBlockchainEvents(): Promise {\n    return this.eventsService.getFirstUnprocessedEvent();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EventsModule.html":{"url":"modules/EventsModule.html","title":"module - EventsModule","body":"\n                   \n\n\n\n\n    Modules\n    EventsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_EventsModule\n\n\n\ncluster_EventsModule_exports\n\n\n\ncluster_EventsModule_providers\n\n\n\n\nEventsService \n\nEventsService \n\n\n\nEventsModule\n\nEventsModule\n\nEventsService  -->\n\nEventsModule->EventsService \n\n\n\n\n\nEventsService\n\nEventsService\n\nEventsModule -->\n\nEventsService->EventsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/events/events.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EventsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EventsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EventsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Block } from './entities/blocks.entity';\nimport { EkhoEvent } from './entities/events.entity';\nimport { EventsController } from './events.controller';\nimport { EventsService } from './events.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([EkhoEvent, Block])],\n  providers: [EventsService],\n  controllers: [EventsController],\n  exports: [EventsService],\n})\nexport class EventsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EventsService.html":{"url":"injectables/EventsService.html","title":"injectable - EventsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  EventsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/events/events.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getByTransactionHash\n                            \n                            \n                                    Async\n                                getFirstUnprocessedEvent\n                            \n                            \n                                    Async\n                                getLatestBlock\n                            \n                            \n                                    Async\n                                getOneById\n                            \n                            \n                                    Async\n                                getTransactionByChannelId\n                            \n                            \n                                    Async\n                                markEventAsProcessed\n                            \n                            \n                                    Async\n                                save\n                            \n                            \n                                    Async\n                                saveBlockInfo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(eventsRepository: Repository, blockRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/events/events.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        eventsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        blockRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n\n            \n                \n                    Defined in src/events/events.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getByTransactionHash\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getByTransactionHash(transactionHash: string)\n                \n            \n\n\n            \n                \n                    Defined in src/events/events.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    transactionHash\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getFirstUnprocessedEvent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getFirstUnprocessedEvent()\n                \n            \n\n\n            \n                \n                    Defined in src/events/events.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getLatestBlock\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLatestBlock()\n                \n            \n\n\n            \n                \n                    Defined in src/events/events.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getOneById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getOneById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/events/events.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTransactionByChannelId\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTransactionByChannelId(channelId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/events/events.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    channelId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            markEventAsProcessed\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    markEventAsProcessed(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/events/events.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            save\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    save(event: EkhoEvent | literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/events/events.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                EkhoEvent | literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            saveBlockInfo\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    saveBlockInfo(block: Block)\n                \n            \n\n\n            \n                \n                    Defined in src/events/events.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    block\n                                    \n                                                Block\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { getRepository, Repository } from 'typeorm';\nimport EkhoEventDto from './dto/ekhoevent.dto';\nimport { Block } from './entities/blocks.entity';\nimport { EkhoEvent } from './entities/events.entity';\n\n@Injectable()\nexport class EventsService {\n  constructor(\n    @InjectRepository(EkhoEvent)\n    private readonly eventsRepository: Repository,\n    @InjectRepository(Block)\n    private readonly blockRepository: Repository,\n  ) {}\n\n  async getAll(): Promise {\n    return this.eventsRepository.find();\n  }\n\n  async getOneById(id: number): Promise {\n    return this.eventsRepository.findOneOrFail({ id });\n  }\n\n  async getTransactionByChannelId(channelId: string): Promise {\n    return this.eventsRepository.findOne({ where: { channelId } });\n  }\n\n  async getByTransactionHash(transactionHash: string): Promise {\n    const ekhoEvent: EkhoEvent = await this.eventsRepository.findOne({ txHash: transactionHash });\n    return ekhoEvent;\n  }\n\n  async save(event: EkhoEvent | { txHash: string; status: string }): Promise {\n    await this.eventsRepository.save(event);\n  }\n\n  async saveBlockInfo(block: Block): Promise {\n    return (await this.blockRepository.save(block)).blockNumber;\n  }\n\n  async getLatestBlock(): Promise {\n    const cachedBlocks = await getRepository(Block)\n      .createQueryBuilder('Block')\n      .select('MAX(\"blockNumber\")', 'max')\n      .getRawOne();\n\n    if (!cachedBlocks.max) {\n      cachedBlocks.max = 0;\n    }\n    return cachedBlocks.max;\n  }\n\n  async markEventAsProcessed(id: number): Promise {\n    Logger.debug('marking event as processed.  id: ', id.toString());\n\n    const myEvent = await this.getOneById(id);\n    myEvent.processed = true;\n    await this.save(myEvent);\n    return true;\n  }\n\n  async getFirstUnprocessedEvent(): Promise {\n    Logger.debug('looking for unprocessed blockchain event.');\n\n    const firstUnprocessedEvent = await getRepository(EkhoEvent)\n      .createQueryBuilder('EkhoEvent')\n      .select('MIN(EkhoEvent.id)', 'id')\n      .addSelect(['EkhoEvent.channelId, EkhoEvent.content, EkhoEvent.signature'])\n      .groupBy('EkhoEvent.id')\n      .where('EkhoEvent.processed = false')\n      .orderBy('EkhoEvent.id', 'ASC')\n      .getRawOne();\n\n    if (!firstUnprocessedEvent) {\n      return null;\n    } else {\n      Logger.debug('one event found, eventid: ', firstUnprocessedEvent.id);\n      const newEvent = new EkhoEventDto();\n      newEvent.eventIdentifier = firstUnprocessedEvent.id;\n      newEvent.channelIdentifier = firstUnprocessedEvent.channelId;\n      newEvent.encryptedMessageLink = firstUnprocessedEvent.content;\n      newEvent.encryptedMessageLinkSignature = firstUnprocessedEvent.signature;\n\n      return newEvent;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/IpfsController.html":{"url":"controllers/IpfsController.html","title":"controller - IpfsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  IpfsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/ipfs/ipfs.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                ipfs\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            get\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    get(path: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':path')\n                \n            \n\n            \n                \n                    Defined in src/ipfs/ipfs.controller.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            post\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    post(data: IpfsMessageDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/ipfs/ipfs.controller.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                IpfsMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Post } from '@nestjs/common';\nimport { IpfsMessageDto } from './dto/ipfs-message.dto';\nimport { IpfsService } from './ipfs.service';\n\n@Controller('ipfs')\nexport class IpfsController {\n  constructor(private readonly ipfsService: IpfsService) {}\n\n  @Get(':path')\n  async get(@Param('path') path: string): Promise {\n    return this.ipfsService.retrieve(path);\n  }\n\n  @Post()\n  async post(@Body() data: IpfsMessageDto): Promise {\n    return this.ipfsService.store(data);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IpfsMessageDto.html":{"url":"classes/IpfsMessageDto.html","title":"class - IpfsMessageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IpfsMessageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/ipfs/dto/ipfs-message.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            content\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'Content'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/ipfs/dto/ipfs-message.dto.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class IpfsMessageDto {\n  @ApiProperty({ description: 'Content' })\n  content: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/IpfsModule.html":{"url":"modules/IpfsModule.html","title":"module - IpfsModule","body":"\n                   \n\n\n\n\n    Modules\n    IpfsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_IpfsModule\n\n\n\ncluster_IpfsModule_exports\n\n\n\ncluster_IpfsModule_providers\n\n\n\n\nIpfsService \n\nIpfsService \n\n\n\nIpfsModule\n\nIpfsModule\n\nIpfsService  -->\n\nIpfsModule->IpfsService \n\n\n\n\n\nIpfsService\n\nIpfsService\n\nIpfsModule -->\n\nIpfsService->IpfsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/ipfs/ipfs.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            IpfsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            IpfsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            IpfsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { ipfsClientFactory } from './ipfs.client.factory';\nimport { IpfsController } from './ipfs.controller';\nimport { IpfsService } from './ipfs.service';\n\n@Module({\n  // imports: [IpfsClient],\n  providers: [ipfsClientFactory, IpfsService, ConfigService],\n  controllers: [IpfsController],\n  exports: [IpfsService],\n})\nexport class IpfsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/IpfsService.html":{"url":"injectables/IpfsService.html","title":"injectable - IpfsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  IpfsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/ipfs/ipfs.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                retrieve\n                            \n                            \n                                    Async\n                                store\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(ipfs: IpfsClient)\n                    \n                \n                        \n                            \n                                Defined in src/ipfs/ipfs.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ipfs\n                                                  \n                                                        \n                                                                    IpfsClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            retrieve\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    retrieve(ipfsPath: string)\n                \n            \n\n\n            \n                \n                    Defined in src/ipfs/ipfs.service.ts:14\n                \n            \n\n\n            \n                \n                    Fetch a file from IPFS that is addressed by a valid IPFS Path.\nhttps://github.com/ipfs/interface-js-ipfs-core/blob/master/SPEC/FILES.md#get\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ipfsPath\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        IPFS Path\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            store\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    store(data: IpfsMessageDto)\n                \n            \n\n\n            \n                \n                    Defined in src/ipfs/ipfs.service.ts:26\n                \n            \n\n\n            \n                \n                    Add files and data to IPFS.\nhttps://github.com/ipfs/interface-js-ipfs-core/blob/master/SPEC/FILES.md#add\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                IpfsMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        data message to be added to IPFS\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport IpfsClient from 'ipfs-http-client';\nimport { IpfsMessageDto } from './dto/ipfs-message.dto';\n\n@Injectable()\nexport class IpfsService {\n  constructor(private readonly ipfs: IpfsClient) {}\n\n  /**\n   * Fetch a file from IPFS that is addressed by a valid IPFS Path.\n   * https://github.com/ipfs/interface-js-ipfs-core/blob/master/SPEC/FILES.md#get\n   * @param ipfsPath IPFS Path\n   */\n  async retrieve(ipfsPath: string): Promise {\n    Logger.debug('getting file from IPFS', ipfsPath);\n    const [file] = await this.ipfs.get(ipfsPath);\n    Logger.debug('IPFS file retrieved');\n    return JSON.parse(file.content.toString('utf8'));\n  }\n\n  /**\n   * Add files and data to IPFS.\n   * https://github.com/ipfs/interface-js-ipfs-core/blob/master/SPEC/FILES.md#add\n   * @param data data message to be added to IPFS\n   */\n  async store(data: IpfsMessageDto): Promise {\n    // this will perform badly with huge messages\n    // check later how to use streams\n    const stringData = JSON.stringify(data);\n    const bufferedData = Buffer.from(stringData, 'utf-8');\n    const [result] = await this.ipfs.add(bufferedData);\n    if (result) {\n      Logger.debug('file shared via IPFS, path: ', result.path);\n      return result.path;\n    } else {\n      throw new Error('error saving to IPFS');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/KeyManager.html":{"url":"interfaces/KeyManager.html","title":"interface - KeyManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  KeyManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/key-manager/key-manager.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    createSigningKey\n                                \n                                \n                                    readPublicSigningKey\n                                \n                                \n                                    sign\n                                \n                                \n                                    verifySignature\n                                \n                                \n                                    verifySignatureById\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createSigningKey\n                        \n                        \n                    \n                \n            \n            \n                \ncreateSigningKey(id: number, queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/key-manager/key-manager.interface.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            readPublicSigningKey\n                        \n                        \n                    \n                \n            \n            \n                \nreadPublicSigningKey(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/key-manager/key-manager.interface.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            sign\n                        \n                        \n                    \n                \n            \n            \n                \nsign(id: number, data: string)\n                \n            \n\n\n            \n                \n                    Defined in src/key-manager/key-manager.interface.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            verifySignature\n                        \n                        \n                    \n                \n            \n            \n                \nverifySignature(signature: string, data: string, publicKey: string)\n                \n            \n\n\n            \n                \n                    Defined in src/key-manager/key-manager.interface.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signature\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    publicKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            verifySignatureById\n                        \n                        \n                    \n                \n            \n            \n                \nverifySignatureById(id: number, signature: string, data: string)\n                \n            \n\n\n            \n                \n                    Defined in src/key-manager/key-manager.interface.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    signature\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { QueryRunner } from 'typeorm';\n\nexport interface KeyManager {\n  createSigningKey(id: number, queryRunner?: QueryRunner): Promise;\n  readPublicSigningKey(id: number): Promise;\n  sign(id: number, data: string): Promise;\n  verifySignatureById(id: number, signature: string, data: string): Promise;\n  verifySignature(signature: string, data: string, publicKey: string): Promise;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/KeyManagerModule.html":{"url":"modules/KeyManagerModule.html","title":"module - KeyManagerModule","body":"\n                   \n\n\n\n\n    Modules\n    KeyManagerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_KeyManagerModule\n\n\n\ncluster_KeyManagerModule_imports\n\n\n\n\nCryptographyModule\n\nCryptographyModule\n\n\n\nKeyManagerModule\n\nKeyManagerModule\n\nKeyManagerModule -->\n\nCryptographyModule->KeyManagerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/key-manager/key-manager.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            CryptographyModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { CryptographyModule } from '../cryptography/cryptography.module';\nimport { DbKeyPair } from './implementations/key-manager-db.entity';\nimport { keyManagerFactory } from './key-manager.factory';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbKeyPair]), CryptographyModule],\n  providers: [keyManagerFactory],\n  exports: [keyManagerFactory],\n})\nexport class KeyManagerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Message.html":{"url":"classes/Message.html","title":"class - Message","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Message\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/messages/entities/messages.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                channelId\n                            \n                            \n                                content\n                            \n                            \n                                from\n                            \n                            \n                                id\n                            \n                            \n                                ipfsPath\n                            \n                            \n                                timestamp\n                            \n                            \n                                to\n                            \n                            \n                                txHash\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            channelId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field()@Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/messages/entities/messages.entity.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            content\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field()@Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/messages/entities/messages.entity.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            from\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field()@Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/messages/entities/messages.entity.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field()@PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/messages/entities/messages.entity.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ipfsPath\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field()@Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/messages/entities/messages.entity.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            timestamp\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field()@Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/messages/entities/messages.entity.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            to\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field()@Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/messages/entities/messages.entity.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            txHash\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field()@Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/messages/entities/messages.entity.ts:34\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, ObjectType } from 'type-graphql';\nimport { Column, Entity, PrimaryGeneratedColumn, Unique } from 'typeorm';\n\n@ObjectType()\n@Entity()\n@Unique('UQ_USER_CHANNELID', ['to', 'channelId'])\nexport class Message {\n  @Field()\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Field()\n  @Column()\n  timestamp: Date;\n\n  @Field()\n  @Column()\n  from: string;\n\n  @Field()\n  @Column()\n  to: string;\n\n  @Field()\n  @Column()\n  content: string;\n\n  @Field()\n  @Column()\n  ipfsPath: string;\n\n  @Field()\n  @Column()\n  txHash: string;\n\n  @Field()\n  @Column()\n  channelId: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MessagesController.html":{"url":"controllers/MessagesController.html","title":"controller - MessagesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MessagesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/messages/messages.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                messages\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getAllMessages\n                            \n                            \n                                    Async\n                                getMessages\n                            \n                            \n                                    Async\n                                sendMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getAllMessages\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllMessages()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/messages/messages.controller.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getMessages\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMessages(user: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:user')\n                \n            \n\n            \n                \n                    Defined in src/messages/messages.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            sendMessage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendMessage(message: SendMessageDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/messages/messages.controller.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                SendMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Post } from '@nestjs/common';\nimport SendMessageDto from './dto/send-message.dto';\nimport { Message } from './entities/messages.entity';\nimport { MessagesService } from './messages.service';\n\n@Controller('messages')\nexport class MessagesController {\n  constructor(private readonly messagesService: MessagesService) {}\n  @Post()\n  async sendMessage(@Body() message: SendMessageDto): Promise {\n    await this.messagesService.sendMessage(message.from, message.to, message.channelId, message.content);\n  }\n\n  @Get()\n  async getAllMessages(): Promise {\n    return this.messagesService.findAll();\n  }\n\n  @Get('/:user')\n  async getMessages(@Param('user') user: string): Promise {\n    const messages: Message[] = [];\n    // TODO: for now we're just simulating a sequence of channel id\n    //       example: ['bob-1', 'bob-2', 'bob-3', ...]\n    let i = 1;\n    while (true) {\n      const message = await this.messagesService.findForUser(user, `${user}-${i++}`);\n      if (message) {\n        messages.push(message);\n      } else {\n        break;\n      }\n    }\n    return messages;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MessagesModule.html":{"url":"modules/MessagesModule.html","title":"module - MessagesModule","body":"\n                   \n\n\n\n\n    Modules\n    MessagesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MessagesModule\n\n\n\ncluster_MessagesModule_imports\n\n\n\ncluster_MessagesModule_exports\n\n\n\ncluster_MessagesModule_providers\n\n\n\n\nEventsModule\n\nEventsModule\n\n\n\nMessagesModule\n\nMessagesModule\n\nMessagesModule -->\n\nEventsModule->MessagesModule\n\n\n\n\n\nIpfsModule\n\nIpfsModule\n\nMessagesModule -->\n\nIpfsModule->MessagesModule\n\n\n\n\n\nWeb3Module\n\nWeb3Module\n\nMessagesModule -->\n\nWeb3Module->MessagesModule\n\n\n\n\n\nMessagesService \n\nMessagesService \n\nMessagesService  -->\n\nMessagesModule->MessagesService \n\n\n\n\n\nMessagesService\n\nMessagesService\n\nMessagesModule -->\n\nMessagesService->MessagesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/messages/messages.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MessagesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MessagesController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            EventsModule\n                        \n                        \n                            IpfsModule\n                        \n                        \n                            Web3Module\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MessagesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { EventsModule } from '../events/events.module';\nimport { IpfsModule } from '../ipfs/ipfs.module';\nimport { Web3Module } from '../web3/web3.module';\nimport { Message } from './entities/messages.entity';\nimport { MessagesController } from './messages.controller';\nimport { MessagesService } from './messages.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Message]), IpfsModule, Web3Module, EventsModule],\n  controllers: [MessagesController],\n  providers: [MessagesService],\n  exports: [MessagesService],\n})\nexport class MessagesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MessagesService.html":{"url":"injectables/MessagesService.html","title":"injectable - MessagesService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  MessagesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/messages/messages.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findForUser\n                            \n                            \n                                    Async\n                                sendMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(messageRepository: Repository, ipfsService: IpfsService, web3Service: Web3Service, eventsService: EventsService)\n                    \n                \n                        \n                            \n                                Defined in src/messages/messages.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        messageRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        ipfsService\n                                                  \n                                                        \n                                                                        IpfsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        web3Service\n                                                  \n                                                        \n                                                                        Web3Service\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eventsService\n                                                  \n                                                        \n                                                                        EventsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/messages/messages.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findForUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findForUser(user: string, channelId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/messages/messages.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    channelId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            sendMessage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendMessage(from: string, to: string, channelId: string, content: string)\n                \n            \n\n\n            \n                \n                    Defined in src/messages/messages.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    from\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    to\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    channelId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    content\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { EventsService } from '../events/events.service';\nimport { IpfsService } from '../ipfs/ipfs.service';\nimport { Web3Service } from '../web3/web3.service';\nimport { Message } from './entities/messages.entity';\n\n@Injectable()\nexport class MessagesService {\n  constructor(\n    @InjectRepository(Message)\n    private readonly messageRepository: Repository,\n    private readonly ipfsService: IpfsService,\n    private readonly web3Service: Web3Service,\n    private readonly eventsService: EventsService,\n  ) {}\n\n  async sendMessage(from: string, to: string, channelId: string, content: string): Promise {\n    const ipfsPath: string = await this.ipfsService.store({\n      content,\n    });\n    Logger.debug(ipfsPath);\n    const txHash: string = await this.web3Service.emitEvent(channelId, ipfsPath, '');\n    Logger.debug(txHash);\n\n    const message = new Message();\n    message.timestamp = new Date();\n    message.from = from;\n    message.to = to;\n    message.content = content;\n    message.ipfsPath = ipfsPath;\n    message.txHash = txHash;\n    message.channelId = channelId;\n    // TODO: need to rethink this part\n    // await this.messageRepository.save(message);\n  }\n\n  async findAll(): Promise {\n    return await this.messageRepository.find();\n  }\n\n  async findForUser(user: string, channelId: string): Promise {\n    // getting messages for alice\n    // calculate next channelId\n\n    // check if message is already in the repository\n    let message = await this.messageRepository.findOne({\n      where: { to: user, channelId },\n    });\n    if (message) {\n      return message;\n    }\n\n    // given message is not in the repository, check if received transactions contain the channel id\n    // if not, simply return nothing\n    // if yes, extract the message and save it in the repository\n    const tx = await this.eventsService.getTransactionByChannelId(channelId);\n    if (!tx) {\n      return null;\n    }\n\n    const storedMessage = await this.ipfsService.retrieve(tx.content);\n    message = new Message();\n    message.content = storedMessage.content;\n    message.ipfsPath = tx.content;\n    message.txHash = tx.txHash;\n    message.channelId = channelId;\n    message.timestamp = tx.createdDate;\n    await this.messageRepository.save(message);\n\n    return this.messageRepository.findOne({ where: { channelId } });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProcessReport.html":{"url":"classes/ProcessReport.html","title":"class - ProcessReport","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProcessReport\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/channels/dto/processreport.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                processedTotal\n                            \n                            \n                                receivedMessageEvents\n                            \n                            \n                                receivedMessages\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            processedTotal\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'Processed Events'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/channels/dto/processreport.dto.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            receivedMessageEvents\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     EncodedMessageDto[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'Received Message Events'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/channels/dto/processreport.dto.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            receivedMessages\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'Received Messages'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/channels/dto/processreport.dto.ts:9\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport EncodedMessageDto from './encodedmessage.dto';\n\nexport default class ProcessReport {\n  @ApiProperty({ description: 'Processed Events' })\n  processedTotal: number;\n\n  @ApiProperty({ description: 'Received Messages' })\n  receivedMessages: number;\n\n  @ApiProperty({ description: 'Received Message Events' })\n  receivedMessageEvents: EncodedMessageDto[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RawMessageDto.html":{"url":"classes/RawMessageDto.html","title":"class - RawMessageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RawMessageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/channels/dto/rawmessage.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                channelId\n                            \n                            \n                                messageContents\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            channelId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'channel identifier'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/channels/dto/rawmessage.dto.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            messageContents\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'Message Contents'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/channels/dto/rawmessage.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'user identifier'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/channels/dto/rawmessage.dto.ts:8\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport default class RawMessageDto {\n  @ApiProperty({ description: 'Message Contents' })\n  messageContents: string;\n\n  @ApiProperty({ description: 'user identifier' })\n  userId: number;\n\n  @ApiProperty({ description: 'channel identifier' })\n  channelId: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SendMessageDto.html":{"url":"classes/SendMessageDto.html","title":"class - SendMessageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SendMessageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/messages/dto/send-message.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                channelId\n                            \n                            \n                                content\n                            \n                            \n                                from\n                            \n                            \n                                to\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            channelId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field()@ApiProperty({description: 'Channel ID'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/messages/dto/send-message.dto.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            content\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field()@ApiProperty({description: 'Content'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/messages/dto/send-message.dto.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            from\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field()@ApiProperty({description: 'From'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/messages/dto/send-message.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            to\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field()@ApiProperty({description: 'To'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/messages/dto/send-message.dto.ts:12\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Field, InputType } from 'type-graphql';\n\n@InputType()\nexport default class SendMessageDto {\n  @Field()\n  @ApiProperty({ description: 'From' })\n  from: string;\n\n  @Field()\n  @ApiProperty({ description: 'To' })\n  to: string;\n\n  @Field()\n  @ApiProperty({ description: 'Content' })\n  content: string;\n\n  // TODO: for now exposing the channel id for simplicity; this will be calculated internally in the future\n  @Field()\n  @ApiProperty({ description: 'Channel ID' })\n  channelId: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SignedSharedSecret.html":{"url":"interfaces/SignedSharedSecret.html","title":"interface - SignedSharedSecret","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SignedSharedSecret\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cryptography/test-helpers/cryptography.test-helpers.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        secret\n                                \n                                \n                                        signature\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        secret\n                                    \n                                \n                                \n                                    \n                                        secret:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        signature\n                                    \n                                \n                                \n                                    \n                                        signature:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { CryptographyService } from '../cryptography.service';\nimport { CryptographyKeyPairDto } from '../dto/cryptography-keypair.dto';\n\nexport interface AnonKeySet {\n  signingPair: CryptographyKeyPairDto;\n  oneTimePair: CryptographyKeyPairDto;\n}\n\nexport interface TestSubject extends AnonKeySet {\n  signingPair: CryptographyKeyPairDto;\n  oneTimePair: CryptographyKeyPairDto;\n  sharedSecret?: string;\n}\n\nexport interface SignedSharedSecret {\n  secret: string;\n  signature: string;\n}\n\nexport interface TestUsers {\n  alice: TestSubject;\n  bob: TestSubject;\n  trudy: TestSubject;\n}\n\nexport interface TestHelper {\n  generateAnonKeys(): Promise;\n  generateAlicenBob(): Promise;\n  generateSharedSecret(\n    yourPublicOneTimeKey: string,\n    myPrivateOneTimeKey: string,\n    myPrivateSigningKey: string,\n  ): Promise;\n  sign(secret: string, signingKey: string): Promise;\n}\n\n/**\n * Fetch a TestHelper for the CryptographyService.\n * @param service CryptographyService instance\n * @returns Object with test helper methods, which themselves wrap cryptography-service methods.\n */\nexport const getTestHelper = (service: CryptographyService): TestHelper => {\n  /**\n   * Generate an anonymous signing pair, and one-time pair.\n   * @returns Object with signingPair and oneTimePair. Each being a CryptographyPairDto\n   */\n  const generateAnonKeys = async (): Promise => {\n    const signingPair = service.generateSigningKeyPair();\n    const oneTimePair = service.generateOneUseKeyPair();\n\n    return {\n      signingPair,\n      oneTimePair,\n    };\n  };\n\n  /**\n   * Generate TestSubjects alice, bob and trudy, each with a distince signing pair and one-time pair and an undefined sharedSecret property.\n   * @returns Object with properties alice, bob and trudy. Each a TestSubject.\n   */\n  const generateAlicenBob = async (): Promise => {\n    const alice = await generateAnonKeys();\n    const bob = await generateAnonKeys();\n    const trudy = await generateAnonKeys();\n    return {\n      alice,\n      bob,\n      trudy,\n    };\n  };\n\n  /**\n   * Generate a shared secret and its signature\n   * @param yourPublic1time A 32 byte buffer containing 'my public one-time key..\n   * @param myPriv1time A 32 byte buffer containing 'your' private one-time key.\n   * @param myPrivSigning A 32 byte buffer containing 'my' private signing key.\n   * @returns Object with properties secret, and signature, being 'my' shared secret with 'you' and my signature of that secret. Each a Buffer.\n   */\n  const generateSharedSecret = async (\n    yourPublic1time: string,\n    myPriv1time: string,\n    myPrivSigning: string,\n  ): Promise => {\n    const secret = await service.generateECDHSharedSecret(yourPublic1time, myPriv1time);\n    const signature = await service.generateSignature(secret, myPrivSigning);\n\n    return { signature, secret };\n  };\n\n  const sign = async (secret: string, signingKey: string): Promise => {\n    const signature = service.generateSignature(secret, signingKey);\n    return signature;\n  };\n\n  return {\n    generateAnonKeys,\n    generateAlicenBob,\n    generateSharedSecret,\n    sign,\n  };\n};\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StringIndexedObject.html":{"url":"interfaces/StringIndexedObject.html","title":"interface - StringIndexedObject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  StringIndexedObject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            test/test-helpers.ts\n        \n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [name: string]:        StringIndexedObject | string\n\n                    \n                \n                        \n                            \n                                Defined in test/test-helpers.ts:34\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        export const mockQueryRunner = {\n  startTransaction: jest.fn(),\n  commitTransaction: jest.fn(),\n  rollbackTransaction: jest.fn(),\n  release: jest.fn(),\n  manager: {\n    save: jest.fn(),\n  },\n};\n\nexport const mockRepository = jest.fn(() => {\n  return {\n    metadata: {\n      columns: [],\n      relations: [],\n    },\n    save: jest.fn(),\n    find: jest.fn(),\n    findOne: jest.fn(),\n    findOneOrFail: jest.fn(),\n    delete: jest.fn(),\n    manager: {\n      connection: {\n        createQueryRunner: jest.fn(() => mockQueryRunner),\n      },\n    },\n  };\n});\n\nexport interface StringIndexedObject {\n  [name: string]: StringIndexedObject | string;\n}\n\n/**\n * Mock a ConfigService which takes a config object and can get values from within that object.\n * @param values A config object, or just the subset of the config object being used in this test.\n * @returns object with a function 'get' which takes a dot-seperated path to a config property on 'values' and returns it.\n */\nexport const mockConfigService = (values: StringIndexedObject) => {\n  const mockedConfigServiceGetter = get(values);\n  return {\n    get: mockedConfigServiceGetter,\n  };\n};\n\nconst get = (values: StringIndexedObject) => (dotSeperatedPath: string = '') => {\n  const path = dotSeperatedPath.split('.');\n  const [firstKey, ...childKeys] = path;\n  return getIn(values, firstKey, ...childKeys);\n};\n\nconst getIn = (obj: StringIndexedObject, currentKey: string, ...deeperKeys: string[]): string => {\n  const [nextDeepestKey, ...rest] = deeperKeys;\n  const val = obj[currentKey];\n\n  return typeof val === 'object' ? getIn(val, nextDeepestKey, ...rest) : val;\n};\n\nexport const fakerFactory = (fixture: T) => (partial?: Partial): T => {\n  return partial ? { ...fixture, ...partial } : fixture;\n};\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TestHelper.html":{"url":"interfaces/TestHelper.html","title":"interface - TestHelper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  TestHelper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cryptography/test-helpers/cryptography.test-helpers.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    generateAlicenBob\n                                \n                                \n                                    generateAnonKeys\n                                \n                                \n                                    generateSharedSecret\n                                \n                                \n                                    sign\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            generateAlicenBob\n                        \n                        \n                    \n                \n            \n            \n                \ngenerateAlicenBob()\n                \n            \n\n\n            \n                \n                    Defined in src/cryptography/test-helpers/cryptography.test-helpers.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            generateAnonKeys\n                        \n                        \n                    \n                \n            \n            \n                \ngenerateAnonKeys()\n                \n            \n\n\n            \n                \n                    Defined in src/cryptography/test-helpers/cryptography.test-helpers.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            generateSharedSecret\n                        \n                        \n                    \n                \n            \n            \n                \ngenerateSharedSecret(yourPublicOneTimeKey: string, myPrivateOneTimeKey: string, myPrivateSigningKey: string)\n                \n            \n\n\n            \n                \n                    Defined in src/cryptography/test-helpers/cryptography.test-helpers.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    yourPublicOneTimeKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    myPrivateOneTimeKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    myPrivateSigningKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            sign\n                        \n                        \n                    \n                \n            \n            \n                \nsign(secret: string, signingKey: string)\n                \n            \n\n\n            \n                \n                    Defined in src/cryptography/test-helpers/cryptography.test-helpers.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    secret\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    signingKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CryptographyService } from '../cryptography.service';\nimport { CryptographyKeyPairDto } from '../dto/cryptography-keypair.dto';\n\nexport interface AnonKeySet {\n  signingPair: CryptographyKeyPairDto;\n  oneTimePair: CryptographyKeyPairDto;\n}\n\nexport interface TestSubject extends AnonKeySet {\n  signingPair: CryptographyKeyPairDto;\n  oneTimePair: CryptographyKeyPairDto;\n  sharedSecret?: string;\n}\n\nexport interface SignedSharedSecret {\n  secret: string;\n  signature: string;\n}\n\nexport interface TestUsers {\n  alice: TestSubject;\n  bob: TestSubject;\n  trudy: TestSubject;\n}\n\nexport interface TestHelper {\n  generateAnonKeys(): Promise;\n  generateAlicenBob(): Promise;\n  generateSharedSecret(\n    yourPublicOneTimeKey: string,\n    myPrivateOneTimeKey: string,\n    myPrivateSigningKey: string,\n  ): Promise;\n  sign(secret: string, signingKey: string): Promise;\n}\n\n/**\n * Fetch a TestHelper for the CryptographyService.\n * @param service CryptographyService instance\n * @returns Object with test helper methods, which themselves wrap cryptography-service methods.\n */\nexport const getTestHelper = (service: CryptographyService): TestHelper => {\n  /**\n   * Generate an anonymous signing pair, and one-time pair.\n   * @returns Object with signingPair and oneTimePair. Each being a CryptographyPairDto\n   */\n  const generateAnonKeys = async (): Promise => {\n    const signingPair = service.generateSigningKeyPair();\n    const oneTimePair = service.generateOneUseKeyPair();\n\n    return {\n      signingPair,\n      oneTimePair,\n    };\n  };\n\n  /**\n   * Generate TestSubjects alice, bob and trudy, each with a distince signing pair and one-time pair and an undefined sharedSecret property.\n   * @returns Object with properties alice, bob and trudy. Each a TestSubject.\n   */\n  const generateAlicenBob = async (): Promise => {\n    const alice = await generateAnonKeys();\n    const bob = await generateAnonKeys();\n    const trudy = await generateAnonKeys();\n    return {\n      alice,\n      bob,\n      trudy,\n    };\n  };\n\n  /**\n   * Generate a shared secret and its signature\n   * @param yourPublic1time A 32 byte buffer containing 'my public one-time key..\n   * @param myPriv1time A 32 byte buffer containing 'your' private one-time key.\n   * @param myPrivSigning A 32 byte buffer containing 'my' private signing key.\n   * @returns Object with properties secret, and signature, being 'my' shared secret with 'you' and my signature of that secret. Each a Buffer.\n   */\n  const generateSharedSecret = async (\n    yourPublic1time: string,\n    myPriv1time: string,\n    myPrivSigning: string,\n  ): Promise => {\n    const secret = await service.generateECDHSharedSecret(yourPublic1time, myPriv1time);\n    const signature = await service.generateSignature(secret, myPrivSigning);\n\n    return { signature, secret };\n  };\n\n  const sign = async (secret: string, signingKey: string): Promise => {\n    const signature = service.generateSignature(secret, signingKey);\n    return signature;\n  };\n\n  return {\n    generateAnonKeys,\n    generateAlicenBob,\n    generateSharedSecret,\n    sign,\n  };\n};\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TestSubject.html":{"url":"interfaces/TestSubject.html","title":"interface - TestSubject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  TestSubject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cryptography/test-helpers/cryptography.test-helpers.ts\n        \n\n\n            \n                Extends\n            \n            \n                        AnonKeySet\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        oneTimePair\n                                \n                                \n                                            Optional\n                                        sharedSecret\n                                \n                                \n                                        signingPair\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        oneTimePair\n                                    \n                                \n                                \n                                    \n                                        oneTimePair:         CryptographyKeyPairDto\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CryptographyKeyPairDto\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sharedSecret\n                                    \n                                \n                                \n                                    \n                                        sharedSecret:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        signingPair\n                                    \n                                \n                                \n                                    \n                                        signingPair:         CryptographyKeyPairDto\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CryptographyKeyPairDto\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { CryptographyService } from '../cryptography.service';\nimport { CryptographyKeyPairDto } from '../dto/cryptography-keypair.dto';\n\nexport interface AnonKeySet {\n  signingPair: CryptographyKeyPairDto;\n  oneTimePair: CryptographyKeyPairDto;\n}\n\nexport interface TestSubject extends AnonKeySet {\n  signingPair: CryptographyKeyPairDto;\n  oneTimePair: CryptographyKeyPairDto;\n  sharedSecret?: string;\n}\n\nexport interface SignedSharedSecret {\n  secret: string;\n  signature: string;\n}\n\nexport interface TestUsers {\n  alice: TestSubject;\n  bob: TestSubject;\n  trudy: TestSubject;\n}\n\nexport interface TestHelper {\n  generateAnonKeys(): Promise;\n  generateAlicenBob(): Promise;\n  generateSharedSecret(\n    yourPublicOneTimeKey: string,\n    myPrivateOneTimeKey: string,\n    myPrivateSigningKey: string,\n  ): Promise;\n  sign(secret: string, signingKey: string): Promise;\n}\n\n/**\n * Fetch a TestHelper for the CryptographyService.\n * @param service CryptographyService instance\n * @returns Object with test helper methods, which themselves wrap cryptography-service methods.\n */\nexport const getTestHelper = (service: CryptographyService): TestHelper => {\n  /**\n   * Generate an anonymous signing pair, and one-time pair.\n   * @returns Object with signingPair and oneTimePair. Each being a CryptographyPairDto\n   */\n  const generateAnonKeys = async (): Promise => {\n    const signingPair = service.generateSigningKeyPair();\n    const oneTimePair = service.generateOneUseKeyPair();\n\n    return {\n      signingPair,\n      oneTimePair,\n    };\n  };\n\n  /**\n   * Generate TestSubjects alice, bob and trudy, each with a distince signing pair and one-time pair and an undefined sharedSecret property.\n   * @returns Object with properties alice, bob and trudy. Each a TestSubject.\n   */\n  const generateAlicenBob = async (): Promise => {\n    const alice = await generateAnonKeys();\n    const bob = await generateAnonKeys();\n    const trudy = await generateAnonKeys();\n    return {\n      alice,\n      bob,\n      trudy,\n    };\n  };\n\n  /**\n   * Generate a shared secret and its signature\n   * @param yourPublic1time A 32 byte buffer containing 'my public one-time key..\n   * @param myPriv1time A 32 byte buffer containing 'your' private one-time key.\n   * @param myPrivSigning A 32 byte buffer containing 'my' private signing key.\n   * @returns Object with properties secret, and signature, being 'my' shared secret with 'you' and my signature of that secret. Each a Buffer.\n   */\n  const generateSharedSecret = async (\n    yourPublic1time: string,\n    myPriv1time: string,\n    myPrivSigning: string,\n  ): Promise => {\n    const secret = await service.generateECDHSharedSecret(yourPublic1time, myPriv1time);\n    const signature = await service.generateSignature(secret, myPrivSigning);\n\n    return { signature, secret };\n  };\n\n  const sign = async (secret: string, signingKey: string): Promise => {\n    const signature = service.generateSignature(secret, signingKey);\n    return signature;\n  };\n\n  return {\n    generateAnonKeys,\n    generateAlicenBob,\n    generateSharedSecret,\n    sign,\n  };\n};\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TestUsers.html":{"url":"interfaces/TestUsers.html","title":"interface - TestUsers","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  TestUsers\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cryptography/test-helpers/cryptography.test-helpers.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        alice\n                                \n                                \n                                        bob\n                                \n                                \n                                        trudy\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        alice\n                                    \n                                \n                                \n                                    \n                                        alice:         TestSubject\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TestSubject\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        bob\n                                    \n                                \n                                \n                                    \n                                        bob:         TestSubject\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TestSubject\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        trudy\n                                    \n                                \n                                \n                                    \n                                        trudy:         TestSubject\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TestSubject\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { CryptographyService } from '../cryptography.service';\nimport { CryptographyKeyPairDto } from '../dto/cryptography-keypair.dto';\n\nexport interface AnonKeySet {\n  signingPair: CryptographyKeyPairDto;\n  oneTimePair: CryptographyKeyPairDto;\n}\n\nexport interface TestSubject extends AnonKeySet {\n  signingPair: CryptographyKeyPairDto;\n  oneTimePair: CryptographyKeyPairDto;\n  sharedSecret?: string;\n}\n\nexport interface SignedSharedSecret {\n  secret: string;\n  signature: string;\n}\n\nexport interface TestUsers {\n  alice: TestSubject;\n  bob: TestSubject;\n  trudy: TestSubject;\n}\n\nexport interface TestHelper {\n  generateAnonKeys(): Promise;\n  generateAlicenBob(): Promise;\n  generateSharedSecret(\n    yourPublicOneTimeKey: string,\n    myPrivateOneTimeKey: string,\n    myPrivateSigningKey: string,\n  ): Promise;\n  sign(secret: string, signingKey: string): Promise;\n}\n\n/**\n * Fetch a TestHelper for the CryptographyService.\n * @param service CryptographyService instance\n * @returns Object with test helper methods, which themselves wrap cryptography-service methods.\n */\nexport const getTestHelper = (service: CryptographyService): TestHelper => {\n  /**\n   * Generate an anonymous signing pair, and one-time pair.\n   * @returns Object with signingPair and oneTimePair. Each being a CryptographyPairDto\n   */\n  const generateAnonKeys = async (): Promise => {\n    const signingPair = service.generateSigningKeyPair();\n    const oneTimePair = service.generateOneUseKeyPair();\n\n    return {\n      signingPair,\n      oneTimePair,\n    };\n  };\n\n  /**\n   * Generate TestSubjects alice, bob and trudy, each with a distince signing pair and one-time pair and an undefined sharedSecret property.\n   * @returns Object with properties alice, bob and trudy. Each a TestSubject.\n   */\n  const generateAlicenBob = async (): Promise => {\n    const alice = await generateAnonKeys();\n    const bob = await generateAnonKeys();\n    const trudy = await generateAnonKeys();\n    return {\n      alice,\n      bob,\n      trudy,\n    };\n  };\n\n  /**\n   * Generate a shared secret and its signature\n   * @param yourPublic1time A 32 byte buffer containing 'my public one-time key..\n   * @param myPriv1time A 32 byte buffer containing 'your' private one-time key.\n   * @param myPrivSigning A 32 byte buffer containing 'my' private signing key.\n   * @returns Object with properties secret, and signature, being 'my' shared secret with 'you' and my signature of that secret. Each a Buffer.\n   */\n  const generateSharedSecret = async (\n    yourPublic1time: string,\n    myPriv1time: string,\n    myPrivSigning: string,\n  ): Promise => {\n    const secret = await service.generateECDHSharedSecret(yourPublic1time, myPriv1time);\n    const signature = await service.generateSignature(secret, myPrivSigning);\n\n    return { signature, secret };\n  };\n\n  const sign = async (secret: string, signingKey: string): Promise => {\n    const signature = service.generateSignature(secret, signingKey);\n    return signature;\n  };\n\n  return {\n    generateAnonKeys,\n    generateAlicenBob,\n    generateSharedSecret,\n    sign,\n  };\n};\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/users.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                channelmembers\n                            \n                            \n                                contacts\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            channelmembers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ChannelMember[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {nullable: true})@OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/entities/users.entity.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            contacts\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Contact[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {nullable: true})@OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/entities/users.entity.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined)@PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/entities/users.entity.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field()@Column({length: 500})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/entities/users.entity.ts:16\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, ID, ObjectType } from 'type-graphql';\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn, Unique } from 'typeorm';\nimport { ChannelMember } from '../../channels/entities/channelmembers.entity';\nimport { Contact } from '../../contacts/contacts.entity';\n\n@Entity()\n@ObjectType()\n@Unique('UQ_NAME', ['name'])\nexport class User {\n  @Field(type => ID)\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Field()\n  @Column({ length: 500 })\n  name: string;\n\n  @Field(type => [ChannelMember], { nullable: true })\n  @OneToMany(\n    type => ChannelMember,\n    channelmember => channelmember.user,\n  )\n  channelmembers: ChannelMember[];\n\n  @Field(type => [Contact], { nullable: true })\n  @OneToMany(\n    type => Contact,\n    contact => contact.user,\n  )\n  contacts: Contact[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserDto.html":{"url":"classes/UserDto.html","title":"class - UserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/user.dto.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Partial\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field()@ApiProperty({description: 'User ID'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/user.dto.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field()@ApiProperty({description: 'User name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/user.dto.ts:13\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Field, InputType } from 'type-graphql';\nimport { User } from '../entities/users.entity';\n\n@InputType({ description: 'Partial User' })\nexport default class UserDto implements Partial {\n  @Field()\n  @ApiProperty({ description: 'User ID' })\n  id: number;\n\n  @Field()\n  @ApiProperty({ description: 'User name' })\n  name: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                get\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(user: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            get\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    get(name: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post, Query } from '@nestjs/common';\nimport CreateUserDto from './dto/create-user.dto';\nimport UserDto from './dto/user.dto';\nimport { UsersService } from './users.service';\n\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly userService: UsersService) {}\n\n  @Post()\n  async create(@Body() user: CreateUserDto): Promise {\n    return this.userService.create(user);\n  }\n\n  @Get()\n  async get(@Query('name') name: string): Promise {\n    return this.userService.findByName(name);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nKeyManagerModule\n\nKeyManagerModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nKeyManagerModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            KeyManagerModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { KeyManagerModule } from '../key-manager/key-manager.module';\nimport { User } from './entities/users.entity';\nimport { UsersResolver } from './resolvers/users.resolver';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User]), KeyManagerModule],\n  exports: [UsersService],\n  providers: [UsersService, UsersResolver],\n  controllers: [UsersController],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UsersResolver.html":{"url":"classes/UsersResolver.html","title":"class - UsersResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UsersResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/resolvers/users.resolver.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                userByName\n                            \n                            \n                                    Public\n                                    Async\n                                Users\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/users/resolvers/users.resolver.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            userByName\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    userByName(name: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined)\n                \n            \n\n            \n                \n                    Defined in src/users/resolvers/users.resolver.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            Users\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    Users()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined)\n                \n            \n\n            \n                \n                    Defined in src/users/resolvers/users.resolver.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Args, Query, Resolver } from '@nestjs/graphql';\nimport { User } from '../entities/users.entity';\nimport { UsersService } from '../users.service';\n\n@Resolver(of => User)\nexport class UsersResolver {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Query(returns => User)\n  public async userByName(@Args('name') name: string): Promise {\n    return this.usersService.findByName(name);\n  }\n\n  @Query(returns => [User])\n  public async Users(): Promise {\n    return this.usersService.findAll();\n  }\n\n  // @Mutation(returns => User)\n  // public async createUser(@Args('data') user: User): Promise {\n  //   return this.usersService.create(user);\n  // }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                find\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                findByName\n                            \n                            \n                                    Async\n                                getPublicKey\n                            \n                            \n                                    Async\n                                sign\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, keyManagerService: KeyManager)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        keyManagerService\n                                                  \n                                                        \n                                                                        KeyManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(user: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            find\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    find(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: number, orFail)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    orFail\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findByName\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findByName(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getPublicKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPublicKey(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            sign\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sign(id: number, data: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { KeyManager } from '../key-manager/key-manager.interface';\nimport CreateUserDto from './dto/create-user.dto';\nimport UserDto from './dto/user.dto';\nimport { User } from './entities/users.entity';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(User)\n    private readonly userRepository: Repository,\n    @Inject('KeyManager')\n    private readonly keyManagerService: KeyManager,\n  ) {}\n\n  async create(user: CreateUserDto): Promise {\n    const newUser = new User();\n    newUser.name = user.name;\n\n    const queryRunner = this.userRepository.manager.connection.createQueryRunner();\n    queryRunner.startTransaction();\n    try {\n      const dbUser = await queryRunner.manager.save(newUser);\n      await this.keyManagerService.createSigningKey(dbUser.id, queryRunner);\n      await queryRunner.commitTransaction();\n      return {\n        id: dbUser.id,\n        name: dbUser.name,\n      };\n    } catch (e) {\n      await queryRunner.rollbackTransaction();\n      throw e;\n    } finally {\n      queryRunner.release();\n    }\n  }\n\n  async findAll(): Promise {\n    return this.userRepository.find();\n  }\n\n  async getPublicKey(id: number): Promise {\n    return this.keyManagerService.readPublicSigningKey(id);\n  }\n\n  async sign(id: number, data: string): Promise {\n    return this.keyManagerService.sign(id, data);\n  }\n\n  async findByName(name: string): Promise {\n    return this.userRepository.findOne({\n      select: ['name'],\n      where: { name },\n    });\n  }\n\n  async find(name: string): Promise {\n    return this.userRepository.findOne({ where: { name } });\n  }\n\n  async findById(id: number, orFail = false): Promise {\n    if (orFail) {\n      return this.userRepository.findOneOrFail(id);\n    } else {\n      return this.userRepository.findOne(id);\n    }\n  }\n\n  async delete(name: string): Promise {\n    await this.userRepository.delete({ name });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VaultKeyManager.html":{"url":"classes/VaultKeyManager.html","title":"class - VaultKeyManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VaultKeyManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/key-manager/implementations/key-manager-vault.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            KeyManager\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                checkResponse\n                            \n                            \n                                    Async\n                                createSigningKey\n                            \n                            \n                                    Async\n                                readPublicSigningKey\n                            \n                            \n                                    Async\n                                sign\n                            \n                            \n                                    Async\n                                verifySignature\n                            \n                            \n                                    Async\n                                verifySignatureById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: AxiosInstance, cryptographyService: CryptographyService)\n                    \n                \n                        \n                            \n                                Defined in src/key-manager/implementations/key-manager-vault.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    AxiosInstance\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptographyService\n                                                  \n                                                        \n                                                                        CryptographyService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            checkResponse\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    checkResponse(response: AxiosResponse, context: string, expectedStatus: number)\n                \n            \n\n\n            \n                \n                    Defined in src/key-manager/implementations/key-manager-vault.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                            AxiosResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    expectedStatus\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        200\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createSigningKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createSigningKey(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/key-manager/implementations/key-manager-vault.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            readPublicSigningKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    readPublicSigningKey(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/key-manager/implementations/key-manager-vault.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            sign\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sign(id: number, data: string)\n                \n            \n\n\n            \n                \n                    Defined in src/key-manager/implementations/key-manager-vault.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            verifySignature\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    verifySignature(signature: string, data: string, publicKey: string)\n                \n            \n\n\n            \n                \n                    Defined in src/key-manager/implementations/key-manager-vault.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signature\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    publicKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            verifySignatureById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    verifySignatureById(id: number, signature: string, data: string)\n                \n            \n\n\n            \n                \n                    Defined in src/key-manager/implementations/key-manager-vault.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    signature\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { AxiosInstance, AxiosResponse } from 'axios';\nimport { CryptographyService } from '../../cryptography/cryptography.service';\nimport { KeyManager } from '../key-manager.interface';\n\nexport class VaultKeyManager implements KeyManager {\n  constructor(private readonly client: AxiosInstance, private readonly cryptographyService: CryptographyService) {}\n\n  async createSigningKey(id: number): Promise {\n    const payload = {\n      type: 'ed25519',\n      derived: false,\n    };\n    const response: AxiosResponse = await this.client.post(`/v1/users-signing-keys/keys/${id}`, payload);\n    this.checkResponse(response, `Failed to create private signing keys for user ${id}`, 204);\n  }\n\n  async readPublicSigningKey(id: number): Promise {\n    const response: AxiosResponse = await this.client.get(`/v1/users-signing-keys/keys/${id}`);\n    this.checkResponse(response, `Failed to create private signing keys for user ${id}`);\n    return response.data.data.keys['1'].public_key;\n  }\n\n  async sign(id: number, data: string): Promise {\n    const payload = {\n      input: Buffer.from(data).toString('base64'),\n    };\n    const response: AxiosResponse = await this.client.post(`/v1/users-signing-keys/sign/${id}`, payload);\n    this.checkResponse(response, `Failed to create private signing keys for user ${id}`);\n    const fullSignature: string = response.data.data.signature;\n    const signature = fullSignature.split(':')[2];\n    return signature;\n  }\n\n  async verifySignatureById(id: number, signature: string, data: string): Promise {\n    const pubKey: string = await this.readPublicSigningKey(id);\n    return this.verifySignature(signature, data, pubKey);\n  }\n\n  async verifySignature(signature: string, data: string, publicKey: string): Promise {\n    return this.cryptographyService.validateSignature(signature, Buffer.from(data).toString('base64'), publicKey);\n  }\n\n  private checkResponse(response: AxiosResponse, context: string, expectedStatus = 200) {\n    if (!response) {\n      throw Error(`${context}: no response`);\n    }\n    if (response.status !== expectedStatus) {\n      throw Error(`${context}: server responded ${response.status}`);\n    }\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Web3Config.html":{"url":"interfaces/Web3Config.html","title":"interface - Web3Config","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Web3Config\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/web3/web3.configuration.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        broadcastAccount\n                                \n                                \n                                        chain\n                                \n                                \n                                        contractAddress\n                                \n                                \n                                        hardFork\n                                \n                                \n                                        rpcUrl\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        broadcastAccount\n                                    \n                                \n                                \n                                    \n                                        broadcastAccount:         BroadcastAccountConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         BroadcastAccountConfig\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        chain\n                                    \n                                \n                                \n                                    \n                                        chain:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        contractAddress\n                                    \n                                \n                                \n                                    \n                                        contractAddress:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hardFork\n                                    \n                                \n                                \n                                    \n                                        hardFork:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rpcUrl\n                                    \n                                \n                                \n                                    \n                                        rpcUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export default () => ({\n  web3: {\n    chain: process.env.WEB3_CHAIN || 'ropsten',\n    hardfork: process.env.WEB3_HARDFORK || 'petersburg',\n    rpcUrl: process.env.WEB3_RPC_URL,\n    contractAddress: process.env.WEB3_CONTRACT_ADDRESS,\n    broadcastAccount: {\n      address: process.env.WEB3_BROADCAST_ACC_ADDRESS,\n      publicKey: process.env.WEB3_BROADCAST_ACC_PUBLIC_KEY,\n      privateKey: process.env.WEB3_BROADCAST_ACC_PRIVATE_KEY,\n    },\n  },\n});\n\nexport interface EkhoWeb3Config {\n  web3: Web3Config;\n}\n\ninterface Web3Config {\n  chain: string;\n  hardFork: string;\n  rpcUrl: string;\n  contractAddress: string;\n  broadcastAccount: BroadcastAccountConfig;\n}\n\ninterface BroadcastAccountConfig {\n  address: string;\n  publicKey: string;\n  privateKey: string;\n}\n\nexport const mockWeb3Config: EkhoWeb3Config = {\n  web3: {\n    chain: 'no-such-blockchain',\n    hardFork: 'skibbereen',\n    rpcUrl: 'wss://no-such-location',\n    contractAddress: '0xffffff7f',\n    broadcastAccount: {\n      address: '0x0',\n      publicKey: '0x123',\n      privateKey: '0x456',\n    },\n  },\n};\n\nexport const getMockWeb3Config = (partial?: Partial): EkhoWeb3Config => {\n  if (!partial) {\n    partial = {};\n  }\n  return { ...mockWeb3Config, ...partial };\n};\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/Web3Controller.html":{"url":"controllers/Web3Controller.html","title":"controller - Web3Controller","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  Web3Controller\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/web3/web3.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                web3\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                GetBlockchainEvents\n                            \n                            \n                                    Async\n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            GetBlockchainEvents\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    GetBlockchainEvents()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('refresh')\n                \n            \n\n            \n                \n                    Defined in src/web3/web3.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            post\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    post(channelId: string, content: string, signature: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':channel-id/:content/:signature')\n                \n            \n\n            \n                \n                    Defined in src/web3/web3.controller.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    channelId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    content\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    signature\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, Post } from '@nestjs/common';\nimport { Web3Service } from './web3.service';\n\n@Controller('web3')\nexport class Web3Controller {\n  constructor(private readonly web3Service: Web3Service) {}\n\n  @Get('refresh')\n  async GetBlockchainEvents(): Promise {\n    return this.web3Service.Refresh();\n  }\n\n  // TODO: do not be lazy and use a proper dto\n  @Post(':channel-id/:content/:signature')\n  async post(\n    @Param('channel-id') channelId: string,\n    @Param('content') content: string,\n    @Param('signature') signature: string,\n  ): Promise {\n    return this.web3Service.emitEvent(channelId, content, signature);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/Web3Module.html":{"url":"modules/Web3Module.html","title":"module - Web3Module","body":"\n                   \n\n\n\n\n    Modules\n    Web3Module\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_Web3Module\n\n\n\ncluster_Web3Module_imports\n\n\n\ncluster_Web3Module_exports\n\n\n\ncluster_Web3Module_providers\n\n\n\n\nEventsModule\n\nEventsModule\n\n\n\nWeb3Module\n\nWeb3Module\n\nWeb3Module -->\n\nEventsModule->Web3Module\n\n\n\n\n\nWeb3Service \n\nWeb3Service \n\nWeb3Service  -->\n\nWeb3Module->Web3Service \n\n\n\n\n\nWeb3Service\n\nWeb3Service\n\nWeb3Module -->\n\nWeb3Service->Web3Module\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/web3/web3.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            Web3Service\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            Web3Controller\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            EventsModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            Web3Service\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { EventsModule } from '../events/events.module';\nimport { Web3Controller } from './web3.controller';\nimport { Web3Factory } from './web3.factory';\nimport { Web3Service } from './web3.service';\n\n@Module({\n  imports: [EventsModule],\n  controllers: [Web3Controller],\n  providers: [Web3Service, Web3Factory, ConfigService],\n  exports: [Web3Service],\n})\nexport class Web3Module {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/Web3Service.html":{"url":"injectables/Web3Service.html","title":"injectable - Web3Service","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  Web3Service\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/web3/web3.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                address\n                            \n                            \n                                    Private\n                                    Readonly\n                                chain\n                            \n                            \n                                    Private\n                                    Readonly\n                                contractAddress\n                            \n                            \n                                    Private\n                                    Readonly\n                                hardfork\n                            \n                            \n                                    Private\n                                    Readonly\n                                privateKey\n                            \n                            \n                                    Private\n                                    Readonly\n                                publicKey\n                            \n                            \n                                    Private\n                                    Readonly\n                                rpcUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                emitEvent\n                            \n                            \n                                    Async\n                                getTransactionCount\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                            \n                                    Async\n                                Refresh\n                            \n                            \n                                    Async\n                                sendSignerTransaction\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(eventsService: EventsService, configService: ConfigService, web3: Web3)\n                    \n                \n                        \n                            \n                                Defined in src/web3/web3.service.ts:36\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        eventsService\n                                                  \n                                                        \n                                                                        EventsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        web3\n                                                  \n                                                        \n                                                                    Web3\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            emitEvent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    emitEvent(channelId: string, content: string, signature: string)\n                \n            \n\n\n            \n                \n                    Defined in src/web3/web3.service.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    channelId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    content\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    signature\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTransactionCount\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTransactionCount(account: string)\n                \n            \n\n\n            \n                \n                    Defined in src/web3/web3.service.ts:159\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    account\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            onModuleInit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/web3/web3.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            Refresh\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    Refresh()\n                \n            \n\n\n            \n                \n                    Defined in src/web3/web3.service.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            sendSignerTransaction\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendSignerTransaction(raw: string)\n                \n            \n\n\n            \n                \n                    Defined in src/web3/web3.service.ts:171\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    raw\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            address\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/web3/web3.service.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            chain\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/web3/web3.service.ts:30\n                            \n                        \n\n                \n                    \n                        Probably need to create a deploy contract method or check with the gurus whats the best way to deal with it.\nFor now, this was deployed in Ropsten: 0x5b821362887db76980399bf4206ba747bef7ad95\n   pragma solidity >=0.4.22 \n   event NotifyNewMessage(string messageUid);\n\n   function notify(string memory messageUid) public {\n       emit NotifyNewMessage(messageUid);\n   }   }\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            contractAddress\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/web3/web3.service.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            hardfork\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/web3/web3.service.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            privateKey\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/web3/web3.service.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            publicKey\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/web3/web3.service.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            rpcUrl\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/web3/web3.service.ts:32\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Transaction as Tx } from 'ethereumjs-tx';\nimport { bufferToHex } from 'ethereumjs-util';\nimport Web3 from 'web3';\nimport { Block } from '../events/entities/blocks.entity';\nimport { EkhoEvent } from '../events/entities/events.entity';\nimport { EventsService } from '../events/events.service';\nimport { Web3Constants } from './web3.constants';\n\n@Injectable()\nexport class Web3Service {\n  /**\n   * Probably need to create a deploy contract method or check with the gurus whats the best way to deal with it.\n   * For now, this was deployed in Ropsten: 0x5b821362887db76980399bf4206ba747bef7ad95\n   *\n   *   pragma solidity >=0.4.22 ('web3.chain');\n    this.hardfork = this.configService.get('web3.hardfork');\n    this.rpcUrl = this.configService.get('web3.rpcUrl');\n    this.contractAddress = this.configService.get('web3.contractAddress');\n    this.address = this.configService.get('web3.broadcastAccount.address');\n    this.publicKey = this.configService.get('web3.broadcastAccount.publicKey');\n    this.privateKey = this.configService.get('web3.broadcastAccount.privateKey');\n  }\n\n  async onModuleInit(): Promise {\n    await this.Refresh();\n  }\n\n  async Refresh(): Promise {\n    Logger.debug('eventlog subscriber: polling blockchain for new log events.');\n    let transactionsFound: number = 0;\n    const options = {\n      fromBlock: await this.eventsService.getLatestBlock(),\n      address: this.contractAddress,\n    };\n    let lastSavedBlock: number = options.fromBlock;\n    this.web3.eth\n      .subscribe('logs', options, (error, result) => {\n        if (error) {\n          Logger.error(result);\n        }\n      })\n      .on('data', async log => {\n        Logger.debug('eventlog subscriber: new blockchain event found');\n        const blockNumber = log.blockNumber;\n        const transactionHash = log.transactionHash;\n\n        const decoded = this.web3.eth.abi.decodeParameters(['string', 'string', 'string'], log.data);\n        const channelId = Web3.utils.toUtf8(decoded[0]);\n        const content = Web3.utils.toUtf8(decoded[1]);\n        const signature = Web3.utils.toUtf8(decoded[2]);\n\n        let tx = await this.eventsService.getByTransactionHash(transactionHash);\n        if (!tx) {\n          tx = new EkhoEvent();\n        }\n\n        const currentBlock = new Block();\n        currentBlock.blockNumber = blockNumber;\n\n        tx.txHash = transactionHash;\n        tx.channelId = channelId;\n        tx.content = content;\n        tx.signature = signature;\n        tx.status = 'mined'; // TODO: change to ENUM\n        tx.block = currentBlock;\n        tx.processed = false;\n        // TODO: wrap these saves in a transaction\n        if (blockNumber > lastSavedBlock) {\n          lastSavedBlock = await this.eventsService.saveBlockInfo(currentBlock);\n        }\n        const dbEvent = await this.eventsService.getByTransactionHash(tx.txHash);\n        if (!dbEvent) {\n          Logger.debug('eventlog subscriber: saving new event to db', tx.txHash);\n          await this.eventsService.save(tx);\n          transactionsFound++;\n        }\n      })\n      .on('changed', log => {\n        Logger.debug(log);\n      });\n    Logger.debug(\n      `eventlog subscriber: subscribed and retrieved ${transactionsFound} new transactions from contract ${this.contractAddress} via ${this.rpcUrl}`,\n    );\n  }\n\n  async emitEvent(channelId: string, content: string, signature: string): Promise {\n    Logger.debug('... getting nonce');\n    const txCount = await this.getTransactionCount(this.address);\n    Logger.debug(`nonce: ${txCount}`);\n    const bufferedPrivateKey = Buffer.from(this.privateKey, 'hex');\n    const contract = new this.web3.eth.Contract(Web3Constants.abi as any, this.contractAddress);\n\n    const data = contract.methods\n      .notify(Web3.utils.fromAscii(channelId), Web3.utils.fromAscii(content), Web3.utils.fromAscii(signature))\n      .encodeABI();\n\n    const txObject = {\n      nonce: this.web3.utils.toHex(txCount),\n      gasLimit: this.web3.utils.toHex(800000),\n      gasPrice: this.web3.utils.toHex(this.web3.utils.toWei('15', 'gwei')),\n      to: this.contractAddress,\n      data,\n    };\n\n    const tx = new Tx(txObject, { chain: this.chain, hardfork: this.hardfork });\n    if (!(tx.validate() && bufferToHex(tx.getSenderAddress()) === this.address)) {\n      // TODO: need to dig why this fails while transaction gets executed and mined successfully\n      // throw Error('Invalid transaction');\n    }\n\n    tx.sign(bufferedPrivateKey);\n\n    const serializedTx = tx.serialize();\n    const raw = '0x' + serializedTx.toString('hex');\n\n    try {\n      Logger.debug('broadcasting transaction to chain');\n      const txHash = await this.sendSignerTransaction(raw);\n      if (txHash) {\n        Logger.debug('...transaction mined on chain: ', txHash);\n        return txHash;\n      } else {\n        throw new Error('error writing to chain');\n      }\n    } catch (e) {\n      Logger.debug('transaction failed: ', (e as Error).message);\n      throw e;\n    }\n  }\n\n  async getTransactionCount(account: string): Promise {\n    try {\n      const txCount = await this.web3.eth.getTransactionCount(account);\n      return txCount;\n    } catch (e) {\n      return e;\n    }\n    // return new Promise(async (resolve, reject) => {\n    //   this.web3.eth.getTransactionCount(account, (err, txCount) => (err ? reject(`${err}`) : resolve(txCount)));\n    // });\n  }\n\n  async sendSignerTransaction(raw: string): Promise {\n    try {\n      const txHash = await this.web3.eth.sendSignedTransaction(raw);\n      return txHash.transactionHash;\n    } catch (e) {\n      throw e;\n    }\n    // return new Promise(async (resolve, reject) => {\n    //   this.web3.eth.sendSignedTransaction(raw, (err, txHash) => (err ? reject(`${err}`) : resolve(txHash)));\n    // });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/channels/channels.controller.ts\n            \n            controller\n            ChannelsController\n            \n                11 %\n                (1/9)\n            \n        \n        \n            \n                \n                src/channels/channels.service.ts\n            \n            injectable\n            ChannelsService\n            \n                10 %\n                (4/40)\n            \n        \n        \n            \n                \n                src/channels/dto/channel.dto.ts\n            \n            class\n            ChannelDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/channels/dto/channelmember.dto.ts\n            \n            class\n            ChannelMemberDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/channels/dto/channelmessage.dto.ts\n            \n            class\n            ChannelMessageDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/channels/dto/create-channel.dto.ts\n            \n            class\n            CreateChannelDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/channels/dto/create-channelmember.dto.ts\n            \n            class\n            CreateChannelMemberDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/channels/dto/create-channelmessage.dto.ts\n            \n            class\n            CreateChannelMessageDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/channels/dto/encodedmessage.dto.ts\n            \n            class\n            EncodedMessageDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/channels/dto/processreport.dto.ts\n            \n            class\n            ProcessReport\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/channels/dto/rawmessage.dto.ts\n            \n            class\n            RawMessageDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/channels/entities/channelmembers.entity.ts\n            \n            class\n            ChannelMember\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/channels/entities/channelmessages.entity.ts\n            \n            class\n            ChannelMessage\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/channels/entities/channels.entity.ts\n            \n            class\n            Channel\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/channels/resolvers/channel.resolver.ts\n            \n            class\n            ChannelResolver\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/channels/resolvers/channelmembers.resolver.ts\n            \n            class\n            ChannelMembersResolver\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/contacts/contacts.controller.ts\n            \n            controller\n            ContactsController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/contacts/contacts.entity.ts\n            \n            class\n            Contact\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/contacts/contacts.service.ts\n            \n            injectable\n            ContactsService\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/contacts/dto/contact-handshake.dto.ts\n            \n            class\n            ContactHandshakeDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/contacts/dto/contact.dto.ts\n            \n            class\n            ContactDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/contacts/resolvers/contacts.resolver.ts\n            \n            class\n            ContactsResolver\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/contacts/test-helpers/faker.ts\n            \n            variable\n            anonContact\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/contacts/test-helpers/faker.ts\n            \n            variable\n            anonContactHandshakeDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/contacts/test-helpers/faker.ts\n            \n            variable\n            fakeContact\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/contacts/test-helpers/faker.ts\n            \n            variable\n            fakeContactHandshake\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/contacts/test-helpers/mock-contacts-service.ts\n            \n            variable\n            mockContactsService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/cryptography/cryptography.service.ts\n            \n            injectable\n            CryptographyService\n            \n                80 %\n                (12/15)\n            \n        \n        \n            \n                \n                src/cryptography/cryptography.service.ts\n            \n            variable\n            BASE64\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/cryptography/dto/cryptography-keypair.dto.ts\n            \n            class\n            CryptographyKeyPairDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/cryptography/test-helpers/cryptography.test-helpers.ts\n            \n            interface\n            AnonKeySet\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/cryptography/test-helpers/cryptography.test-helpers.ts\n            \n            interface\n            SignedSharedSecret\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/cryptography/test-helpers/cryptography.test-helpers.ts\n            \n            interface\n            TestHelper\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/cryptography/test-helpers/cryptography.test-helpers.ts\n            \n            interface\n            TestSubject\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/cryptography/test-helpers/cryptography.test-helpers.ts\n            \n            interface\n            TestUsers\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/cryptography/test-helpers/cryptography.test-helpers.ts\n            \n            variable\n            getTestHelper\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/development/development.controller.ts\n            \n            controller\n            DevelopmentController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/events/dto/ekhoevent.dto.ts\n            \n            class\n            EkhoEventDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/events/entities/blocks.entity.ts\n            \n            class\n            Block\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/events/entities/events.entity.ts\n            \n            class\n            EkhoEvent\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/events/events.controller.ts\n            \n            controller\n            EventsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/events/events.service.ts\n            \n            injectable\n            EventsService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/events/test-helpers/faker.ts\n            \n            variable\n            anonBlock\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/events/test-helpers/faker.ts\n            \n            variable\n            anonEvent\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/events/test-helpers/faker.ts\n            \n            variable\n            fakeEvent\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/events/test-helpers/mock-events-service.ts\n            \n            variable\n            mockEventsService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/ipfs/dto/ipfs-message.dto.ts\n            \n            class\n            IpfsMessageDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/ipfs/ipfs.client.factory.ts\n            \n            variable\n            ipfsClientFactory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/ipfs/ipfs.configuration.ts\n            \n            variable\n            mockIpfsConfigValues\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/ipfs/ipfs.controller.ts\n            \n            controller\n            IpfsController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/ipfs/ipfs.service.ts\n            \n            injectable\n            IpfsService\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                src/ipfs/test-helpers/faker.ts\n            \n            variable\n            anonIpfsMessage\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/ipfs/test-helpers/faker.ts\n            \n            variable\n            fakeIpfsMessage\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/ipfs/test-helpers/mock-ipfs-service.ts\n            \n            variable\n            mockIpfsService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/ipfs/test-helpers/mock-ipfs.client.ts\n            \n            variable\n            mockIpfsClient\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/key-manager/implementations/key-manager-db.entity.ts\n            \n            class\n            DbKeyPair\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/key-manager/implementations/key-manager-db.ts\n            \n            class\n            DbKeyManager\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/key-manager/implementations/key-manager-vault.ts\n            \n            class\n            VaultKeyManager\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/key-manager/key-manager.factory.ts\n            \n            variable\n            keyManagerFactory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/key-manager/key-manager.interface.ts\n            \n            interface\n            KeyManager\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/messages/dto/send-message.dto.ts\n            \n            class\n            SendMessageDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/messages/entities/messages.entity.ts\n            \n            class\n            Message\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/messages/messages.controller.ts\n            \n            controller\n            MessagesController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/messages/messages.service.ts\n            \n            injectable\n            MessagesService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/messages/test-helpers/faker.ts\n            \n            variable\n            anonChannel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/messages/test-helpers/faker.ts\n            \n            variable\n            anonChannelMember\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/messages/test-helpers/faker.ts\n            \n            variable\n            anonChannelMessage\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/messages/test-helpers/faker.ts\n            \n            variable\n            anonMessage\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/messages/test-helpers/faker.ts\n            \n            variable\n            anonSendMessageDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/messages/test-helpers/faker.ts\n            \n            variable\n            fakeChannel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/messages/test-helpers/faker.ts\n            \n            variable\n            fakeChannelMember\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/messages/test-helpers/faker.ts\n            \n            variable\n            fakeChannelMessage\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/messages/test-helpers/faker.ts\n            \n            variable\n            fakeMessage\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/messages/test-helpers/faker.ts\n            \n            variable\n            fakeSendMessageDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/messages/test-helpers/mock-message-service.ts\n            \n            variable\n            mockMessagesService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dto/user.dto.ts\n            \n            class\n            UserDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/entities/users.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/resolvers/users.resolver.ts\n            \n            class\n            UsersResolver\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/test-helpers/faker.ts\n            \n            variable\n            anonUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/test-helpers/faker.ts\n            \n            variable\n            fakeUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/test-helpers/mock-users-service.ts\n            \n            variable\n            mockUsersService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/web3/test-helpers/mock-web3.ts\n            \n            variable\n            mockWeb3\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/web3/test-helpers/mock-web3.ts\n            \n            variable\n            mockWeb3Service\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/web3/web3.configuration.ts\n            \n            interface\n            BroadcastAccountConfig\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/web3/web3.configuration.ts\n            \n            interface\n            EkhoWeb3Config\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/web3/web3.configuration.ts\n            \n            interface\n            Web3Config\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/web3/web3.configuration.ts\n            \n            variable\n            getMockWeb3Config\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/web3/web3.configuration.ts\n            \n            variable\n            mockWeb3Config\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/web3/web3.constants.ts\n            \n            variable\n            Web3Constants\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/web3/web3.controller.ts\n            \n            controller\n            Web3Controller\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/web3/web3.factory.ts\n            \n            variable\n            Web3Factory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/web3/web3.service.ts\n            \n            injectable\n            Web3Service\n            \n                7 %\n                (1/14)\n            \n        \n        \n            \n                \n                test/test-helpers.ts\n            \n            interface\n            StringIndexedObject\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/test-helpers.ts\n            \n            variable\n            fakerFactory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/test-helpers.ts\n            \n            variable\n            get\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/test-helpers.ts\n            \n            variable\n            getIn\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/test-helpers.ts\n            \n            variable\n            mockConfigService\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                test/test-helpers.ts\n            \n            variable\n            mockQueryRunner\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                test/test-helpers.ts\n            \n            variable\n            mockRepository\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^6.7.2\n        \n            @nestjs/config : 0.0.9\n        \n            @nestjs/core : ^6.7.2\n        \n            @nestjs/graphql : ^6.5.4\n        \n            @nestjs/platform-express : ^6.7.2\n        \n            @nestjs/swagger : ^4.1.7\n        \n            @nestjs/typeorm : ^6.2.0\n        \n            apollo-server-express : ^2.9.16\n        \n            ethereumjs-tx : ^2.1.2\n        \n            graphql : ^14.6.0\n        \n            graphql-tools : ^4.0.6\n        \n            ipfs-http-client : ^40.2.1\n        \n            moment : ^2.24.0\n        \n            pg : ^7.17.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.0\n        \n            rxjs : ^6.5.3\n        \n            sodium-native : ^2.4.6\n        \n            swagger-ui-express : ^4.1.2\n        \n            typeorm : ^0.2.22\n        \n            web3 : ^1.2.4\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nDescription\nProject Ekho - peer-to-peer communication module.\nCheck detailed documentation.\nInstallation\n$ npm installConfiguration\n# .env contents\nIPFS_HOST=ipfs.infura.io\nIPFS_PORT=5001Running the app\nRequirements\n\nnode v11.9.0\ndocker v19 (working with Docker version 19.03.5, build 633a0ea838)\ndocker-compose v1 (working with docker-compose version 1.22.0, build f46880fe)\n\n# to use the correct node version\nnvm use v11.9.0\n\n# or as of now (2020/01/15), stable version points to v11.9.0\nnvm use stableDevelopment mode\n# make sure the databse is up and running\n$ docker-compose up\n\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodSwagger endpoint should be accessible: http://localhost:3000/api/#\nProd mode - single node\n# use docker-compose-single-node\n# 1) brings up postgres db\n# 2) brings up ekho instance\n$ docker-compose -f docker-compose-single-node.yml up\n\n# to update existing containers with new code, rebuild new images\n$ docker-compose -f docker-compose-single-node.yml down\n$ docker-compose -f docker-compose-single-node.yml build\n$ docker-compose -f docker-compose-single-node.yml upSwagger endpoint should be accessible: http://localhost:3000/api/#\nProd mode - dual node\n# use docker-compose-dual-node\n# 1) brings up postgres db1 and ekho1 in network1\n# 2) brings up postgres db2 and ekho2 in network2\n# Note: instance 1 and 2 are isolated by different networks\n$ docker-compose -f docker-compose-dual-node.yml up\n\n# to update existing containers with new code, rebuild new images\n$ docker-compose -f docker-compose-dual-node.yml down\n$ docker-compose -f docker-compose-dual-node.yml build\n$ docker-compose -f docker-compose-dual-node.yml upSwagger endpoints should be accessible:\n\nhttp://localhost:3100/api/#\nhttp://localhost:3200/api/#\n\nNote: single and dual node can run simultaneosly, producing 3 separate instances locally\nTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n# write coverage reports to /coverage\n# open /coverage/lcov-report/index.html to view locally.\n# CI prefer /coverage/coverage-final.json\n$ npm run test:covDocumentation\nDetailed documentation can be found here: https://consensys.github.io/ekho/.\nThis documentation is generated by compodoc and provided by github pages.\nIn order to update existing configuration in https://consensys.github.io/ekho/,\nsimply run ./generate-documentation.sh.\nAfter reviewing it locally, add/commit/push the ./documentation.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ChannelsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ContactsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CryptographyModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DevelopmentModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EventsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        IpfsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        KeyManagerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MessagesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        Web3Module\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_ChannelsModule\n\n\n\ncluster_ChannelsModule_imports\n\n\n\ncluster_ChannelsModule_exports\n\n\n\ncluster_ChannelsModule_providers\n\n\n\ncluster_ContactsModule\n\n\n\ncluster_ContactsModule_exports\n\n\n\ncluster_ContactsModule_providers\n\n\n\ncluster_CryptographyModule\n\n\n\ncluster_CryptographyModule_exports\n\n\n\ncluster_CryptographyModule_providers\n\n\n\ncluster_EventsModule\n\n\n\ncluster_EventsModule_exports\n\n\n\ncluster_EventsModule_providers\n\n\n\ncluster_IpfsModule\n\n\n\ncluster_IpfsModule_exports\n\n\n\ncluster_IpfsModule_providers\n\n\n\ncluster_MessagesModule\n\n\n\ncluster_MessagesModule_exports\n\n\n\ncluster_MessagesModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_Web3Module\n\n\n\ncluster_Web3Module_exports\n\n\n\ncluster_Web3Module_providers\n\n\n\n\nChannelsModule\n\nChannelsModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nChannelsModule->AppModule\n\n\n\n\n\nChannelsService \n\nChannelsService \n\nChannelsService  -->\n\nChannelsModule->ChannelsService \n\n\n\n\n\nContactsModule\n\nContactsModule\n\nChannelsModule -->\n\nContactsModule->ChannelsModule\n\n\n\n\n\nDevelopmentModule\n\nDevelopmentModule\n\nDevelopmentModule -->\n\nContactsModule->DevelopmentModule\n\n\n\nAppModule -->\n\nContactsModule->AppModule\n\n\n\n\n\nContactsService \n\nContactsService \n\nContactsService  -->\n\nContactsModule->ContactsService \n\n\n\nAppModule -->\n\nDevelopmentModule->AppModule\n\n\n\n\n\nKeyManagerModule\n\nKeyManagerModule\n\nChannelsModule -->\n\nKeyManagerModule->ChannelsModule\n\n\n\nContactsModule -->\n\nKeyManagerModule->ContactsModule\n\n\n\nDevelopmentModule -->\n\nKeyManagerModule->DevelopmentModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nKeyManagerModule->UsersModule\n\n\n\nAppModule -->\n\nKeyManagerModule->AppModule\n\n\n\n\n\nMessagesModule\n\nMessagesModule\n\nAppModule -->\n\nMessagesModule->AppModule\n\n\n\n\n\nMessagesService \n\nMessagesService \n\nMessagesService  -->\n\nMessagesModule->MessagesService \n\n\n\nChannelsModule -->\n\nUsersModule->ChannelsModule\n\n\n\nContactsModule -->\n\nUsersModule->ContactsModule\n\n\n\nDevelopmentModule -->\n\nUsersModule->DevelopmentModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nCryptographyModule\n\nCryptographyModule\n\nChannelsModule -->\n\nCryptographyModule->ChannelsModule\n\n\n\nContactsModule -->\n\nCryptographyModule->ContactsModule\n\n\n\nDevelopmentModule -->\n\nCryptographyModule->DevelopmentModule\n\n\n\nKeyManagerModule -->\n\nCryptographyModule->KeyManagerModule\n\n\n\n\n\nCryptographyService \n\nCryptographyService \n\nCryptographyService  -->\n\nCryptographyModule->CryptographyService \n\n\n\n\n\nEventsModule\n\nEventsModule\n\nChannelsModule -->\n\nEventsModule->ChannelsModule\n\n\n\nMessagesModule -->\n\nEventsModule->MessagesModule\n\n\n\n\n\nWeb3Module\n\nWeb3Module\n\nWeb3Module -->\n\nEventsModule->Web3Module\n\n\n\n\n\nEventsService \n\nEventsService \n\nEventsService  -->\n\nEventsModule->EventsService \n\n\n\n\n\nIpfsModule\n\nIpfsModule\n\nChannelsModule -->\n\nIpfsModule->ChannelsModule\n\n\n\nMessagesModule -->\n\nIpfsModule->MessagesModule\n\n\n\n\n\nIpfsService \n\nIpfsService \n\nIpfsService  -->\n\nIpfsModule->IpfsService \n\n\n\nChannelsModule -->\n\nWeb3Module->ChannelsModule\n\n\n\nMessagesModule -->\n\nWeb3Module->MessagesModule\n\n\n\n\n\nWeb3Service \n\nWeb3Service \n\nWeb3Service  -->\n\nWeb3Module->Web3Service \n\n\n\n\n\nChannelsService\n\nChannelsService\n\nChannelsModule -->\n\nChannelsService->ChannelsModule\n\n\n\n\n\nContactsService\n\nContactsService\n\nContactsModule -->\n\nContactsService->ContactsModule\n\n\n\n\n\nCryptographyService\n\nCryptographyService\n\nCryptographyModule -->\n\nCryptographyService->CryptographyModule\n\n\n\n\n\nEventsService\n\nEventsService\n\nEventsModule -->\n\nEventsService->EventsModule\n\n\n\n\n\nIpfsService\n\nIpfsService\n\nIpfsModule -->\n\nIpfsService->IpfsModule\n\n\n\n\n\nMessagesService\n\nMessagesService\n\nMessagesModule -->\n\nMessagesService->MessagesModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\nWeb3Service\n\nWeb3Service\n\nWeb3Module -->\n\nWeb3Service->Web3Module\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        11 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    8 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    8 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    32 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    10 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            anonBlock   (src/.../faker.ts)\n                        \n                        \n                            anonChannel   (src/.../faker.ts)\n                        \n                        \n                            anonChannelMember   (src/.../faker.ts)\n                        \n                        \n                            anonChannelMessage   (src/.../faker.ts)\n                        \n                        \n                            anonContact   (src/.../faker.ts)\n                        \n                        \n                            anonContactHandshakeDto   (src/.../faker.ts)\n                        \n                        \n                            anonEvent   (src/.../faker.ts)\n                        \n                        \n                            anonIpfsMessage   (src/.../faker.ts)\n                        \n                        \n                            anonMessage   (src/.../faker.ts)\n                        \n                        \n                            anonSendMessageDto   (src/.../faker.ts)\n                        \n                        \n                            anonUser   (src/.../faker.ts)\n                        \n                        \n                            BASE64   (src/.../cryptography.service.ts)\n                        \n                        \n                            fakeChannel   (src/.../faker.ts)\n                        \n                        \n                            fakeChannelMember   (src/.../faker.ts)\n                        \n                        \n                            fakeChannelMessage   (src/.../faker.ts)\n                        \n                        \n                            fakeContact   (src/.../faker.ts)\n                        \n                        \n                            fakeContactHandshake   (src/.../faker.ts)\n                        \n                        \n                            fakeEvent   (src/.../faker.ts)\n                        \n                        \n                            fakeIpfsMessage   (src/.../faker.ts)\n                        \n                        \n                            fakeMessage   (src/.../faker.ts)\n                        \n                        \n                            fakerFactory   (test/.../test-helpers.ts)\n                        \n                        \n                            fakeSendMessageDto   (src/.../faker.ts)\n                        \n                        \n                            fakeUser   (src/.../faker.ts)\n                        \n                        \n                            get   (test/.../test-helpers.ts)\n                        \n                        \n                            getIn   (test/.../test-helpers.ts)\n                        \n                        \n                            getMockWeb3Config   (src/.../web3.configuration.ts)\n                        \n                        \n                            getTestHelper   (src/.../cryptography.test-helpers.ts)\n                        \n                        \n                            ipfsClientFactory   (src/.../ipfs.client.factory.ts)\n                        \n                        \n                            keyManagerFactory   (src/.../key-manager.factory.ts)\n                        \n                        \n                            mockConfigService   (test/.../test-helpers.ts)\n                        \n                        \n                            mockContactsService   (src/.../mock-contacts-service.ts)\n                        \n                        \n                            mockEventsService   (src/.../mock-events-service.ts)\n                        \n                        \n                            mockIpfsClient   (src/.../mock-ipfs.client.ts)\n                        \n                        \n                            mockIpfsConfigValues   (src/.../ipfs.configuration.ts)\n                        \n                        \n                            mockIpfsService   (src/.../mock-ipfs-service.ts)\n                        \n                        \n                            mockMessagesService   (src/.../mock-message-service.ts)\n                        \n                        \n                            mockQueryRunner   (test/.../test-helpers.ts)\n                        \n                        \n                            mockRepository   (test/.../test-helpers.ts)\n                        \n                        \n                            mockUsersService   (src/.../mock-users-service.ts)\n                        \n                        \n                            mockWeb3   (src/.../mock-web3.ts)\n                        \n                        \n                            mockWeb3Config   (src/.../web3.configuration.ts)\n                        \n                        \n                            mockWeb3Service   (src/.../mock-web3.ts)\n                        \n                        \n                            Web3Constants   (src/.../web3.constants.ts)\n                        \n                        \n                            Web3Factory   (src/.../web3.factory.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/events/test-helpers/faker.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            anonBlock\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Block\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  id: -1,\n  blockNumber: 0,\n  blockevents: [anonEvent],\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            anonEvent\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         EkhoEvent\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  id: -1,\n  txHash: '0x123',\n  status: 'DERP',\n  createdDate: new Date(0),\n  channelId: 'ANON_CHANNELID',\n  content: 'lalala',\n  signature: 'Made in Ireland',\n  block: anonBlock,\n  processed: false,\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fakeEvent\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : fakerFactory(anonEvent)\n                        \n                    \n\n\n            \n        \n\n    src/messages/test-helpers/faker.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            anonChannel\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Channel\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  id: -1,\n  name: 'anon-channel-name',\n  channelKey: 'no-such-key',\n  channelmembers: [anonChannelMember],\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            anonChannelMember\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ChannelMember\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  id: -1,\n  user: fakeUser(),\n  messageChainKey: 'anon-chain-key',\n  channel: anonChannel,\n  contact: fakeContact(),\n  channelmessages: [anonChannelMessage],\n  nextChannelIdentifier: 'xxx',\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            anonChannelMessage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ChannelMessage\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  id: -1,\n  channelMember: anonChannelMember,\n  messageContents: 'anon-message-contents',\n  nonce: 0,\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            anonMessage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Message\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  id: -1,\n  from: 'me',\n  to: 'you',\n  content: 'balls. lol.',\n  timestamp: new Date(0),\n  ipfsPath: 'no-such-path',\n  txHash: '0xffffff7f',\n  channelId: 'no-such-channel',\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            anonSendMessageDto\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         SendMessageDto\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  from: 'me',\n  to: 'you',\n  content: 'anon-message-content',\n  channelId: 'no-such-channel',\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fakeChannel\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : fakerFactory(anonChannel)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fakeChannelMember\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : fakerFactory(anonChannelMember)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fakeChannelMessage\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : fakerFactory(anonChannelMessage)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fakeMessage\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : fakerFactory(anonMessage)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fakeSendMessageDto\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : fakerFactory(anonSendMessageDto)\n                        \n                    \n\n\n            \n        \n\n    src/contacts/test-helpers/faker.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            anonContact\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Contact\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  id: -1,\n  name: 'anon-name',\n  identifier: 'anon-identifier',\n  user: fakeUser(),\n  handshakePublicKey: 'anon-handshake-public-key',\n  handshakePrivateKey: 'anon-handshake-private-key',\n  channelmembers: [],\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            anonContactHandshakeDto\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ContactHandshakeDto\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  from: '',\n  to: '',\n  identifier: 'no-such-identifier',\n  oneuseKey: 'ffffff7f',\n  signingKey: 'fafafafa',\n  signature: 'i-signed-this',\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fakeContact\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : fakerFactory(anonContact)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fakeContactHandshake\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : fakerFactory(anonContactHandshakeDto)\n                        \n                    \n\n\n            \n        \n\n    src/ipfs/test-helpers/faker.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            anonIpfsMessage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IpfsMessageDto\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  content: 'no-such-content',\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fakeIpfsMessage\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : fakerFactory(anonIpfsMessage)\n                        \n                    \n\n\n            \n        \n\n    src/users/test-helpers/faker.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            anonUser\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  id: -1,\n  name: 'anon-user',\n  channelmembers: [],\n  contacts: [],\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fakeUser\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : fakerFactory(anonUser)\n                        \n                    \n\n\n            \n        \n\n    src/cryptography/cryptography.service.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            BASE64\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'base64'\n                        \n                    \n\n\n            \n        \n\n    test/test-helpers.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            fakerFactory\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (fixture: T) => (partial?: Partial): T => {\n  return partial ? { ...fixture, ...partial } : fixture;\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            get\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (values: StringIndexedObject) => (dotSeperatedPath: string = '') => {\n  const path = dotSeperatedPath.split('.');\n  const [firstKey, ...childKeys] = path;\n  return getIn(values, firstKey, ...childKeys);\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getIn\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (obj: StringIndexedObject, currentKey: string, ...deeperKeys: string[]): string => {\n  const [nextDeepestKey, ...rest] = deeperKeys;\n  const val = obj[currentKey];\n\n  return typeof val === 'object' ? getIn(val, nextDeepestKey, ...rest) : val;\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            mockConfigService\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (values: StringIndexedObject) => {\n  const mockedConfigServiceGetter = get(values);\n  return {\n    get: mockedConfigServiceGetter,\n  };\n}\n                        \n                    \n\n                \n                    \n                        Mock a ConfigService which takes a config object and can get values from within that object.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            mockQueryRunner\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  startTransaction: jest.fn(),\n  commitTransaction: jest.fn(),\n  rollbackTransaction: jest.fn(),\n  release: jest.fn(),\n  manager: {\n    save: jest.fn(),\n  },\n}\n                        \n                    \n\n                \n                    \n                        A jest.Mock of a repository so Providers or modules which depend on them can be unit-tested.\nImplementation of methods exposed here can be mocked in place.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            mockRepository\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : jest.fn(() => {\n  return {\n    metadata: {\n      columns: [],\n      relations: [],\n    },\n    save: jest.fn(),\n    find: jest.fn(),\n    findOne: jest.fn(),\n    findOneOrFail: jest.fn(),\n    delete: jest.fn(),\n    manager: {\n      connection: {\n        createQueryRunner: jest.fn(() => mockQueryRunner),\n      },\n    },\n  };\n})\n                        \n                    \n\n\n            \n        \n\n    src/web3/web3.configuration.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            getMockWeb3Config\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (partial?: Partial): EkhoWeb3Config => {\n  if (!partial) {\n    partial = {};\n  }\n  return { ...mockWeb3Config, ...partial };\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            mockWeb3Config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         EkhoWeb3Config\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  web3: {\n    chain: 'no-such-blockchain',\n    hardFork: 'skibbereen',\n    rpcUrl: 'wss://no-such-location',\n    contractAddress: '0xffffff7f',\n    broadcastAccount: {\n      address: '0x0',\n      publicKey: '0x123',\n      privateKey: '0x456',\n    },\n  },\n}\n                        \n                    \n\n\n            \n        \n\n    src/cryptography/test-helpers/cryptography.test-helpers.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            getTestHelper\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (service: CryptographyService): TestHelper => {\n  /**\n   * Generate an anonymous signing pair, and one-time pair.\n   * @returns Object with signingPair and oneTimePair. Each being a CryptographyPairDto\n   */\n  const generateAnonKeys = async (): Promise => {\n    const signingPair = service.generateSigningKeyPair();\n    const oneTimePair = service.generateOneUseKeyPair();\n\n    return {\n      signingPair,\n      oneTimePair,\n    };\n  };\n\n  /**\n   * Generate TestSubjects alice, bob and trudy, each with a distince signing pair and one-time pair and an undefined sharedSecret property.\n   * @returns Object with properties alice, bob and trudy. Each a TestSubject.\n   */\n  const generateAlicenBob = async (): Promise => {\n    const alice = await generateAnonKeys();\n    const bob = await generateAnonKeys();\n    const trudy = await generateAnonKeys();\n    return {\n      alice,\n      bob,\n      trudy,\n    };\n  };\n\n  /**\n   * Generate a shared secret and its signature\n   * @param yourPublic1time A 32 byte buffer containing 'my public one-time key..\n   * @param myPriv1time A 32 byte buffer containing 'your' private one-time key.\n   * @param myPrivSigning A 32 byte buffer containing 'my' private signing key.\n   * @returns Object with properties secret, and signature, being 'my' shared secret with 'you' and my signature of that secret. Each a Buffer.\n   */\n  const generateSharedSecret = async (\n    yourPublic1time: string,\n    myPriv1time: string,\n    myPrivSigning: string,\n  ): Promise => {\n    const secret = await service.generateECDHSharedSecret(yourPublic1time, myPriv1time);\n    const signature = await service.generateSignature(secret, myPrivSigning);\n\n    return { signature, secret };\n  };\n\n  const sign = async (secret: string, signingKey: string): Promise => {\n    const signature = service.generateSignature(secret, signingKey);\n    return signature;\n  };\n\n  return {\n    generateAnonKeys,\n    generateAlicenBob,\n    generateSharedSecret,\n    sign,\n  };\n}\n                        \n                    \n\n                \n                    \n                        Fetch a TestHelper for the CryptographyService.\n\n                    \n                \n\n            \n        \n\n    src/ipfs/ipfs.client.factory.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            ipfsClientFactory\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     FactoryProvider\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  provide: IpfsClient,\n  useFactory: (config: ConfigService): IpfsClient => {\n    const host = config.get('ipfs.host');\n    const port = config.get('ipfs.port');\n    const protocol = 'https';\n    return new IpfsClient({ host, port, protocol });\n  },\n  inject: [ConfigService],\n}\n                        \n                    \n\n\n            \n        \n\n    src/key-manager/key-manager.factory.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            keyManagerFactory\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         FactoryProvider\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  provide: 'KeyManager',\n  useFactory: (\n    config: ConfigService,\n    keypairRepository: Repository,\n    cryptographyService: CryptographyService,\n  ): KeyManager => {\n    const builders = {\n      vault: (): KeyManager => {\n        const baseURL = config.get('keymanager.vault.url');\n        const timeout = config.get('keymanager.vault.timeout');\n        const vaultToken = config.get('keymanager.vault.token');\n\n        const axiosClient: AxiosInstance = axios.create({\n          baseURL,\n          timeout,\n          headers: {\n            'X-Vault-Token': vaultToken,\n          },\n        });\n        return new VaultKeyManager(axiosClient, cryptographyService);\n      },\n      db: (): KeyManager => {\n        return new DbKeyManager(keypairRepository, cryptographyService);\n      },\n    };\n    const type = config.get('keymanager.type');\n    const builder = builders[type];\n    if (!builder) {\n      throw Error(`Unexpected key-manager.type value: ${type ? type : 'undefined (missing KEY_MANAGER_TYPE in .env)'}`);\n    }\n    return builder();\n  },\n  inject: [ConfigService, getRepositoryToken(DbKeyPair), CryptographyService],\n}\n                        \n                    \n\n\n            \n        \n\n    src/contacts/test-helpers/mock-contacts-service.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            mockContactsService\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         jest.Mock>\n\n                        \n                    \n                    \n                        \n                            Default value : jest.fn(() => {\n  return {\n    createContact: jest.fn(),\n    getByUser: jest.fn(),\n    findOne: jest.fn(),\n    findAll: jest.fn(),\n    findOneOrCreate: jest.fn(),\n    delete: jest.fn(),\n    initHandshake: jest.fn(),\n    acceptInitHandshake: jest.fn(),\n    replyHandshake: jest.fn(),\n    acceptReplyHandshake: jest.fn(),\n    findOneContact: jest.fn(),\n  };\n})\n                        \n                    \n\n\n            \n        \n\n    src/events/test-helpers/mock-events-service.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            mockEventsService\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         jest.Mock>\n\n                        \n                    \n                    \n                        \n                            Default value : jest.fn(() => {\n  return {\n    get: jest.fn(),\n    getAll: jest.fn(),\n    getOneById: jest.fn(),\n    getTransactionByChannelId: jest.fn(),\n    getByTransactionHash: jest.fn(),\n    save: jest.fn(),\n    getLatestBlock: jest.fn(),\n    saveBlockInfo: jest.fn(),\n    getFirstUnprocessedEvent: jest.fn(),\n    markEventAsProcessed: jest.fn(),\n  };\n})\n                        \n                    \n\n\n            \n        \n\n    src/ipfs/test-helpers/mock-ipfs.client.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            mockIpfsClient\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : jest.fn(() => {\n  return {\n    get: jest.fn(),\n    add: jest.fn(),\n  };\n})\n                        \n                    \n\n\n            \n        \n\n    src/ipfs/ipfs.configuration.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            mockIpfsConfigValues\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : { ipfs: { host: '127.0.0.1', port: '8080' } }\n                        \n                    \n\n\n            \n        \n\n    src/ipfs/test-helpers/mock-ipfs-service.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            mockIpfsService\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         jest.Mock>\n\n                        \n                    \n                    \n                        \n                            Default value : jest.fn(() => {\n  return {\n    retrieve: jest.fn(),\n    store: jest.fn(),\n  };\n})\n                        \n                    \n\n\n            \n        \n\n    src/messages/test-helpers/mock-message-service.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            mockMessagesService\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         jest.Mock>\n\n                        \n                    \n                    \n                        \n                            Default value : jest.fn(() => {\n  return {\n    sendMessage: jest.fn(),\n    findAll: jest.fn(),\n    findForUser: jest.fn(),\n  };\n})\n                        \n                    \n\n\n            \n        \n\n    src/users/test-helpers/mock-users-service.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            mockUsersService\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         jest.Mock>\n\n                        \n                    \n                    \n                        \n                            Default value : jest.fn(() => {\n  return {\n    create: jest.fn(),\n    find: jest.fn(),\n    findAll: jest.fn(),\n    findByName: jest.fn(),\n    findById: jest.fn(),\n    delete: jest.fn(),\n    getPublicKey: jest.fn(),\n    sign: jest.fn(),\n  };\n})\n                        \n                    \n\n\n            \n        \n\n    src/web3/test-helpers/mock-web3.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            mockWeb3\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : jest.fn(() => {\n  return {\n    eth: {\n      subscribe: jest.fn(),\n    },\n  };\n})\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            mockWeb3Service\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : jest.fn(() => {\n  return {\n    emitEvent: jest.fn(),\n    getTransactionCount: jest.fn(),\n    sendSignerTransaction: jest.fn(),\n  };\n})\n                        \n                    \n\n\n            \n        \n\n    src/web3/web3.constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Web3Constants\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  abi: [\n    {\n      anonymous: false,\n      inputs: [\n        {\n          indexed: false,\n          internalType: 'string',\n          name: 'channelId',\n          type: 'string',\n        },\n        {\n          indexed: false,\n          internalType: 'string',\n          name: 'content',\n          type: 'string',\n        },\n        {\n          indexed: false,\n          internalType: 'string',\n          name: 'signature',\n          type: 'string',\n        },\n      ],\n      name: 'NotifyNewMessage',\n      type: 'event',\n    },\n    {\n      constant: false,\n      inputs: [\n        {\n          internalType: 'string',\n          name: 'channelId',\n          type: 'string',\n        },\n        {\n          internalType: 'string',\n          name: 'content',\n          type: 'string',\n        },\n        {\n          internalType: 'string',\n          name: 'signature',\n          type: 'string',\n        },\n      ],\n      name: 'notify',\n      outputs: [],\n      payable: false,\n      stateMutability: 'nonpayable',\n      type: 'function',\n    },\n  ],\n}\n                        \n                    \n\n\n            \n        \n\n    src/web3/web3.factory.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Web3Factory\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     FactoryProvider\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  provide: Web3,\n  useFactory: (config: ConfigService): Web3 => {\n    const rpcUrl = config.get('web3.rpcUrl');\n    return new Web3(new Web3.providers.WebsocketProvider(rpcUrl));\n  },\n  inject: [ConfigService],\n}\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
